
STM32_FREERTOS_STACK_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08010c30  08010c30  00020c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e64  08010e64  000469a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010e64  08010e64  00020e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e6c  08010e6c  000469a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e6c  08010e6c  00020e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e70  08010e70  00020e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08010e74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .first_data   00016900  200000a0  08010f04  000300a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007f50  200169a0  08027804  000469a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001e8f0  08027804  0004e8f0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000469a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037278  00000000  00000000  000469ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006001  00000000  00000000  0007dc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002988  00000000  00000000  00083c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002788  00000000  00000000  000865d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002d4a2  00000000  00000000  00088d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c758  00000000  00000000  000b61fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0010f72e  00000000  00000000  000d2952  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001e2080  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b974  00000000  00000000  001e20fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200169a0 	.word	0x200169a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08010c18 	.word	0x08010c18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200169a4 	.word	0x200169a4
 800023c:	08010c18 	.word	0x08010c18

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200169bc 	.word	0x200169bc
 8000620:	20016a10 	.word	0x20016a10

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fc8a 	bl	8000f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f831 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f923 	bl	800087c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000636:	f000 f8c3 	bl	80007c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063a:	f000 f8f1 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  FreeRTOS_IPInit( ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress );
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <main+0x54>)
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <main+0x58>)
 8000644:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <main+0x5c>)
 8000646:	490f      	ldr	r1, [pc, #60]	; (8000684 <main+0x60>)
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <main+0x64>)
 800064a:	f007 fbd5 	bl	8007df8 <FreeRTOS_IPInit>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <main+0x68>)
 8000650:	1d3c      	adds	r4, r7, #4
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fa0a 	bl	8003a7e <osThreadCreate>
 800066a:	4602      	mov	r2, r0
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <main+0x6c>)
 800066e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000670:	f003 f9fe 	bl	8003a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x50>
 8000676:	bf00      	nop
 8000678:	08010da0 	.word	0x08010da0
 800067c:	08010d9c 	.word	0x08010d9c
 8000680:	08010d98 	.word	0x08010d98
 8000684:	08010d94 	.word	0x08010d94
 8000688:	08010d90 	.word	0x08010d90
 800068c:	08010c3c 	.word	0x08010c3c
 8000690:	2001b330 	.word	0x2001b330

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0b8      	sub	sp, #224	; 0xe0
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00f feb9 	bl	801041a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2290      	movs	r2, #144	; 0x90
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f00f feaa 	bl	801041a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c6:	f001 f8f3 	bl	80018b0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b3a      	ldr	r3, [pc, #232]	; (80007b4 <SystemClock_Config+0x120>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a39      	ldr	r2, [pc, #228]	; (80007b4 <SystemClock_Config+0x120>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <SystemClock_Config+0x120>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <SystemClock_Config+0x124>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ea:	4a33      	ldr	r2, [pc, #204]	; (80007b8 <SystemClock_Config+0x124>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <SystemClock_Config+0x124>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f91a 	bl	8001970 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000742:	f000 f9c7 	bl	8000ad4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000746:	f001 f8c3 	bl	80018d0 <HAL_PWREx_EnableOverDrive>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000750:	f000 f9c0 	bl	8000ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000774:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000778:	2103      	movs	r1, #3
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fba6 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000786:	f000 f9a5 	bl	8000ad4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemClock_Config+0x128>)
 800078c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800078e:	2300      	movs	r3, #0
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fd8d 	bl	80022bc <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x118>
  {
    Error_Handler();
 80007a8:	f000 f994 	bl	8000ad4 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	37e0      	adds	r7, #224	; 0xe0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000
 80007bc:	00200100 	.word	0x00200100

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART3_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x58>)
 8000804:	f002 f980 	bl	8002b08 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f961 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2001b334 	.word	0x2001b334
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2206      	movs	r2, #6
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f000 fedb 	bl	800161e <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f931 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2001b3b4 	.word	0x2001b3b4

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_GPIO_Init+0x130>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <MX_GPIO_Init+0x130>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_GPIO_Init+0x130>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x130>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <MX_GPIO_Init+0x130>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_GPIO_Init+0x130>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_GPIO_Init+0x130>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a39      	ldr	r2, [pc, #228]	; (80009ac <MX_GPIO_Init+0x130>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_GPIO_Init+0x130>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <MX_GPIO_Init+0x130>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a33      	ldr	r2, [pc, #204]	; (80009ac <MX_GPIO_Init+0x130>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0x130>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_GPIO_Init+0x130>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <MX_GPIO_Init+0x130>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_GPIO_Init+0x130>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <MX_GPIO_Init+0x130>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a27      	ldr	r2, [pc, #156]	; (80009ac <MX_GPIO_Init+0x130>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <MX_GPIO_Init+0x130>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	; 0x4081
 8000928:	4821      	ldr	r0, [pc, #132]	; (80009b0 <MX_GPIO_Init+0x134>)
 800092a:	f000 fe45 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4820      	ldr	r0, [pc, #128]	; (80009b4 <MX_GPIO_Init+0x138>)
 8000934:	f000 fe40 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_GPIO_Init+0x13c>)
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	481b      	ldr	r0, [pc, #108]	; (80009bc <MX_GPIO_Init+0x140>)
 800094e:	f000 fc89 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000952:	f244 0381 	movw	r3, #16513	; 0x4081
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x134>)
 800096c:	f000 fc7a 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0x138>)
 8000988:	f000 fc6c 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_GPIO_Init+0x138>)
 80009a0:	f000 fc60 	bl	8001264 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	; 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40021800 	.word	0x40021800
 80009b8:	10110000 	.word	0x10110000
 80009bc:	40020800 	.word	0x40020800

080009c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	b092      	sub	sp, #72	; 0x48
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char welcome[50]="Welcome, do you want to blink the led ? \r\n";
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <StartDefaultTask+0x5c>)
 80009ca:	f107 0414 	add.w	r4, r7, #20
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009dc:	c403      	stmia	r4!, {r0, r1}
 80009de:	8022      	strh	r2, [r4, #0]
 80009e0:	3402      	adds	r4, #2
 80009e2:	0c13      	lsrs	r3, r2, #16
 80009e4:	7023      	strb	r3, [r4, #0]
 80009e6:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	f8c3 2003 	str.w	r2, [r3, #3]
	char inputChar[5];
	HAL_UART_Transmit(&huart3,welcome, sizeof(welcome), 100);
 80009f2:	f107 0114 	add.w	r1, r7, #20
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2232      	movs	r2, #50	; 0x32
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <StartDefaultTask+0x60>)
 80009fc:	f002 f8d2 	bl	8002ba4 <HAL_UART_Transmit>
  for(;;)
  {
	  HAL_UART_Transmit(&huart3, "Blue Led blinking\r\n", 20, 100);
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	2214      	movs	r2, #20
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <StartDefaultTask+0x64>)
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <StartDefaultTask+0x60>)
 8000a08:	f002 f8cc 	bl	8002ba4 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <StartDefaultTask+0x68>)
 8000a10:	f000 fdeb 	bl	80015ea <HAL_GPIO_TogglePin>
	  osDelay(250);
 8000a14:	20fa      	movs	r0, #250	; 0xfa
 8000a16:	f003 f87e 	bl	8003b16 <osDelay>
	  HAL_UART_Transmit(&huart3, "Blue Led blinking\r\n", 20, 100);
 8000a1a:	e7f1      	b.n	8000a00 <StartDefaultTask+0x40>
 8000a1c:	08010c6c 	.word	0x08010c6c
 8000a20:	2001b334 	.word	0x2001b334
 8000a24:	08010c58 	.word	0x08010c58
 8000a28:	40020400 	.word	0x40020400

08000a2c <uxRand>:
}



UBaseType_t uxRand( void )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
    const uint32_t ulMultiplier = 0x015a4e35UL, ulIncrement = 1UL;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <uxRand+0x38>)
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	2301      	movs	r3, #1
 8000a38:	603b      	str	r3, [r7, #0]

    /* Utility function to generate a pseudo random number. */

    ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <uxRand+0x3c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	fb02 f203 	mul.w	r2, r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <uxRand+0x3c>)
 8000a4a:	6013      	str	r3, [r2, #0]
    return( ( int ) ( ulNextRand >> 16UL ) & 0x7fffUL );
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <uxRand+0x3c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	0c1b      	lsrs	r3, r3, #16
 8000a52:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	015a4e35 	.word	0x015a4e35
 8000a68:	20016c10 	.word	0x20016c10

08000a6c <ulApplicationGetNextSequenceNumber>:

extern uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
                                                    uint16_t usSourcePort,
                                                    uint32_t ulDestinationAddress,
                                                    uint16_t usDestinationPort )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	461a      	mov	r2, r3
 8000a78:	460b      	mov	r3, r1
 8000a7a:	817b      	strh	r3, [r7, #10]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	813b      	strh	r3, [r7, #8]
    ( void ) ulSourceAddress;
    ( void ) usSourcePort;
    ( void ) ulDestinationAddress;
    ( void ) usDestinationPort;

    return uxRand();
 8000a80:	f7ff ffd4 	bl	8000a2c <uxRand>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <xApplicationGetRandomNumber>:
 * Supply a random number to FreeRTOS+TCP stack.
 * THIS IS ONLY A DUMMY IMPLEMENTATION THAT RETURNS A PSEUDO RANDOM NUMBER
 * SO IS NOT INTENDED FOR USE IN PRODUCTION SYSTEMS.
 */
BaseType_t xApplicationGetRandomNumber( uint32_t * pulNumber )
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
    *( pulNumber ) = uxRand();
 8000a96:	f7ff ffc9 	bl	8000a2c <uxRand>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
    return pdTRUE;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <vApplicationIPNetworkEventHook>:


void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <pcApplicationHostnameHook>:
* Abstract pcApplicationHostnameHook
* https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_IP_Configuration.html
****************************************************************/

const char * pcApplicationHostnameHook( void )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
    return "hostname";
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <pcApplicationHostnameHook+0x10>)
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	08010ca0 	.word	0x08010ca0

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ada:	e7fe      	b.n	8000ada <Error_Handler+0x6>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210f      	movs	r1, #15
 8000b16:	f06f 0001 	mvn.w	r0, #1
 8000b1a:	f000 fb6c 	bl	80011f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a56      	ldr	r2, [pc, #344]	; (8000ca4 <HAL_ETH_MspInit+0x178>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	f040 80a6 	bne.w	8000c9c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a54      	ldr	r2, [pc, #336]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b52      	ldr	r3, [pc, #328]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	4b4f      	ldr	r3, [pc, #316]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b4c      	ldr	r3, [pc, #304]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a42      	ldr	r2, [pc, #264]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a3c      	ldr	r2, [pc, #240]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <HAL_ETH_MspInit+0x17c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf8:	2332      	movs	r3, #50	; 0x32
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4826      	ldr	r0, [pc, #152]	; (8000cac <HAL_ETH_MspInit+0x180>)
 8000c14:	f000 fb26 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c18:	2386      	movs	r3, #134	; 0x86
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <HAL_ETH_MspInit+0x184>)
 8000c34:	f000 fb16 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000c56:	f000 fb05 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <HAL_ETH_MspInit+0x18c>)
 8000c78:	f000 faf4 	bl	8001264 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	203d      	movs	r0, #61	; 0x3d
 8000c82:	f000 fab8 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000c86:	203d      	movs	r0, #61	; 0x3d
 8000c88:	f000 fad1 	bl	800122e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2105      	movs	r1, #5
 8000c90:	203e      	movs	r0, #62	; 0x3e
 8000c92:	f000 fab0 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000c96:	203e      	movs	r0, #62	; 0x3e
 8000c98:	f000 fac9 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40028000 	.word	0x40028000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40021800 	.word	0x40021800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_UART_MspInit+0x7c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d128      	bne.n	8000d30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0x80>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d20:	2307      	movs	r3, #7
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_MspInit+0x84>)
 8000d2c:	f000 fa9a 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d64:	d141      	bne.n	8000dea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d90:	230a      	movs	r3, #10
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4817      	ldr	r0, [pc, #92]	; (8000df8 <HAL_PCD_MspInit+0xb4>)
 8000d9c:	f000 fa62 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <HAL_PCD_MspInit+0xb4>)
 8000db6:	f000 fa55 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_PCD_MspInit+0xb0>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f8c6 	bl	8000fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e30:	f004 fdb8 	bl	80059a4 <xTaskGetSchedulerState>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e3a:	f005 fa7d 	bl	8006338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <ETH_WKUP_IRQHandler+0x10>)
 8000e4a:	f00e fd3d 	bl	800f8c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2001b7b8 	.word	0x2001b7b8

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f00f fa6a 	bl	8010360 <__errno>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	230c      	movs	r3, #12
 8000e90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20080000 	.word	0x20080000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20016c14 	.word	0x20016c14
 8000ec0:	2001e8f0 	.word	0x2001e8f0

08000ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SystemInit+0x28>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <SystemInit+0x28>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SystemInit+0x28>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd3 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f00f fa25 	bl	801036c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb7f 	bl	8000624 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f2c:	08010e74 	.word	0x08010e74
  ldr  r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f34:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f38:	200169a0 	.word	0x200169a0
  ldr  r3, = _ebss
 8000f3c:	2001e8f0 	.word	0x2001e8f0

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>

08000f42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f94a 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	f000 f805 	bl	8000f5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f52:	f7ff fdc3 	bl	8000adc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f965 	bl	800124a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f92d 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	2001b800 	.word	0x2001b800

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2001b800 	.word	0x2001b800

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	4313      	orrs	r3, r2
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	05fa0000 	.word	0x05fa0000

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e175      	b.n	8001570 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8164 	bne.w	800156a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d00b      	beq.n	80012c2 <HAL_GPIO_Init+0x5e>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b6:	2b11      	cmp	r3, #17
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x100>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	69b9      	ldr	r1, [r7, #24]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80be 	beq.w	800156a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <HAL_GPIO_Init+0x320>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a64      	ldr	r2, [pc, #400]	; (8001584 <HAL_GPIO_Init+0x320>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b62      	ldr	r3, [pc, #392]	; (8001584 <HAL_GPIO_Init+0x320>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001406:	4a60      	ldr	r2, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x324>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_GPIO_Init+0x328>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d037      	beq.n	80014a2 <HAL_GPIO_Init+0x23e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_GPIO_Init+0x32c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d031      	beq.n	800149e <HAL_GPIO_Init+0x23a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a55      	ldr	r2, [pc, #340]	; (8001594 <HAL_GPIO_Init+0x330>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d02b      	beq.n	800149a <HAL_GPIO_Init+0x236>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_GPIO_Init+0x334>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d025      	beq.n	8001496 <HAL_GPIO_Init+0x232>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a53      	ldr	r2, [pc, #332]	; (800159c <HAL_GPIO_Init+0x338>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x22e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x33c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x22a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x340>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x226>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x344>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x222>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x348>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x21a>
 800147a:	2309      	movs	r3, #9
 800147c:	e012      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800147e:	230a      	movs	r3, #10
 8001480:	e010      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001482:	2308      	movs	r3, #8
 8001484:	e00e      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001486:	2307      	movs	r3, #7
 8001488:	e00c      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800148a:	2306      	movs	r3, #6
 800148c:	e00a      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800148e:	2305      	movs	r3, #5
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001492:	2304      	movs	r3, #4
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x240>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014b4:	4934      	ldr	r1, [pc, #208]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e6:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_GPIO_Init+0x350>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f ae86 	bls.w	8001284 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	3724      	adds	r7, #36	; 0x24
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021c00 	.word	0x40021c00
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40022400 	.word	0x40022400
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800160a:	e002      	b.n	8001612 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800161e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001620:	b08f      	sub	sp, #60	; 0x3c
 8001622:	af0a      	add	r7, sp, #40	; 0x28
 8001624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e116      	b.n	800185e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fb7a 	bl	8000d44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2203      	movs	r2, #3
 8001654:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ff8e 	bl	8003590 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	687e      	ldr	r6, [r7, #4]
 800167c:	466d      	mov	r5, sp
 800167e:	f106 0410 	add.w	r4, r6, #16
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001692:	1d33      	adds	r3, r6, #4
 8001694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f001 ff22 	bl	80034e0 <USB_CoreInit>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0d7      	b.n	800185e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 ff7c 	bl	80035b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e04a      	b.n	8001756 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	333d      	adds	r3, #61	; 0x3d
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	333c      	adds	r3, #60	; 0x3c
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	b298      	uxth	r0, r3
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3342      	adds	r3, #66	; 0x42
 80016fc:	4602      	mov	r2, r0
 80016fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	333f      	adds	r3, #63	; 0x3f
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	3344      	adds	r3, #68	; 0x44
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	3348      	adds	r3, #72	; 0x48
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3350      	adds	r3, #80	; 0x50
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3301      	adds	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d3af      	bcc.n	80016c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e044      	b.n	80017f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	3301      	adds	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3b5      	bcc.n	8001766 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	687e      	ldr	r6, [r7, #4]
 8001802:	466d      	mov	r5, sp
 8001804:	f106 0410 	add.w	r4, r6, #16
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001814:	e885 0003 	stmia.w	r5, {r0, r1}
 8001818:	1d33      	adds	r3, r6, #4
 800181a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	f001 fef3 	bl	8003608 <USB_DevInit>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e014      	b.n	800185e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f80b 	bl	8001868 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 f8a5 	bl	80039a6 <USB_DevDisconnect>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001868 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_PCDEx_ActivateLPM+0x44>)
 8001898:	4313      	orrs	r3, r2
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	10000003 	.word	0x10000003

080018b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40007000 	.word	0x40007000

080018d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_PWREx_EnableOverDrive+0x98>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_PWREx_EnableOverDrive+0x98>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_PWREx_EnableOverDrive+0x98>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fe:	f7ff fb71 	bl	8000fe4 <HAL_GetTick>
 8001902:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001904:	e009      	b.n	800191a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001906:	f7ff fb6d 	bl	8000fe4 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001914:	d901      	bls.n	800191a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e022      	b.n	8001960 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d1ee      	bne.n	8001906 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001932:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001934:	f7ff fb56 	bl	8000fe4 <HAL_GetTick>
 8001938:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800193a:	e009      	b.n	8001950 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800193c:	f7ff fb52 	bl	8000fe4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194a:	d901      	bls.n	8001950 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e007      	b.n	8001960 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800195c:	d1ee      	bne.n	800193c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e29b      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	4b96      	ldr	r3, [pc, #600]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d00c      	beq.n	80019ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a0:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62>
 80019ac:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d10b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ba:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x130>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d168      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e275      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x7a>
 80019dc:	4b84      	ldr	r3, [pc, #528]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a83      	ldr	r2, [pc, #524]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e02e      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x9c>
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7b      	ldr	r2, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0xc0>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xd8>
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6b      	ldr	r2, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fac8 	bl	8000fe4 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fac4 	bl	8000fe4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e229      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe8>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fab4 	bl	8000fe4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fab0 	bl	8000fe4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e215      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x110>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d069      	beq.n	8001b82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x190>
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x17a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1e9      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e040      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa66 	bl	8000fe4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa62 	bl	8000fe4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1c7      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4929      	ldr	r1, [pc, #164]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
 8001b4e:	e018      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa42 	bl	8000fe4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa3e 	bl	8000fe4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1a3      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d038      	beq.n	8001c00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fa1f 	bl	8000fe4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff fa1b 	bl	8000fe4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e180      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x23a>
 8001bc8:	e01a      	b.n	8001c00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fa05 	bl	8000fe4 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fa01 	bl	8000fe4 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d903      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e166      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
 8001bf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a4 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a88      	ldr	r2, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b86      	ldr	r3, [pc, #536]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7f      	ldr	r2, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f9c9 	bl	8000fe4 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f9c5 	bl	8000fe4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e12a      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x4d4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x31a>
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x33c>
 8001c92:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x35e>
 8001cb4:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a5e      	ldr	r2, [pc, #376]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
 8001cce:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f979 	bl	8000fe4 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff f975 	bl	8000fe4 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0d8      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x386>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f963 	bl	8000fe4 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f95f 	bl	8000fe4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0c2      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80ae 	beq.w	8001ebc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d06d      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d14b      	bne.n	8001e0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff f930 	bl	8000fe4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f92c 	bl	8000fe4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e091      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	071b      	lsls	r3, r3, #28
 8001dd2:	491b      	ldr	r1, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8fe 	bl	8000fe4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f8fa 	bl	8000fe4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e05f      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x47c>
 8001e0a:	e057      	b.n	8001ebc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f8e4 	bl	8000fe4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f8e0 	bl	8000fe4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e045      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b0>
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x54c>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_OscConfig+0x558>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d030      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d129      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d122      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d119      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4965      	ldr	r1, [pc, #404]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f810 	bl	8000fe4 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f80c 	bl	8000fe4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4922      	ldr	r1, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	fa21 f303 	lsr.w	r3, r1, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1d4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe ff6c 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08010da8 	.word	0x08010da8
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d007      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x32>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d008      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x38>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 80b4 	bne.w	8002238 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020d2:	60bb      	str	r3, [r7, #8]
      break;
 80020d4:	e0b3      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d6:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020d8:	60bb      	str	r3, [r7, #8]
      break;
 80020da:	e0b0      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020e6:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d04a      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f2:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	f04f 0400 	mov.w	r4, #0
 80020fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	ea03 0501 	and.w	r5, r3, r1
 8002108:	ea04 0602 	and.w	r6, r4, r2
 800210c:	4629      	mov	r1, r5
 800210e:	4632      	mov	r2, r6
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	0154      	lsls	r4, r2, #5
 800211a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800211e:	014b      	lsls	r3, r1, #5
 8002120:	4619      	mov	r1, r3
 8002122:	4622      	mov	r2, r4
 8002124:	1b49      	subs	r1, r1, r5
 8002126:	eb62 0206 	sbc.w	r2, r2, r6
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	f04f 0400 	mov.w	r4, #0
 8002132:	0194      	lsls	r4, r2, #6
 8002134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002138:	018b      	lsls	r3, r1, #6
 800213a:	1a5b      	subs	r3, r3, r1
 800213c:	eb64 0402 	sbc.w	r4, r4, r2
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	00e2      	lsls	r2, r4, #3
 800214a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800214e:	00d9      	lsls	r1, r3, #3
 8002150:	460b      	mov	r3, r1
 8002152:	4614      	mov	r4, r2
 8002154:	195b      	adds	r3, r3, r5
 8002156:	eb44 0406 	adc.w	r4, r4, r6
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	0262      	lsls	r2, r4, #9
 8002164:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002168:	0259      	lsls	r1, r3, #9
 800216a:	460b      	mov	r3, r1
 800216c:	4614      	mov	r4, r2
 800216e:	4618      	mov	r0, r3
 8002170:	4621      	mov	r1, r4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 0400 	mov.w	r4, #0
 8002178:	461a      	mov	r2, r3
 800217a:	4623      	mov	r3, r4
 800217c:	f7fe f8b8 	bl	80002f0 <__aeabi_uldivmod>
 8002180:	4603      	mov	r3, r0
 8002182:	460c      	mov	r4, r1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e049      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	ea03 0501 	and.w	r5, r3, r1
 800219e:	ea04 0602 	and.w	r6, r4, r2
 80021a2:	4629      	mov	r1, r5
 80021a4:	4632      	mov	r2, r6
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	f04f 0400 	mov.w	r4, #0
 80021ae:	0154      	lsls	r4, r2, #5
 80021b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b4:	014b      	lsls	r3, r1, #5
 80021b6:	4619      	mov	r1, r3
 80021b8:	4622      	mov	r2, r4
 80021ba:	1b49      	subs	r1, r1, r5
 80021bc:	eb62 0206 	sbc.w	r2, r2, r6
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	f04f 0400 	mov.w	r4, #0
 80021c8:	0194      	lsls	r4, r2, #6
 80021ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021ce:	018b      	lsls	r3, r1, #6
 80021d0:	1a5b      	subs	r3, r3, r1
 80021d2:	eb64 0402 	sbc.w	r4, r4, r2
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	00e2      	lsls	r2, r4, #3
 80021e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021e4:	00d9      	lsls	r1, r3, #3
 80021e6:	460b      	mov	r3, r1
 80021e8:	4614      	mov	r4, r2
 80021ea:	195b      	adds	r3, r3, r5
 80021ec:	eb44 0406 	adc.w	r4, r4, r6
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	02a2      	lsls	r2, r4, #10
 80021fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021fe:	0299      	lsls	r1, r3, #10
 8002200:	460b      	mov	r3, r1
 8002202:	4614      	mov	r4, r2
 8002204:	4618      	mov	r0, r3
 8002206:	4621      	mov	r1, r4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	f7fe f86d 	bl	80002f0 <__aeabi_uldivmod>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	60bb      	str	r3, [r7, #8]
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800223a:	60bb      	str	r3, [r7, #8]
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	68bb      	ldr	r3, [r7, #8]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_RCC_GetHCLKFreq+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002270:	f7ff fff0 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002274:	4601      	mov	r1, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	08010db8 	.word	0x08010db8

08002294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002298:	f7ff ffdc 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 800229c:	4601      	mov	r1, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0b5b      	lsrs	r3, r3, #13
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08010db8 	.word	0x08010db8

080022bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e4:	4b69      	ldr	r3, [pc, #420]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a68      	ldr	r2, [pc, #416]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	4964      	ldr	r1, [pc, #400]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d017      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	4959      	ldr	r1, [pc, #356]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d017      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	494a      	ldr	r1, [pc, #296]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 808b 	beq.w	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	4a39      	ldr	r2, [pc, #228]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	; 0x40
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a34      	ldr	r2, [pc, #208]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c4:	f7fe fe0e 	bl	8000fe4 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7fe fe0a 	bl	8000fe4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e38d      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d035      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	429a      	cmp	r2, r3
 8002406:	d02e      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d114      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fdd2 	bl	8000fe4 <HAL_GetTick>
 8002440:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	e00a      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fdce 	bl	8000fe4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e34f      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ee      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002472:	d111      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002482:	400b      	ands	r3, r1
 8002484:	4901      	ldr	r1, [pc, #4]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
 8002494:	0ffffcff 	.word	0x0ffffcff
 8002498:	4bb3      	ldr	r3, [pc, #716]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4ab2      	ldr	r2, [pc, #712]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024a2:	6093      	str	r3, [r2, #8]
 80024a4:	4bb0      	ldr	r3, [pc, #704]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	49ad      	ldr	r1, [pc, #692]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024c2:	4ba9      	ldr	r3, [pc, #676]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c8:	4aa7      	ldr	r2, [pc, #668]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024d2:	4ba5      	ldr	r3, [pc, #660]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	49a2      	ldr	r1, [pc, #648]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f0:	4b9d      	ldr	r3, [pc, #628]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	499a      	ldr	r1, [pc, #616]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002512:	4b95      	ldr	r3, [pc, #596]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002520:	4991      	ldr	r1, [pc, #580]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002534:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002542:	4989      	ldr	r1, [pc, #548]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002556:	4b84      	ldr	r3, [pc, #528]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4980      	ldr	r1, [pc, #512]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002578:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4978      	ldr	r1, [pc, #480]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f023 020c 	bic.w	r2, r3, #12
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	496f      	ldr	r1, [pc, #444]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	4967      	ldr	r1, [pc, #412]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025de:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ec:	495e      	ldr	r1, [pc, #376]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	4956      	ldr	r1, [pc, #344]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	4945      	ldr	r1, [pc, #276]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002666:	4b40      	ldr	r3, [pc, #256]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002674:	493c      	ldr	r1, [pc, #240]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002696:	4934      	ldr	r1, [pc, #208]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d011      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b8:	492b      	ldr	r1, [pc, #172]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	491b      	ldr	r1, [pc, #108]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271c:	4912      	ldr	r1, [pc, #72]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002740:	4909      	ldr	r1, [pc, #36]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	e002      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	4985      	ldr	r1, [pc, #532]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002780:	4b80      	ldr	r3, [pc, #512]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002790:	497c      	ldr	r1, [pc, #496]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a6:	f040 80d6 	bne.w	8002956 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fc15 	bl	8000fe4 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fe fc11 	bl	8000fe4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e194      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d0:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d021      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002804:	0e1b      	lsrs	r3, r3, #24
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	019a      	lsls	r2, r3, #6
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	071b      	lsls	r3, r3, #28
 8002824:	4957      	ldr	r1, [pc, #348]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d02e      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d129      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002858:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	019a      	lsls	r2, r3, #6
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	493d      	ldr	r1, [pc, #244]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002894:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f023 021f 	bic.w	r2, r3, #31
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	3b01      	subs	r3, #1
 80028a4:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01d      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	0e1b      	lsrs	r3, r3, #24
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028cc:	0f1b      	lsrs	r3, r3, #28
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	019a      	lsls	r2, r3, #6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	071b      	lsls	r3, r3, #28
 80028ec:	4925      	ldr	r1, [pc, #148]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d011      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	019a      	lsls	r2, r3, #6
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	071b      	lsls	r3, r3, #28
 800291c:	4919      	ldr	r1, [pc, #100]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800292a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800292e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fb58 	bl	8000fe4 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002938:	f7fe fb54 	bl	8000fe4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0d7      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 80cd 	bne.w	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296a:	f7fe fb3b 	bl	8000fe4 <HAL_GetTick>
 800296e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002972:	f7fe fb37 	bl	8000fe4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b64      	cmp	r3, #100	; 0x64
 800297e:	d903      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0ba      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002984:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002988:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002994:	d0ed      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02e      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d12a      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029cc:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	0f1b      	lsrs	r3, r3, #28
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	019a      	lsls	r2, r3, #6
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	4944      	ldr	r1, [pc, #272]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029fa:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	493d      	ldr	r1, [pc, #244]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d022      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a28:	d11d      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a38:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	0f1b      	lsrs	r3, r3, #28
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	019a      	lsls	r2, r3, #6
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	071b      	lsls	r3, r3, #28
 8002a5e:	4929      	ldr	r1, [pc, #164]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	019a      	lsls	r2, r3, #6
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4917      	ldr	r1, [pc, #92]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	4911      	ldr	r1, [pc, #68]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fa88 	bl	8000fe4 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ad8:	f7fe fa84 	bl	8000fe4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e007      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af6:	d1ef      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e040      	b.n	8002b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f8c6 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8be 	bl	8002cc8 <UART_SetConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e022      	b.n	8002b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fb5c 	bl	800321c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fbe3 	bl	8003360 <UART_CheckIdleState>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d17f      	bne.n	8002cbc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Transmit+0x24>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e078      	b.n	8002cbe <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Transmit+0x36>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e071      	b.n	8002cbe <HAL_UART_Transmit+0x11a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002bee:	f7fe f9f9 	bl	8000fe4 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0c:	d108      	bne.n	8002c20 <HAL_UART_Transmit+0x7c>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	e003      	b.n	8002c28 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002c30:	e02c      	b.n	8002c8c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fbd4 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e038      	b.n	8002cbe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3302      	adds	r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	e007      	b.n	8002c7a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1cc      	bne.n	8002c32 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fba1 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e005      	b.n	8002cbe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4bb1      	ldr	r3, [pc, #708]	; (8002fbc <UART_SetConfig+0x2f4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6939      	ldr	r1, [r7, #16]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a9f      	ldr	r2, [pc, #636]	; (8002fc0 <UART_SetConfig+0x2f8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d121      	bne.n	8002d8c <UART_SetConfig+0xc4>
 8002d48:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d816      	bhi.n	8002d84 <UART_SetConfig+0xbc>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0x94>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d73 	.word	0x08002d73
 8002d68:	08002d7f 	.word	0x08002d7f
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e151      	b.n	8003016 <UART_SetConfig+0x34e>
 8002d72:	2302      	movs	r3, #2
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e14e      	b.n	8003016 <UART_SetConfig+0x34e>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e14b      	b.n	8003016 <UART_SetConfig+0x34e>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	e148      	b.n	8003016 <UART_SetConfig+0x34e>
 8002d84:	2310      	movs	r3, #16
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	bf00      	nop
 8002d8a:	e144      	b.n	8003016 <UART_SetConfig+0x34e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a8d      	ldr	r2, [pc, #564]	; (8002fc8 <UART_SetConfig+0x300>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d134      	bne.n	8002e00 <UART_SetConfig+0x138>
 8002d96:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d829      	bhi.n	8002df8 <UART_SetConfig+0x130>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <UART_SetConfig+0xe4>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df9 	.word	0x08002df9
 8002dbc:	08002ded 	.word	0x08002ded
 8002dc0:	08002df9 	.word	0x08002df9
 8002dc4:	08002df9 	.word	0x08002df9
 8002dc8:	08002df9 	.word	0x08002df9
 8002dcc:	08002de7 	.word	0x08002de7
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002df9 	.word	0x08002df9
 8002ddc:	08002df3 	.word	0x08002df3
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e117      	b.n	8003016 <UART_SetConfig+0x34e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e114      	b.n	8003016 <UART_SetConfig+0x34e>
 8002dec:	2304      	movs	r3, #4
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e111      	b.n	8003016 <UART_SetConfig+0x34e>
 8002df2:	2308      	movs	r3, #8
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e10e      	b.n	8003016 <UART_SetConfig+0x34e>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	bf00      	nop
 8002dfe:	e10a      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <UART_SetConfig+0x304>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d120      	bne.n	8002e4c <UART_SetConfig+0x184>
 8002e0a:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d00f      	beq.n	8002e38 <UART_SetConfig+0x170>
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d802      	bhi.n	8002e22 <UART_SetConfig+0x15a>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <UART_SetConfig+0x164>
 8002e20:	e010      	b.n	8002e44 <UART_SetConfig+0x17c>
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d005      	beq.n	8002e32 <UART_SetConfig+0x16a>
 8002e26:	2b30      	cmp	r3, #48	; 0x30
 8002e28:	d009      	beq.n	8002e3e <UART_SetConfig+0x176>
 8002e2a:	e00b      	b.n	8002e44 <UART_SetConfig+0x17c>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e0f1      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e0ee      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e0eb      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e0e8      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	bf00      	nop
 8002e4a:	e0e4      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5f      	ldr	r2, [pc, #380]	; (8002fd0 <UART_SetConfig+0x308>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d120      	bne.n	8002e98 <UART_SetConfig+0x1d0>
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d00f      	beq.n	8002e84 <UART_SetConfig+0x1bc>
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d802      	bhi.n	8002e6e <UART_SetConfig+0x1a6>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <UART_SetConfig+0x1b0>
 8002e6c:	e010      	b.n	8002e90 <UART_SetConfig+0x1c8>
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d005      	beq.n	8002e7e <UART_SetConfig+0x1b6>
 8002e72:	2bc0      	cmp	r3, #192	; 0xc0
 8002e74:	d009      	beq.n	8002e8a <UART_SetConfig+0x1c2>
 8002e76:	e00b      	b.n	8002e90 <UART_SetConfig+0x1c8>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e0cb      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e0c8      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e84:	2304      	movs	r3, #4
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e0c5      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e0c2      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	bf00      	nop
 8002e96:	e0be      	b.n	8003016 <UART_SetConfig+0x34e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <UART_SetConfig+0x30c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d124      	bne.n	8002eec <UART_SetConfig+0x224>
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d012      	beq.n	8002ed8 <UART_SetConfig+0x210>
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d802      	bhi.n	8002ebe <UART_SetConfig+0x1f6>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <UART_SetConfig+0x204>
 8002ebc:	e012      	b.n	8002ee4 <UART_SetConfig+0x21c>
 8002ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec2:	d006      	beq.n	8002ed2 <UART_SetConfig+0x20a>
 8002ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec8:	d009      	beq.n	8002ede <UART_SetConfig+0x216>
 8002eca:	e00b      	b.n	8002ee4 <UART_SetConfig+0x21c>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e0a1      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e09e      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e09b      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e098      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	bf00      	nop
 8002eea:	e094      	b.n	8003016 <UART_SetConfig+0x34e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a39      	ldr	r2, [pc, #228]	; (8002fd8 <UART_SetConfig+0x310>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d124      	bne.n	8002f40 <UART_SetConfig+0x278>
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f04:	d012      	beq.n	8002f2c <UART_SetConfig+0x264>
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d802      	bhi.n	8002f12 <UART_SetConfig+0x24a>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <UART_SetConfig+0x258>
 8002f10:	e012      	b.n	8002f38 <UART_SetConfig+0x270>
 8002f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f16:	d006      	beq.n	8002f26 <UART_SetConfig+0x25e>
 8002f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f1c:	d009      	beq.n	8002f32 <UART_SetConfig+0x26a>
 8002f1e:	e00b      	b.n	8002f38 <UART_SetConfig+0x270>
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e077      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e074      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e071      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f32:	2308      	movs	r3, #8
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e06e      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	bf00      	nop
 8002f3e:	e06a      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <UART_SetConfig+0x314>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d124      	bne.n	8002f94 <UART_SetConfig+0x2cc>
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d012      	beq.n	8002f80 <UART_SetConfig+0x2b8>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d802      	bhi.n	8002f66 <UART_SetConfig+0x29e>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <UART_SetConfig+0x2ac>
 8002f64:	e012      	b.n	8002f8c <UART_SetConfig+0x2c4>
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	d006      	beq.n	8002f7a <UART_SetConfig+0x2b2>
 8002f6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f70:	d009      	beq.n	8002f86 <UART_SetConfig+0x2be>
 8002f72:	e00b      	b.n	8002f8c <UART_SetConfig+0x2c4>
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e04d      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e04a      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f80:	2304      	movs	r3, #4
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e047      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f86:	2308      	movs	r3, #8
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e044      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	bf00      	nop
 8002f92:	e040      	b.n	8003016 <UART_SetConfig+0x34e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <UART_SetConfig+0x318>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d139      	bne.n	8003012 <UART_SetConfig+0x34a>
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <UART_SetConfig+0x2fc>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fac:	d027      	beq.n	8002ffe <UART_SetConfig+0x336>
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb2:	d817      	bhi.n	8002fe4 <UART_SetConfig+0x31c>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01c      	beq.n	8002ff2 <UART_SetConfig+0x32a>
 8002fb8:	e027      	b.n	800300a <UART_SetConfig+0x342>
 8002fba:	bf00      	nop
 8002fbc:	efff69f3 	.word	0xefff69f3
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	40004c00 	.word	0x40004c00
 8002fd4:	40005000 	.word	0x40005000
 8002fd8:	40011400 	.word	0x40011400
 8002fdc:	40007800 	.word	0x40007800
 8002fe0:	40007c00 	.word	0x40007c00
 8002fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe8:	d006      	beq.n	8002ff8 <UART_SetConfig+0x330>
 8002fea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fee:	d009      	beq.n	8003004 <UART_SetConfig+0x33c>
 8002ff0:	e00b      	b.n	800300a <UART_SetConfig+0x342>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e00e      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e00b      	b.n	8003016 <UART_SetConfig+0x34e>
 8002ffe:	2304      	movs	r3, #4
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e008      	b.n	8003016 <UART_SetConfig+0x34e>
 8003004:	2308      	movs	r3, #8
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e005      	b.n	8003016 <UART_SetConfig+0x34e>
 800300a:	2310      	movs	r3, #16
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	bf00      	nop
 8003010:	e001      	b.n	8003016 <UART_SetConfig+0x34e>
 8003012:	2310      	movs	r3, #16
 8003014:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d17f      	bne.n	8003120 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	2b08      	cmp	r3, #8
 8003024:	d85c      	bhi.n	80030e0 <UART_SetConfig+0x418>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0x364>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003051 	.word	0x08003051
 8003030:	08003071 	.word	0x08003071
 8003034:	08003091 	.word	0x08003091
 8003038:	080030e1 	.word	0x080030e1
 800303c:	080030a9 	.word	0x080030a9
 8003040:	080030e1 	.word	0x080030e1
 8003044:	080030e1 	.word	0x080030e1
 8003048:	080030e1 	.word	0x080030e1
 800304c:	080030c9 	.word	0x080030c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f90c 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	005a      	lsls	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	b29b      	uxth	r3, r3
 800306c:	61bb      	str	r3, [r7, #24]
        break;
 800306e:	e03a      	b.n	80030e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7ff f910 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 8003074:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	61bb      	str	r3, [r7, #24]
        break;
 800308e:	e02a      	b.n	80030e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	085a      	lsrs	r2, r3, #1
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <UART_SetConfig+0x54c>)
 8003098:	4413      	add	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6852      	ldr	r2, [r2, #4]
 800309e:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	61bb      	str	r3, [r7, #24]
        break;
 80030a6:	e01e      	b.n	80030e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a8:	f7fe fffc 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80030ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	005a      	lsls	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	61bb      	str	r3, [r7, #24]
        break;
 80030c6:	e00e      	b.n	80030e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	61bb      	str	r3, [r7, #24]
        break;
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
        break;
 80030e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d916      	bls.n	800311a <UART_SetConfig+0x452>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f2:	d212      	bcs.n	800311a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f023 030f 	bic.w	r3, r3, #15
 80030fc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	b29a      	uxth	r2, r3
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	4313      	orrs	r3, r2
 800310e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	897a      	ldrh	r2, [r7, #10]
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	e070      	b.n	80031fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
 800311e:	e06d      	b.n	80031fc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003120:	7ffb      	ldrb	r3, [r7, #31]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d859      	bhi.n	80031da <UART_SetConfig+0x512>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0x464>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003151 	.word	0x08003151
 8003130:	0800316f 	.word	0x0800316f
 8003134:	0800318d 	.word	0x0800318d
 8003138:	080031db 	.word	0x080031db
 800313c:	080031a5 	.word	0x080031a5
 8003140:	080031db 	.word	0x080031db
 8003144:	080031db 	.word	0x080031db
 8003148:	080031db 	.word	0x080031db
 800314c:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7ff f88c 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8003154:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085a      	lsrs	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	61bb      	str	r3, [r7, #24]
        break;
 800316c:	e038      	b.n	80031e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316e:	f7ff f891 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 8003172:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	085a      	lsrs	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	61bb      	str	r3, [r7, #24]
        break;
 800318a:	e029      	b.n	80031e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	085a      	lsrs	r2, r3, #1
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <UART_SetConfig+0x550>)
 8003194:	4413      	add	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6852      	ldr	r2, [r2, #4]
 800319a:	fbb3 f3f2 	udiv	r3, r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	61bb      	str	r3, [r7, #24]
        break;
 80031a2:	e01d      	b.n	80031e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a4:	f7fe ff7e 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80031a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	085a      	lsrs	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	441a      	add	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e00e      	b.n	80031e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	61bb      	str	r3, [r7, #24]
        break;
 80031d8:	e002      	b.n	80031e0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
        break;
 80031de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	d908      	bls.n	80031f8 <UART_SetConfig+0x530>
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d204      	bcs.n	80031f8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e001      	b.n	80031fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	01e84800 	.word	0x01e84800
 8003218:	00f42400 	.word	0x00f42400

0800321c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01a      	beq.n	8003332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800331a:	d10a      	bne.n	8003332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800336e:	f7fd fe39 	bl	8000fe4 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d10e      	bne.n	80033a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f82a 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e020      	b.n	80033e2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d10e      	bne.n	80033cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f814 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e00a      	b.n	80033e2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4613      	mov	r3, r2
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	e05d      	b.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d059      	beq.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fd fdee 	bl	8000fe4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <UART_WaitOnFlagUntilTimeout+0x30>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11b      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003428:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e042      	b.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02b      	beq.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346e:	d123      	bne.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003478:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e00f      	b.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d092      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d120      	bne.n	800353a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	4b20      	ldr	r3, [pc, #128]	; (800358c <USB_CoreInit+0xac>)
 800350a:	4013      	ands	r3, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa52 	bl	80039d8 <USB_CoreReset>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e010      	b.n	800355c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa46 	bl	80039d8 <USB_CoreReset>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10b      	bne.n	800357a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f043 0206 	orr.w	r2, r3, #6
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003586:	b004      	add	sp, #16
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	ffbdffbf 	.word	0xffbdffbf

08003590 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 0201 	bic.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	e00b      	b.n	80035f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e001      	b.n	80035f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e003      	b.n	80035fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035f6:	2032      	movs	r0, #50	; 0x32
 80035f8:	f7fd fd00 	bl	8000ffc <HAL_Delay>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003608:	b084      	sub	sp, #16
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e009      	b.n	800363c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3340      	adds	r3, #64	; 0x40
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	2200      	movs	r2, #0
 8003634:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	3301      	adds	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b0e      	cmp	r3, #14
 8003640:	d9f2      	bls.n	8003628 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11c      	bne.n	8003682 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e005      	b.n	800368e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003694:	461a      	mov	r2, r3
 8003696:	2300      	movs	r3, #0
 8003698:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	4619      	mov	r1, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	461a      	mov	r2, r3
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10c      	bne.n	80036ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036ba:	2100      	movs	r1, #0
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f959 	bl	8003974 <USB_SetDevSpeed>
 80036c2:	e018      	b.n	80036f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036c4:	2101      	movs	r1, #1
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f954 	bl	8003974 <USB_SetDevSpeed>
 80036cc:	e013      	b.n	80036f6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d10c      	bne.n	80036ee <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f949 	bl	8003974 <USB_SetDevSpeed>
 80036e2:	e008      	b.n	80036f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036e4:	2101      	movs	r1, #1
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f944 	bl	8003974 <USB_SetDevSpeed>
 80036ec:	e003      	b.n	80036f6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036ee:	2103      	movs	r1, #3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f93f 	bl	8003974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036f6:	2110      	movs	r1, #16
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8f3 	bl	80038e4 <USB_FlushTxFifo>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f911 	bl	8003930 <USB_FlushRxFifo>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371e:	461a      	mov	r2, r3
 8003720:	2300      	movs	r3, #0
 8003722:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e043      	b.n	80037ca <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003758:	d118      	bne.n	800378c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	461a      	mov	r2, r3
 800376e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e013      	b.n	800379e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	461a      	mov	r2, r3
 8003784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e008      	b.n	800379e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	461a      	mov	r2, r3
 80037ac:	2300      	movs	r3, #0
 80037ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	3301      	adds	r3, #1
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3b7      	bcc.n	8003742 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e043      	b.n	8003860 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ee:	d118      	bne.n	8003822 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003802:	461a      	mov	r2, r3
 8003804:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e013      	b.n	8003834 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e008      	b.n	8003834 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	461a      	mov	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	461a      	mov	r2, r3
 8003854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3301      	adds	r3, #1
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d3b7      	bcc.n	80037d8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003888:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <USB_DevInit+0x2d4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <USB_DevInit+0x2d8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d8:	b004      	add	sp, #16
 80038da:	4770      	bx	lr
 80038dc:	803c3800 	.word	0x803c3800
 80038e0:	40000004 	.word	0x40000004

080038e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <USB_FlushTxFifo+0x48>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e006      	b.n	800391e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d0f0      	beq.n	80038fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	00030d40 	.word	0x00030d40

08003930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2210      	movs	r2, #16
 8003940:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <USB_FlushRxFifo+0x40>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e006      	b.n	8003962 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	d0f0      	beq.n	8003942 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	00030d40 	.word	0x00030d40

08003974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80039c6:	2003      	movs	r0, #3
 80039c8:	f7fd fb18 	bl	8000ffc <HAL_Delay>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <USB_CoreReset+0x64>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e01b      	b.n	8003a2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	daf2      	bge.n	80039e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <USB_CoreReset+0x64>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e006      	b.n	8003a2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d0f0      	beq.n	8003a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	00030d40 	.word	0x00030d40

08003a40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a52:	2b84      	cmp	r3, #132	; 0x84
 8003a54:	d005      	beq.n	8003a62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3303      	adds	r3, #3
 8003a60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a74:	f001 faa4 	bl	8004fc0 <vTaskStartScheduler>
  
  return osOK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a80:	b089      	sub	sp, #36	; 0x24
 8003a82:	af04      	add	r7, sp, #16
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <osThreadCreate+0x54>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01c      	beq.n	8003ad2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685c      	ldr	r4, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681d      	ldr	r5, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691e      	ldr	r6, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ffc8 	bl	8003a40 <makeFreeRtosPriority>
 8003ab0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aba:	9202      	str	r2, [sp, #8]
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	9100      	str	r1, [sp, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4632      	mov	r2, r6
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f001 f8ac 	bl	8004c24 <xTaskCreateStatic>
 8003acc:	4603      	mov	r3, r0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e01c      	b.n	8003b0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685c      	ldr	r4, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ade:	b29e      	uxth	r6, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ffaa 	bl	8003a40 <makeFreeRtosPriority>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	9200      	str	r2, [sp, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	4632      	mov	r2, r6
 8003afa:	4629      	mov	r1, r5
 8003afc:	4620      	mov	r0, r4
 8003afe:	f001 f8f1 	bl	8004ce4 <xTaskCreate>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <osDelay+0x16>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	e000      	b.n	8003b2e <osDelay+0x18>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fa10 	bl	8004f54 <vTaskDelay>
  
  return osOK;
 8003b34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003b44:	201c      	movs	r0, #28
 8003b46:	f002 fc89 	bl	800645c <pvPortMalloc>
 8003b4a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f9fa 	bl	8003f56 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003b68:	687b      	ldr	r3, [r7, #4]
	}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b090      	sub	sp, #64	; 0x40
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	b672      	cpsid	i
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	b662      	cpsie	i
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	e7fe      	b.n	8003baa <xEventGroupWaitBits+0x36>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <xEventGroupWaitBits+0x5a>
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	b672      	cpsid	i
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	b662      	cpsie	i
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e7fe      	b.n	8003bcc <xEventGroupWaitBits+0x58>
	configASSERT( uxBitsToWaitFor != 0 );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <xEventGroupWaitBits+0x78>
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	b672      	cpsid	i
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	b662      	cpsie	i
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e7fe      	b.n	8003bea <xEventGroupWaitBits+0x76>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bec:	f001 feda 	bl	80059a4 <xTaskGetSchedulerState>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <xEventGroupWaitBits+0x88>
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <xEventGroupWaitBits+0x8c>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <xEventGroupWaitBits+0x8e>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <xEventGroupWaitBits+0xaa>
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	b672      	cpsid	i
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	b662      	cpsie	i
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e7fe      	b.n	8003c1c <xEventGroupWaitBits+0xa8>
	}
	#endif

	vTaskSuspendAll();
 8003c1e:	f001 fa31 	bl	8005084 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c2e:	f000 f970 	bl	8003f12 <prvTestWaitCondition>
 8003c32:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00e      	beq.n	8003c58 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d028      	beq.n	8003c9a <xEventGroupWaitBits+0x126>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	401a      	ands	r2, r3
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e020      	b.n	8003c9a <xEventGroupWaitBits+0x126>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <xEventGroupWaitBits+0xf4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
 8003c66:	e018      	b.n	8003c9a <xEventGroupWaitBits+0x126>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <xEventGroupWaitBits+0x102>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	1d18      	adds	r0, r3, #4
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c90:	4619      	mov	r1, r3
 8003c92:	f001 fbef 	bl	8005474 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003c9a:	f001 fa01 	bl	80050a0 <xTaskResumeAll>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d031      	beq.n	8003d0a <xEventGroupWaitBits+0x196>
	{
		if( xAlreadyYielded == pdFALSE )
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <xEventGroupWaitBits+0x148>
		{
			portYIELD_WITHIN_API();
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <xEventGroupWaitBits+0x1a0>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003cbc:	f002 f834 	bl	8005d28 <uxTaskResetEventItemValue>
 8003cc0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11a      	bne.n	8003d02 <xEventGroupWaitBits+0x18e>
		{
			taskENTER_CRITICAL();
 8003ccc:	f002 faa4 	bl	8006218 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cdc:	f000 f919 	bl	8003f12 <prvTestWaitCondition>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <xEventGroupWaitBits+0x186>
				{
					if( xClearOnExit != pdFALSE )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <xEventGroupWaitBits+0x186>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003cfe:	f002 fabd 	bl	800627c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <xEventGroupClearBits+0x2c>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	b672      	cpsid	i
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	b662      	cpsie	i
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e7fe      	b.n	8003d42 <xEventGroupClearBits+0x2a>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <xEventGroupClearBits+0x4e>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	b672      	cpsid	i
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	b662      	cpsie	i
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	e7fe      	b.n	8003d64 <xEventGroupClearBits+0x4c>

	taskENTER_CRITICAL();
 8003d66:	f002 fa57 	bl	8006218 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8003d7e:	f002 fa7d 	bl	800627c <vPortExitCritical>

	return uxReturn;
 8003d82:	693b      	ldr	r3, [r7, #16]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003d96:	2300      	movs	r3, #0
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <xEventGroupSetBits+0x34>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	b672      	cpsid	i
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	b662      	cpsie	i
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e7fe      	b.n	8003dbe <xEventGroupSetBits+0x32>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <xEventGroupSetBits+0x56>
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	b672      	cpsid	i
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	b662      	cpsie	i
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e7fe      	b.n	8003de0 <xEventGroupSetBits+0x54>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	3304      	adds	r3, #4
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	3308      	adds	r3, #8
 8003dec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003dee:	f001 f949 	bl	8005084 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003e04:	e03c      	b.n	8003e80 <xEventGroupSetBits+0xf4>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <xEventGroupSetBits+0xb6>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <xEventGroupSetBits+0xc8>
				{
					xMatchFound = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	e008      	b.n	8003e54 <xEventGroupSetBits+0xc8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d101      	bne.n	8003e54 <xEventGroupSetBits+0xc8>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <xEventGroupSetBits+0xf0>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <xEventGroupSetBits+0xe0>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e74:	4619      	mov	r1, r3
 8003e76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e78:	f001 fb9e 	bl	80055b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1be      	bne.n	8003e06 <xEventGroupSetBits+0x7a>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	401a      	ands	r2, r3
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003e96:	f001 f903 	bl	80050a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	681b      	ldr	r3, [r3, #0]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3738      	adds	r7, #56	; 0x38
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8003eb8:	f001 f8e4 	bl	8005084 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003ebc:	e018      	b.n	8003ef0 <vEventGroupDelete+0x4a>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10b      	bne.n	8003ee2 <vEventGroupDelete+0x3c>
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	b672      	cpsid	i
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	b662      	cpsie	i
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e7fe      	b.n	8003ee0 <vEventGroupDelete+0x3a>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fb64 	bl	80055b8 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e2      	bne.n	8003ebe <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	7e1b      	ldrb	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <vEventGroupDelete+0x60>
			{
				vPortFree( pxEventBits );
 8003f00:	6978      	ldr	r0, [r7, #20]
 8003f02:	f002 fb73 	bl	80065ec <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8003f06:	f001 f8cb 	bl	80050a0 <xTaskResumeAll>
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e007      	b.n	8003f48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d101      	bne.n	8003f48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003f48:	697b      	ldr	r3, [r7, #20]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 0208 	add.w	r2, r3, #8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 0208 	add.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 0208 	add.w	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d103      	bne.n	8004018 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e00c      	b.n	8004032 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3308      	adds	r3, #8
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e002      	b.n	8004026 <vListInsert+0x2e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d2f6      	bcs.n	8004020 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6852      	ldr	r2, [r2, #4]
 800408a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d103      	bne.n	800409e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <xQueueGenericReset+0x2c>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	b672      	cpsid	i
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	b662      	cpsie	i
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80040ec:	f002 f894 	bl	8006218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	441a      	add	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	3b01      	subs	r3, #1
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	441a      	add	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	22ff      	movs	r2, #255	; 0xff
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	22ff      	movs	r2, #255	; 0xff
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d114      	bne.n	800416c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01a      	beq.n	8004180 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3310      	adds	r3, #16
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f9ce 	bl	80054f0 <xTaskRemoveFromEventList>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <xQueueGenericReset+0xd0>)
 800415c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	e009      	b.n	8004180 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3310      	adds	r3, #16
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fef0 	bl	8003f56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3324      	adds	r3, #36	; 0x24
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff feeb 	bl	8003f56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004180:	f002 f87c 	bl	800627c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004184:	2301      	movs	r3, #1
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <xQueueGenericCreate+0x2c>
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	b672      	cpsid	i
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	b662      	cpsie	i
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e7fe      	b.n	80041be <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e004      	b.n	80041d6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3348      	adds	r3, #72	; 0x48
 80041da:	4618      	mov	r0, r3
 80041dc:	f002 f93e 	bl	800645c <pvPortMalloc>
 80041e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d011      	beq.n	800420c <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3348      	adds	r3, #72	; 0x48
 80041f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041fa:	79fa      	ldrb	r2, [r7, #7]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f805 	bl	8004216 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800420c:	69bb      	ldr	r3, [r7, #24]
	}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e002      	b.n	8004238 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004244:	2101      	movs	r1, #1
 8004246:	69b8      	ldr	r0, [r7, #24]
 8004248:	f7ff ff3a 	bl	80040c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <xQueueCreateCountingSemaphore+0x28>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	b672      	cpsid	i
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	b662      	cpsie	i
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e7fe      	b.n	800427a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d90b      	bls.n	800429c <xQueueCreateCountingSemaphore+0x48>
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	b672      	cpsid	i
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	b662      	cpsie	i
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e7fe      	b.n	800429a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800429c:	2202      	movs	r2, #2
 800429e:	2100      	movs	r1, #0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff77 	bl	8004194 <xQueueGenericCreate>
 80042a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80042b4:	697b      	ldr	r3, [r7, #20]
	}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042ce:	2300      	movs	r3, #0
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <xQueueGenericSend+0x34>
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	b672      	cpsid	i
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	b662      	cpsie	i
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	e7fe      	b.n	80042f2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x42>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <xQueueGenericSend+0x46>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <xQueueGenericSend+0x48>
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xQueueGenericSend+0x64>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	b672      	cpsid	i
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	b662      	cpsie	i
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	e7fe      	b.n	8004322 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d103      	bne.n	8004332 <xQueueGenericSend+0x72>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <xQueueGenericSend+0x76>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueGenericSend+0x78>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <xQueueGenericSend+0x94>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	b672      	cpsid	i
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	b662      	cpsie	i
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004354:	f001 fb26 	bl	80059a4 <xTaskGetSchedulerState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <xQueueGenericSend+0xa4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <xQueueGenericSend+0xa8>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <xQueueGenericSend+0xaa>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <xQueueGenericSend+0xc6>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e7fe      	b.n	8004384 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004386:	f001 ff47 	bl	8006218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <xQueueGenericSend+0xdc>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d129      	bne.n	80043f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a2:	f000 fadc 	bl	800495e <prvCopyDataToQueue>
 80043a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	3324      	adds	r3, #36	; 0x24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f89b 	bl	80054f0 <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043c0:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <xQueueGenericSend+0x200>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	e00a      	b.n	80043e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <xQueueGenericSend+0x200>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e8:	f001 ff48 	bl	800627c <vPortExitCritical>
				return pdPASS;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e063      	b.n	80044b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f6:	f001 ff41 	bl	800627c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e05c      	b.n	80044b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	4618      	mov	r0, r3
 800440a:	f001 f961 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004412:	f001 ff33 	bl	800627c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004416:	f000 fe35 	bl	8005084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800441a:	f001 fefd 	bl	8006218 <vPortEnterCritical>
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004424:	b25b      	sxtb	r3, r3
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d103      	bne.n	8004434 <xQueueGenericSend+0x174>
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443a:	b25b      	sxtb	r3, r3
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <xQueueGenericSend+0x18a>
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800444a:	f001 ff17 	bl	800627c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444e:	1d3a      	adds	r2, r7, #4
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f950 	bl	80056fc <xTaskCheckForTimeOut>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d124      	bne.n	80044ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004464:	f000 fb73 	bl	8004b4e <prvIsQueueFull>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d018      	beq.n	80044a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	3310      	adds	r3, #16
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 ffd6 	bl	8005428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800447c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447e:	f000 fafe 	bl	8004a7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004482:	f000 fe0d 	bl	80050a0 <xTaskResumeAll>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	f47f af7c 	bne.w	8004386 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <xQueueGenericSend+0x200>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	e772      	b.n	8004386 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a2:	f000 faec 	bl	8004a7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a6:	f000 fdfb 	bl	80050a0 <xTaskResumeAll>
 80044aa:	e76c      	b.n	8004386 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ae:	f000 fae6 	bl	8004a7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b2:	f000 fdf5 	bl	80050a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3738      	adds	r7, #56	; 0x38
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <xQueueReceive+0x32>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	b672      	cpsid	i
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	b662      	cpsie	i
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	e7fe      	b.n	80044f4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <xQueueReceive+0x40>
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <xQueueReceive+0x44>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <xQueueReceive+0x46>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <xQueueReceive+0x62>
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	b672      	cpsid	i
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	b662      	cpsie	i
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e7fe      	b.n	8004524 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004526:	f001 fa3d 	bl	80059a4 <xTaskGetSchedulerState>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xQueueReceive+0x72>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueReceive+0x76>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueReceive+0x78>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <xQueueReceive+0x94>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	b672      	cpsid	i
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	b662      	cpsie	i
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e7fe      	b.n	8004556 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004558:	f001 fe5e 	bl	8006218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01f      	beq.n	80045a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456c:	f000 fa61 	bl	8004a32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	1e5a      	subs	r2, r3, #1
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00f      	beq.n	80045a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	3310      	adds	r3, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f000 ffb3 	bl	80054f0 <xTaskRemoveFromEventList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004590:	4b3c      	ldr	r3, [pc, #240]	; (8004684 <xQueueReceive+0x1c0>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045a0:	f001 fe6c 	bl	800627c <vPortExitCritical>
				return pdPASS;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e069      	b.n	800467c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045ae:	f001 fe65 	bl	800627c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e062      	b.n	800467c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 f885 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ca:	f001 fe57 	bl	800627c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ce:	f000 fd59 	bl	8005084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045d2:	f001 fe21 	bl	8006218 <vPortEnterCritical>
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d103      	bne.n	80045ec <xQueueReceive+0x128>
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d103      	bne.n	8004602 <xQueueReceive+0x13e>
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004602:	f001 fe3b 	bl	800627c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004606:	1d3a      	adds	r2, r7, #4
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f874 	bl	80056fc <xTaskCheckForTimeOut>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d123      	bne.n	8004662 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800461a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461c:	f000 fa81 	bl	8004b22 <prvIsQueueEmpty>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	3324      	adds	r3, #36	; 0x24
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fefa 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004636:	f000 fa22 	bl	8004a7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800463a:	f000 fd31 	bl	80050a0 <xTaskResumeAll>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d189      	bne.n	8004558 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xQueueReceive+0x1c0>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	e780      	b.n	8004558 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004658:	f000 fa11 	bl	8004a7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800465c:	f000 fd20 	bl	80050a0 <xTaskResumeAll>
 8004660:	e77a      	b.n	8004558 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004664:	f000 fa0b 	bl	8004a7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004668:	f000 fd1a 	bl	80050a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800466c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466e:	f000 fa58 	bl	8004b22 <prvIsQueueEmpty>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	f43f af6f 	beq.w	8004558 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800467a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800467c:	4618      	mov	r0, r3
 800467e:	3730      	adds	r7, #48	; 0x30
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <xQueueSemaphoreTake+0x34>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	b672      	cpsid	i
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	b662      	cpsie	i
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	e7fe      	b.n	80046ba <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <xQueueSemaphoreTake+0x54>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	b672      	cpsid	i
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	b662      	cpsie	i
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e7fe      	b.n	80046da <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046dc:	f001 f962 	bl	80059a4 <xTaskGetSchedulerState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <xQueueSemaphoreTake+0x64>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueSemaphoreTake+0x68>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueSemaphoreTake+0x6a>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <xQueueSemaphoreTake+0x86>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	b672      	cpsid	i
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	b662      	cpsie	i
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e7fe      	b.n	800470c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800470e:	f001 fd83 	bl	8006218 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d024      	beq.n	8004768 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800472e:	f001 fb13 	bl	8005d58 <pvTaskIncrementMutexHeldCount>
 8004732:	4602      	mov	r2, r0
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	3310      	adds	r3, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fed3 	bl	80054f0 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b54      	ldr	r3, [pc, #336]	; (80048a4 <xQueueSemaphoreTake+0x21c>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004760:	f001 fd8c 	bl	800627c <vPortExitCritical>
				return pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	e098      	b.n	800489a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d112      	bne.n	8004794 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <xQueueSemaphoreTake+0x104>
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	b672      	cpsid	i
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	b662      	cpsie	i
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	e7fe      	b.n	800478a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800478c:	f001 fd76 	bl	800627c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004790:	2300      	movs	r3, #0
 8004792:	e082      	b.n	800489a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 ff96 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a8:	f001 fd68 	bl	800627c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ac:	f000 fc6a 	bl	8005084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047b0:	f001 fd32 	bl	8006218 <vPortEnterCritical>
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d103      	bne.n	80047ca <xQueueSemaphoreTake+0x142>
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d0:	b25b      	sxtb	r3, r3
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d103      	bne.n	80047e0 <xQueueSemaphoreTake+0x158>
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	f001 fd4c 	bl	800627c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047e4:	463a      	mov	r2, r7
 80047e6:	f107 030c 	add.w	r3, r7, #12
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 ff85 	bl	80056fc <xTaskCheckForTimeOut>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d132      	bne.n	800485e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047fa:	f000 f992 	bl	8004b22 <prvIsQueueEmpty>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d026      	beq.n	8004852 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800480c:	f001 fd04 	bl	8006218 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f001 f8e3 	bl	80059e0 <xTaskPriorityInherit>
 800481a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800481c:	f001 fd2e 	bl	800627c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fdfd 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800482e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004830:	f000 f925 	bl	8004a7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004834:	f000 fc34 	bl	80050a0 <xTaskResumeAll>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f af67 	bne.w	800470e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <xQueueSemaphoreTake+0x21c>)
 8004842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	e75d      	b.n	800470e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004854:	f000 f913 	bl	8004a7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004858:	f000 fc22 	bl	80050a0 <xTaskResumeAll>
 800485c:	e757      	b.n	800470e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800485e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004860:	f000 f90d 	bl	8004a7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004864:	f000 fc1c 	bl	80050a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800486a:	f000 f95a 	bl	8004b22 <prvIsQueueEmpty>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	f43f af4c 	beq.w	800470e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800487c:	f001 fccc 	bl	8006218 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004882:	f000 f854 	bl	800492e <prvGetDisinheritPriorityAfterTimeout>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f9ae 	bl	8005bf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004894:	f001 fcf2 	bl	800627c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004898:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800489a:	4618      	mov	r0, r3
 800489c:	3738      	adds	r7, #56	; 0x38
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <uxQueueMessagesWaiting+0x26>
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	b672      	cpsid	i
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	b662      	cpsie	i
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	e7fe      	b.n	80048cc <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80048ce:	f001 fca3 	bl	8006218 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80048d8:	f001 fcd0 	bl	800627c <vPortExitCritical>

	return uxReturn;
 80048dc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <vQueueDelete+0x2a>
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	b672      	cpsid	i
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	b662      	cpsie	i
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	e7fe      	b.n	800490e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f95d 	bl	8004bd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f001 fe63 	bl	80065ec <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1c3 0307 	rsb	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e001      	b.n	8004950 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004950:	68fb      	ldr	r3, [r7, #12]
	}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d14d      	bne.n	8004a20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f8a9 	bl	8005ae0 <xTaskPriorityDisinherit>
 800498e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	e043      	b.n	8004a20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6858      	ldr	r0, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	461a      	mov	r2, r3
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	f00b fd12 	bl	80103d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	441a      	add	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d32b      	bcc.n	8004a20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	e026      	b.n	8004a20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68d8      	ldr	r0, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	461a      	mov	r2, r3
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	f00b fcf8 	bl	80103d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	425b      	negs	r3, r3
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d207      	bcs.n	8004a0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	425b      	negs	r3, r3
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d105      	bne.n	8004a20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a28:	697b      	ldr	r3, [r7, #20]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d018      	beq.n	8004a76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d303      	bcc.n	8004a66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6838      	ldr	r0, [r7, #0]
 8004a72:	f00b fcae 	bl	80103d2 <memcpy>
	}
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a86:	f001 fbc7 	bl	8006218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a92:	e011      	b.n	8004ab8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fd25 	bl	80054f0 <xTaskRemoveFromEventList>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004aac:	f000 fe8a 	bl	80057c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dce9      	bgt.n	8004a94 <prvUnlockQueue+0x16>
 8004ac0:	e000      	b.n	8004ac4 <prvUnlockQueue+0x46>
					break;
 8004ac2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004acc:	f001 fbd6 	bl	800627c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ad0:	f001 fba2 	bl	8006218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ada:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004adc:	e011      	b.n	8004b02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3310      	adds	r3, #16
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fd00 	bl	80054f0 <xTaskRemoveFromEventList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004af6:	f000 fe65 	bl	80057c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	dce9      	bgt.n	8004ade <prvUnlockQueue+0x60>
 8004b0a:	e000      	b.n	8004b0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b16:	f001 fbb1 	bl	800627c <vPortExitCritical>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b2a:	f001 fb75 	bl	8006218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e001      	b.n	8004b40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 fb9c 	bl	800627c <vPortExitCritical>

	return xReturn;
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b56:	f001 fb5f 	bl	8006218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d102      	bne.n	8004b6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e001      	b.n	8004b70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b70:	f001 fb84 	bl	800627c <vPortExitCritical>

	return xReturn;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e014      	b.n	8004bba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b90:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <vQueueAddToRegistry+0x4c>)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b9c:	490b      	ldr	r1, [pc, #44]	; (8004bcc <vQueueAddToRegistry+0x4c>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <vQueueAddToRegistry+0x4c>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bb2:	e005      	b.n	8004bc0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b07      	cmp	r3, #7
 8004bbe:	d9e7      	bls.n	8004b90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	2001b804 	.word	0x2001b804

08004bd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e016      	b.n	8004c0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <vQueueUnregisterQueue+0x50>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10b      	bne.n	8004c06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <vQueueUnregisterQueue+0x50>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <vQueueUnregisterQueue+0x50>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
				break;
 8004c04:	e005      	b.n	8004c12 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b07      	cmp	r3, #7
 8004c10:	d9e5      	bls.n	8004bde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	2001b804 	.word	0x2001b804

08004c24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	; 0x38
 8004c28:	af04      	add	r7, sp, #16
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <xTaskCreateStatic+0x2c>
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	b672      	cpsid	i
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	b662      	cpsie	i
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	e7fe      	b.n	8004c4e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <xTaskCreateStatic+0x4a>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	b672      	cpsid	i
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	b662      	cpsie	i
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e7fe      	b.n	8004c6c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c6e:	2354      	movs	r3, #84	; 0x54
 8004c70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b54      	cmp	r3, #84	; 0x54
 8004c76:	d00b      	beq.n	8004c90 <xTaskCreateStatic+0x6c>
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	b672      	cpsid	i
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	b662      	cpsie	i
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e7fe      	b.n	8004c8e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <xTaskCreateStatic+0xb2>
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01b      	beq.n	8004cd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9303      	str	r3, [sp, #12]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f850 	bl	8004d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cd0:	f000 f8d6 	bl	8004e80 <prvAddNewTaskToReadyList>
 8004cd4:	e001      	b.n	8004cda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cda:	697b      	ldr	r3, [r7, #20]
	}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3728      	adds	r7, #40	; 0x28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fbaf 	bl	800645c <pvPortMalloc>
 8004cfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d06:	2054      	movs	r0, #84	; 0x54
 8004d08:	f001 fba8 	bl	800645c <pvPortMalloc>
 8004d0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
 8004d1a:	e005      	b.n	8004d28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d1c:	6978      	ldr	r0, [r7, #20]
 8004d1e:	f001 fc65 	bl	80065ec <vPortFree>
 8004d22:	e001      	b.n	8004d28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f80e 	bl	8004d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d52:	69f8      	ldr	r0, [r7, #28]
 8004d54:	f000 f894 	bl	8004e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e002      	b.n	8004d64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d64:	69bb      	ldr	r3, [r7, #24]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b088      	sub	sp, #32
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004d86:	440b      	add	r3, r1
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f023 0307 	bic.w	r3, r3, #7
 8004d94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <prvInitialiseNewTask+0x4a>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	b672      	cpsid	i
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	b662      	cpsie	i
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e7fe      	b.n	8004db6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01f      	beq.n	8004dfe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e012      	b.n	8004dea <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	7819      	ldrb	r1, [r3, #0]
 8004dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3334      	adds	r3, #52	; 0x34
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d006      	beq.n	8004df2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b0f      	cmp	r3, #15
 8004dee:	d9e9      	bls.n	8004dc4 <prvInitialiseNewTask+0x56>
 8004df0:	e000      	b.n	8004df4 <prvInitialiseNewTask+0x86>
			{
				break;
 8004df2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfc:	e003      	b.n	8004e06 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	2b06      	cmp	r3, #6
 8004e0a:	d901      	bls.n	8004e10 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e0c:	2306      	movs	r3, #6
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	2200      	movs	r2, #0
 8004e20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	3304      	adds	r3, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f8b5 	bl	8003f96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	3318      	adds	r3, #24
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff f8b0 	bl	8003f96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	f1c3 0207 	rsb	r2, r3, #7
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2200      	movs	r2, #0
 8004e50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	69b8      	ldr	r0, [r7, #24]
 8004e60:	f001 f8d0 	bl	8006004 <pxPortInitialiseStack>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e88:	f001 f9c6 	bl	8006218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <prvAddNewTaskToReadyList+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <prvAddNewTaskToReadyList+0xb8>)
 8004e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <prvAddNewTaskToReadyList+0xbc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e9e:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <prvAddNewTaskToReadyList+0xbc>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea4:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <prvAddNewTaskToReadyList+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d110      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eac:	f000 fcae 	bl	800580c <prvInitialiseTaskLists>
 8004eb0:	e00d      	b.n	8004ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <prvAddNewTaskToReadyList+0xc0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <prvAddNewTaskToReadyList+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d802      	bhi.n	8004ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <prvAddNewTaskToReadyList+0xbc>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004ed6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	2201      	movs	r2, #1
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a15      	ldr	r2, [pc, #84]	; (8004f4c <prvAddNewTaskToReadyList+0xcc>)
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7ff f855 	bl	8003fb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f06:	f001 f9b9 	bl	800627c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <prvAddNewTaskToReadyList+0xc0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <prvAddNewTaskToReadyList+0xbc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d207      	bcs.n	8004f30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20016d18 	.word	0x20016d18
 8004f3c:	20016c18 	.word	0x20016c18
 8004f40:	20016d24 	.word	0x20016d24
 8004f44:	20016d34 	.word	0x20016d34
 8004f48:	20016d20 	.word	0x20016d20
 8004f4c:	20016c1c 	.word	0x20016c1c
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <vTaskDelay+0x64>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <vTaskDelay+0x32>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	b672      	cpsid	i
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	b662      	cpsie	i
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	e7fe      	b.n	8004f84 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004f86:	f000 f87d 	bl	8005084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 ffd3 	bl	8005f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f92:	f000 f885 	bl	80050a0 <xTaskResumeAll>
 8004f96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <vTaskDelay+0x68>)
 8004fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20016d40 	.word	0x20016d40
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fce:	463a      	mov	r2, r7
 8004fd0:	1d39      	adds	r1, r7, #4
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fb0a 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	9202      	str	r2, [sp, #8]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	460a      	mov	r2, r1
 8004fee:	491f      	ldr	r1, [pc, #124]	; (800506c <vTaskStartScheduler+0xac>)
 8004ff0:	481f      	ldr	r0, [pc, #124]	; (8005070 <vTaskStartScheduler+0xb0>)
 8004ff2:	f7ff fe17 	bl	8004c24 <xTaskCreateStatic>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <vTaskStartScheduler+0xb4>)
 8004ffa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <vTaskStartScheduler+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e001      	b.n	800500e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d117      	bne.n	8005044 <vTaskStartScheduler+0x84>
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <vTaskStartScheduler+0xb8>)
 800502c:	f04f 32ff 	mov.w	r2, #4294967295
 8005030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <vTaskStartScheduler+0xbc>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <vTaskStartScheduler+0xc0>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800503e:	f001 f86f 	bl	8006120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005042:	e00f      	b.n	8005064 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d10b      	bne.n	8005064 <vTaskStartScheduler+0xa4>
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	b672      	cpsid	i
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	b662      	cpsie	i
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	e7fe      	b.n	8005062 <vTaskStartScheduler+0xa2>
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08010cac 	.word	0x08010cac
 8005070:	080057dd 	.word	0x080057dd
 8005074:	20016d3c 	.word	0x20016d3c
 8005078:	20016d38 	.word	0x20016d38
 800507c:	20016d24 	.word	0x20016d24
 8005080:	20016d1c 	.word	0x20016d1c

08005084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <vTaskSuspendAll+0x18>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3301      	adds	r3, #1
 800508e:	4a03      	ldr	r2, [pc, #12]	; (800509c <vTaskSuspendAll+0x18>)
 8005090:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20016d40 	.word	0x20016d40

080050a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050ae:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <xTaskResumeAll+0x118>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <xTaskResumeAll+0x2e>
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	b672      	cpsid	i
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	b662      	cpsie	i
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	e7fe      	b.n	80050cc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ce:	f001 f8a3 	bl	8006218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <xTaskResumeAll+0x118>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <xTaskResumeAll+0x118>)
 80050da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <xTaskResumeAll+0x118>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d161      	bne.n	80051a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050e4:	4b35      	ldr	r3, [pc, #212]	; (80051bc <xTaskResumeAll+0x11c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05d      	beq.n	80051a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ec:	e02e      	b.n	800514c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <xTaskResumeAll+0x120>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3318      	adds	r3, #24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe ffb5 	bl	800406a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe ffb0 	bl	800406a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	2201      	movs	r2, #1
 8005110:	409a      	lsls	r2, r3
 8005112:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <xTaskResumeAll+0x124>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4313      	orrs	r3, r2
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <xTaskResumeAll+0x124>)
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <xTaskResumeAll+0x128>)
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fe ff3c 	bl	8003fb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <xTaskResumeAll+0x12c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005146:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <xTaskResumeAll+0x130>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <xTaskResumeAll+0x120>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1cc      	bne.n	80050ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800515a:	f000 fbf3 	bl	8005944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800515e:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <xTaskResumeAll+0x134>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800516a:	f000 f847 	bl	80051fc <xTaskIncrementTick>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005174:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <xTaskResumeAll+0x130>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3b01      	subs	r3, #1
 800517e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f1      	bne.n	800516a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <xTaskResumeAll+0x134>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800518c:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <xTaskResumeAll+0x130>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <xTaskResumeAll+0x138>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051a8:	f001 f868 	bl	800627c <vPortExitCritical>

	return xAlreadyYielded;
 80051ac:	68bb      	ldr	r3, [r7, #8]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20016d40 	.word	0x20016d40
 80051bc:	20016d18 	.word	0x20016d18
 80051c0:	20016cd8 	.word	0x20016cd8
 80051c4:	20016d20 	.word	0x20016d20
 80051c8:	20016c1c 	.word	0x20016c1c
 80051cc:	20016c18 	.word	0x20016c18
 80051d0:	20016d2c 	.word	0x20016d2c
 80051d4:	20016d28 	.word	0x20016d28
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <xTaskGetTickCount+0x1c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051e8:	687b      	ldr	r3, [r7, #4]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20016d1c 	.word	0x20016d1c

080051fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005206:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <xTaskIncrementTick+0x148>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 8089 	bne.w	8005322 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005210:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <xTaskIncrementTick+0x14c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005218:	4a4b      	ldr	r2, [pc, #300]	; (8005348 <xTaskIncrementTick+0x14c>)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d121      	bne.n	8005268 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005224:	4b49      	ldr	r3, [pc, #292]	; (800534c <xTaskIncrementTick+0x150>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <xTaskIncrementTick+0x4a>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	b672      	cpsid	i
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	b662      	cpsie	i
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	e7fe      	b.n	8005244 <xTaskIncrementTick+0x48>
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <xTaskIncrementTick+0x150>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	4b40      	ldr	r3, [pc, #256]	; (8005350 <xTaskIncrementTick+0x154>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3e      	ldr	r2, [pc, #248]	; (800534c <xTaskIncrementTick+0x150>)
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <xTaskIncrementTick+0x154>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <xTaskIncrementTick+0x158>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <xTaskIncrementTick+0x158>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	f000 fb6e 	bl	8005944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005268:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <xTaskIncrementTick+0x15c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d348      	bcc.n	8005304 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005272:	4b36      	ldr	r3, [pc, #216]	; (800534c <xTaskIncrementTick+0x150>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <xTaskIncrementTick+0x15c>)
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	601a      	str	r2, [r3, #0]
					break;
 8005284:	e03e      	b.n	8005304 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005286:	4b31      	ldr	r3, [pc, #196]	; (800534c <xTaskIncrementTick+0x150>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d203      	bcs.n	80052a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800529e:	4a2e      	ldr	r2, [pc, #184]	; (8005358 <xTaskIncrementTick+0x15c>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052a4:	e02e      	b.n	8005304 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fedd 	bl	800406a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d004      	beq.n	80052c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3318      	adds	r3, #24
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fed4 	bl	800406a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	2201      	movs	r2, #1
 80052c8:	409a      	lsls	r2, r3
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <xTaskIncrementTick+0x160>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	4a22      	ldr	r2, [pc, #136]	; (800535c <xTaskIncrementTick+0x160>)
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <xTaskIncrementTick+0x164>)
 80052e2:	441a      	add	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f7fe fe60 	bl	8003fb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <xTaskIncrementTick+0x168>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d3b9      	bcc.n	8005272 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005302:	e7b6      	b.n	8005272 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005304:	4b17      	ldr	r3, [pc, #92]	; (8005364 <xTaskIncrementTick+0x168>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530a:	4915      	ldr	r1, [pc, #84]	; (8005360 <xTaskIncrementTick+0x164>)
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d907      	bls.n	800532c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e004      	b.n	800532c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <xTaskIncrementTick+0x16c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a0f      	ldr	r2, [pc, #60]	; (8005368 <xTaskIncrementTick+0x16c>)
 800532a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <xTaskIncrementTick+0x170>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005338:	697b      	ldr	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20016d40 	.word	0x20016d40
 8005348:	20016d1c 	.word	0x20016d1c
 800534c:	20016cd0 	.word	0x20016cd0
 8005350:	20016cd4 	.word	0x20016cd4
 8005354:	20016d30 	.word	0x20016d30
 8005358:	20016d38 	.word	0x20016d38
 800535c:	20016d20 	.word	0x20016d20
 8005360:	20016c1c 	.word	0x20016c1c
 8005364:	20016c18 	.word	0x20016c18
 8005368:	20016d28 	.word	0x20016d28
 800536c:	20016d2c 	.word	0x20016d2c

08005370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <vTaskSwitchContext+0xa4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <vTaskSwitchContext+0xa8>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005384:	e040      	b.n	8005408 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <vTaskSwitchContext+0xa8>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800538c:	4b23      	ldr	r3, [pc, #140]	; (800541c <vTaskSwitchContext+0xac>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	fab3 f383 	clz	r3, r3
 8005398:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	f1c3 031f 	rsb	r3, r3, #31
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	491f      	ldr	r1, [pc, #124]	; (8005420 <vTaskSwitchContext+0xb0>)
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	b672      	cpsid	i
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	b662      	cpsie	i
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e7fe      	b.n	80053cc <vTaskSwitchContext+0x5c>
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a11      	ldr	r2, [pc, #68]	; (8005420 <vTaskSwitchContext+0xb0>)
 80053da:	4413      	add	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	3308      	adds	r3, #8
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d104      	bne.n	80053fe <vTaskSwitchContext+0x8e>
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <vTaskSwitchContext+0xb4>)
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20016d40 	.word	0x20016d40
 8005418:	20016d2c 	.word	0x20016d2c
 800541c:	20016d20 	.word	0x20016d20
 8005420:	20016c1c 	.word	0x20016c1c
 8005424:	20016c18 	.word	0x20016c18

08005428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <vTaskPlaceOnEventList+0x28>
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e7fe      	b.n	800544e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <vTaskPlaceOnEventList+0x48>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3318      	adds	r3, #24
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fe fdcd 	bl	8003ff8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800545e:	2101      	movs	r1, #1
 8005460:	6838      	ldr	r0, [r7, #0]
 8005462:	f000 fd69 	bl	8005f38 <prvAddCurrentTaskToDelayedList>
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20016c18 	.word	0x20016c18

08005474 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <vTaskPlaceOnUnorderedEventList+0x2a>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	b672      	cpsid	i
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	b662      	cpsie	i
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e7fe      	b.n	800549c <vTaskPlaceOnUnorderedEventList+0x28>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <vTaskPlaceOnUnorderedEventList+0x4a>
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	e7fe      	b.n	80054bc <vTaskPlaceOnUnorderedEventList+0x48>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <vTaskPlaceOnUnorderedEventList+0x78>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <vTaskPlaceOnUnorderedEventList+0x78>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3318      	adds	r3, #24
 80054d0:	4619      	mov	r1, r3
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7fe fd6c 	bl	8003fb0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fd2c 	bl	8005f38 <prvAddCurrentTaskToDelayedList>
}
 80054e0:	bf00      	nop
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20016d40 	.word	0x20016d40
 80054ec:	20016c18 	.word	0x20016c18

080054f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xTaskRemoveFromEventList+0x2e>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e7fe      	b.n	800551c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3318      	adds	r3, #24
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fda1 	bl	800406a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <xTaskRemoveFromEventList+0xb0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11c      	bne.n	800556a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fd98 	bl	800406a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	2201      	movs	r2, #1
 8005540:	409a      	lsls	r2, r3
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <xTaskRemoveFromEventList+0xb4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <xTaskRemoveFromEventList+0xb4>)
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <xTaskRemoveFromEventList+0xb8>)
 800555a:	441a      	add	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f7fe fd24 	bl	8003fb0 <vListInsertEnd>
 8005568:	e005      	b.n	8005576 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	3318      	adds	r3, #24
 800556e:	4619      	mov	r1, r3
 8005570:	480e      	ldr	r0, [pc, #56]	; (80055ac <xTaskRemoveFromEventList+0xbc>)
 8005572:	f7fe fd1d 	bl	8003fb0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <xTaskRemoveFromEventList+0xc0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	429a      	cmp	r2, r3
 8005582:	d905      	bls.n	8005590 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <xTaskRemoveFromEventList+0xc4>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e001      	b.n	8005594 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005594:	697b      	ldr	r3, [r7, #20]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20016d40 	.word	0x20016d40
 80055a4:	20016d20 	.word	0x20016d20
 80055a8:	20016c1c 	.word	0x20016c1c
 80055ac:	20016cd8 	.word	0x20016cd8
 80055b0:	20016c18 	.word	0x20016c18
 80055b4:	20016d2c 	.word	0x20016d2c

080055b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <vTaskRemoveFromUnorderedEventList+0x2a>
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	b672      	cpsid	i
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	b662      	cpsie	i
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e7fe      	b.n	80055e0 <vTaskRemoveFromUnorderedEventList+0x28>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <vTaskRemoveFromUnorderedEventList+0x58>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	b672      	cpsid	i
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	b662      	cpsie	i
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e7fe      	b.n	800560e <vTaskRemoveFromUnorderedEventList+0x56>
	( void ) uxListRemove( pxEventListItem );
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fe fd2a 	bl	800406a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3304      	adds	r3, #4
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fd25 	bl	800406a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4313      	orrs	r3, r2
 800562e:	4a10      	ldr	r2, [pc, #64]	; (8005670 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005640:	441a      	add	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f7fe fcb1 	bl	8003fb0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d902      	bls.n	8005662 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]
	}
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20016d40 	.word	0x20016d40
 8005670:	20016d20 	.word	0x20016d20
 8005674:	20016c1c 	.word	0x20016c1c
 8005678:	20016c18 	.word	0x20016c18
 800567c:	20016d2c 	.word	0x20016d2c

08005680 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <vTaskSetTimeOutState+0x26>
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e7fe      	b.n	80056a4 <vTaskSetTimeOutState+0x24>
	taskENTER_CRITICAL();
 80056a6:	f000 fdb7 	bl	8006218 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <vTaskSetTimeOutState+0x48>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <vTaskSetTimeOutState+0x4c>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80056ba:	f000 fddf 	bl	800627c <vPortExitCritical>
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20016d30 	.word	0x20016d30
 80056cc:	20016d1c 	.word	0x20016d1c

080056d0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <vTaskInternalSetTimeOutState+0x24>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <vTaskInternalSetTimeOutState+0x28>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20016d30 	.word	0x20016d30
 80056f8:	20016d1c 	.word	0x20016d1c

080056fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <xTaskCheckForTimeOut+0x28>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	b672      	cpsid	i
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	b662      	cpsie	i
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e7fe      	b.n	8005722 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <xTaskCheckForTimeOut+0x46>
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	b672      	cpsid	i
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	b662      	cpsie	i
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e7fe      	b.n	8005740 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005742:	f000 fd69 	bl	8006218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <xTaskCheckForTimeOut+0xc0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d102      	bne.n	8005766 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	e023      	b.n	80057ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <xTaskCheckForTimeOut+0xc4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d007      	beq.n	8005782 <xTaskCheckForTimeOut+0x86>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	e015      	b.n	80057ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	429a      	cmp	r2, r3
 800578a:	d20b      	bcs.n	80057a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ff99 	bl	80056d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	e004      	b.n	80057ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ae:	f000 fd65 	bl	800627c <vPortExitCritical>

	return xReturn;
 80057b2:	69fb      	ldr	r3, [r7, #28]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20016d1c 	.word	0x20016d1c
 80057c0:	20016d30 	.word	0x20016d30

080057c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <vTaskMissedYield+0x14>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20016d2c 	.word	0x20016d2c

080057dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057e4:	f000 f852 	bl	800588c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <prvIdleTask+0x28>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d9f9      	bls.n	80057e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <prvIdleTask+0x2c>)
 80057f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005800:	e7f0      	b.n	80057e4 <prvIdleTask+0x8>
 8005802:	bf00      	nop
 8005804:	20016c1c 	.word	0x20016c1c
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	e00c      	b.n	8005832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a12      	ldr	r2, [pc, #72]	; (800586c <prvInitialiseTaskLists+0x60>)
 8005824:	4413      	add	r3, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fb95 	bl	8003f56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3301      	adds	r3, #1
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b06      	cmp	r3, #6
 8005836:	d9ef      	bls.n	8005818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005838:	480d      	ldr	r0, [pc, #52]	; (8005870 <prvInitialiseTaskLists+0x64>)
 800583a:	f7fe fb8c 	bl	8003f56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800583e:	480d      	ldr	r0, [pc, #52]	; (8005874 <prvInitialiseTaskLists+0x68>)
 8005840:	f7fe fb89 	bl	8003f56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005844:	480c      	ldr	r0, [pc, #48]	; (8005878 <prvInitialiseTaskLists+0x6c>)
 8005846:	f7fe fb86 	bl	8003f56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800584a:	480c      	ldr	r0, [pc, #48]	; (800587c <prvInitialiseTaskLists+0x70>)
 800584c:	f7fe fb83 	bl	8003f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005850:	480b      	ldr	r0, [pc, #44]	; (8005880 <prvInitialiseTaskLists+0x74>)
 8005852:	f7fe fb80 	bl	8003f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <prvInitialiseTaskLists+0x78>)
 8005858:	4a05      	ldr	r2, [pc, #20]	; (8005870 <prvInitialiseTaskLists+0x64>)
 800585a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <prvInitialiseTaskLists+0x7c>)
 800585e:	4a05      	ldr	r2, [pc, #20]	; (8005874 <prvInitialiseTaskLists+0x68>)
 8005860:	601a      	str	r2, [r3, #0]
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20016c1c 	.word	0x20016c1c
 8005870:	20016ca8 	.word	0x20016ca8
 8005874:	20016cbc 	.word	0x20016cbc
 8005878:	20016cd8 	.word	0x20016cd8
 800587c:	20016cec 	.word	0x20016cec
 8005880:	20016d04 	.word	0x20016d04
 8005884:	20016cd0 	.word	0x20016cd0
 8005888:	20016cd4 	.word	0x20016cd4

0800588c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005892:	e019      	b.n	80058c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005894:	f000 fcc0 	bl	8006218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <prvCheckTasksWaitingTermination+0x4c>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe fbe0 	bl	800406a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <prvCheckTasksWaitingTermination+0x50>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <prvCheckTasksWaitingTermination+0x50>)
 80058b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <prvCheckTasksWaitingTermination+0x54>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <prvCheckTasksWaitingTermination+0x54>)
 80058bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058be:	f000 fcdd 	bl	800627c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f80e 	bl	80058e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <prvCheckTasksWaitingTermination+0x54>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e1      	bne.n	8005894 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20016cec 	.word	0x20016cec
 80058dc:	20016d18 	.word	0x20016d18
 80058e0:	20016d00 	.word	0x20016d00

080058e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fe76 	bl	80065ec <vPortFree>
				vPortFree( pxTCB );
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fe73 	bl	80065ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005906:	e019      	b.n	800593c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590e:	2b01      	cmp	r3, #1
 8005910:	d103      	bne.n	800591a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fe6a 	bl	80065ec <vPortFree>
	}
 8005918:	e010      	b.n	800593c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005920:	2b02      	cmp	r3, #2
 8005922:	d00b      	beq.n	800593c <prvDeleteTCB+0x58>
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	b672      	cpsid	i
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	b662      	cpsie	i
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e7fe      	b.n	800593a <prvDeleteTCB+0x56>
	}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800595c:	e008      	b.n	8005970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 800596e:	6013      	str	r3, [r2, #0]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20016cd0 	.word	0x20016cd0
 8005980:	20016d38 	.word	0x20016d38

08005984 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005990:	687b      	ldr	r3, [r7, #4]
	}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20016c18 	.word	0x20016c18

080059a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xTaskGetSchedulerState+0x34>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059b2:	2301      	movs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e008      	b.n	80059ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <xTaskGetSchedulerState+0x38>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059c0:	2302      	movs	r3, #2
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e001      	b.n	80059ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ca:	687b      	ldr	r3, [r7, #4]
	}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20016d24 	.word	0x20016d24
 80059dc:	20016d40 	.word	0x20016d40

080059e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d069      	beq.n	8005aca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <xTaskPriorityInherit+0xf4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d259      	bcs.n	8005ab8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db06      	blt.n	8005a1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0c:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <xTaskPriorityInherit+0xf4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	f1c3 0207 	rsb	r2, r3, #7
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6959      	ldr	r1, [r3, #20]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <xTaskPriorityInherit+0xf8>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	d13a      	bne.n	8005aa8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fb17 	bl	800406a <uxListRemove>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d115      	bne.n	8005a6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	4924      	ldr	r1, [pc, #144]	; (8005ad8 <xTaskPriorityInherit+0xf8>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xTaskPriorityInherit+0x8e>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43da      	mvns	r2, r3
 8005a64:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <xTaskPriorityInherit+0xfc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <xTaskPriorityInherit+0xfc>)
 8005a6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <xTaskPriorityInherit+0xf4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <xTaskPriorityInherit+0xfc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <xTaskPriorityInherit+0xfc>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a10      	ldr	r2, [pc, #64]	; (8005ad8 <xTaskPriorityInherit+0xf8>)
 8005a98:	441a      	add	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe fa85 	bl	8003fb0 <vListInsertEnd>
 8005aa6:	e004      	b.n	8005ab2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <xTaskPriorityInherit+0xf4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e008      	b.n	8005aca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <xTaskPriorityInherit+0xf4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d201      	bcs.n	8005aca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aca:	68fb      	ldr	r3, [r7, #12]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20016c18 	.word	0x20016c18
 8005ad8:	20016c1c 	.word	0x20016c1c
 8005adc:	20016d20 	.word	0x20016d20

08005ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d070      	beq.n	8005bd8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <xTaskPriorityDisinherit+0x104>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d00b      	beq.n	8005b18 <xTaskPriorityDisinherit+0x38>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	b672      	cpsid	i
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	b662      	cpsie	i
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e7fe      	b.n	8005b16 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xTaskPriorityDisinherit+0x58>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	b672      	cpsid	i
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	b662      	cpsie	i
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	e7fe      	b.n	8005b36 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3c:	1e5a      	subs	r2, r3, #1
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d044      	beq.n	8005bd8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d140      	bne.n	8005bd8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fa85 	bl	800406a <uxListRemove>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d115      	bne.n	8005b92 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	491f      	ldr	r1, [pc, #124]	; (8005be8 <xTaskPriorityDisinherit+0x108>)
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTaskPriorityDisinherit+0xb2>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	2201      	movs	r2, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	4b18      	ldr	r3, [pc, #96]	; (8005bec <xTaskPriorityDisinherit+0x10c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	4a17      	ldr	r2, [pc, #92]	; (8005bec <xTaskPriorityDisinherit+0x10c>)
 8005b90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f1c3 0207 	rsb	r2, r3, #7
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	2201      	movs	r2, #1
 8005bac:	409a      	lsls	r2, r3
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <xTaskPriorityDisinherit+0x10c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <xTaskPriorityDisinherit+0x10c>)
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <xTaskPriorityDisinherit+0x108>)
 8005bc6:	441a      	add	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fe f9ee 	bl	8003fb0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bd8:	697b      	ldr	r3, [r7, #20]
	}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20016c18 	.word	0x20016c18
 8005be8:	20016c1c 	.word	0x20016c1c
 8005bec:	20016d20 	.word	0x20016d20

08005bf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8085 	beq.w	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e7fe      	b.n	8005c28 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d902      	bls.n	8005c3a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e002      	b.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d064      	beq.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d15f      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d10b      	bne.n	8005c76 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	b672      	cpsid	i
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	b662      	cpsie	i
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e7fe      	b.n	8005c74 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db04      	blt.n	8005c94 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f1c3 0207 	rsb	r2, r3, #7
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	d134      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe f9db 	bl	800406a <uxListRemove>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4918      	ldr	r1, [pc, #96]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005ce4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	2201      	movs	r2, #1
 8005cec:	409a      	lsls	r2, r3
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005d06:	441a      	add	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fe f94e 	bl	8003fb0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d14:	bf00      	nop
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20016c18 	.word	0x20016c18
 8005d20:	20016c1c 	.word	0x20016c1c
 8005d24:	20016d20 	.word	0x20016d20

08005d28 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <uxTaskResetEventItemValue+0x2c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <uxTaskResetEventItemValue+0x2c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <uxTaskResetEventItemValue+0x2c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f1c2 0207 	rsb	r2, r2, #7
 8005d44:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005d46:	687b      	ldr	r3, [r7, #4]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20016c18 	.word	0x20016c18

08005d58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d70:	681b      	ldr	r3, [r3, #0]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20016c18 	.word	0x20016c18

08005d80 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005d8a:	f000 fa45 	bl	8006218 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005da8:	2101      	movs	r1, #1
 8005daa:	6838      	ldr	r0, [r7, #0]
 8005dac:	f000 f8c4 	bl	8005f38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <ulTaskNotifyTake+0x8c>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005dc0:	f000 fa5c 	bl	800627c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005dc4:	f000 fa28 	bl	8006218 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	64da      	str	r2, [r3, #76]	; 0x4c
 8005de4:	e004      	b.n	8005df0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005de6:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	3a01      	subs	r2, #1
 8005dee:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <ulTaskNotifyTake+0x88>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005dfa:	f000 fa3f 	bl	800627c <vPortExitCritical>

		return ulReturn;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
	}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20016c18 	.word	0x20016c18
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	; 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <vTaskNotifyGiveFromISR+0x28>
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	b672      	cpsid	i
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	b662      	cpsie	i
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e7fe      	b.n	8005e36 <vTaskNotifyGiveFromISR+0x26>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e38:	f000 face 	bl	80063d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e40:	f3ef 8211 	mrs	r2, BASEPRI
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	617a      	str	r2, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e5c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e5e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e66:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d146      	bne.n	8005f0e <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	b672      	cpsid	i
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	b662      	cpsie	i
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e7fe      	b.n	8005e9e <vTaskNotifyGiveFromISR+0x8e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <vTaskNotifyGiveFromISR+0x110>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11c      	bne.n	8005ee2 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f8dc 	bl	800406a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <vTaskNotifyGiveFromISR+0x114>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <vTaskNotifyGiveFromISR+0x114>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <vTaskNotifyGiveFromISR+0x118>)
 8005ed2:	441a      	add	r2, r3
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe f868 	bl	8003fb0 <vListInsertEnd>
 8005ee0:	e005      	b.n	8005eee <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	3318      	adds	r3, #24
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4810      	ldr	r0, [pc, #64]	; (8005f2c <vTaskNotifyGiveFromISR+0x11c>)
 8005eea:	f7fe f861 	bl	8003fb0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <vTaskNotifyGiveFromISR+0x120>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d908      	bls.n	8005f0e <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <vTaskNotifyGiveFromISR+0x124>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8005f18:	bf00      	nop
 8005f1a:	3728      	adds	r7, #40	; 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20016d40 	.word	0x20016d40
 8005f24:	20016d20 	.word	0x20016d20
 8005f28:	20016c1c 	.word	0x20016c1c
 8005f2c:	20016cd8 	.word	0x20016cd8
 8005f30:	20016c18 	.word	0x20016c18
 8005f34:	20016d2c 	.word	0x20016d2c

08005f38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f42:	4b29      	ldr	r3, [pc, #164]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f48:	4b28      	ldr	r3, [pc, #160]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe f88b 	bl	800406a <uxListRemove>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	2201      	movs	r2, #1
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43da      	mvns	r2, r3
 8005f68:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d10a      	bne.n	8005f90 <prvAddCurrentTaskToDelayedList+0x58>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	481a      	ldr	r0, [pc, #104]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f8a:	f7fe f811 	bl	8003fb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f8e:	e026      	b.n	8005fde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4413      	add	r3, r2
 8005f96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f98:	4b14      	ldr	r3, [pc, #80]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d209      	bcs.n	8005fbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fe f81f 	bl	8003ff8 <vListInsert>
}
 8005fba:	e010      	b.n	8005fde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fe f815 	bl	8003ff8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d202      	bcs.n	8005fde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6013      	str	r3, [r2, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20016d1c 	.word	0x20016d1c
 8005fec:	20016c18 	.word	0x20016c18
 8005ff0:	20016d20 	.word	0x20016d20
 8005ff4:	20016d04 	.word	0x20016d04
 8005ff8:	20016cd4 	.word	0x20016cd4
 8005ffc:	20016cd0 	.word	0x20016cd0
 8006000:	20016d38 	.word	0x20016d38

08006004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3b04      	subs	r3, #4
 8006014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800601c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3b04      	subs	r3, #4
 8006022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3b04      	subs	r3, #4
 8006032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006034:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <pxPortInitialiseStack+0x64>)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3b14      	subs	r3, #20
 800603e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b04      	subs	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f06f 0202 	mvn.w	r2, #2
 8006052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3b20      	subs	r3, #32
 8006058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800605a:	68fb      	ldr	r3, [r7, #12]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	0800606d 	.word	0x0800606d

0800606c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <prvTaskExitError+0x58>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d00b      	beq.n	8006098 <prvTaskExitError+0x2c>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	b672      	cpsid	i
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	b662      	cpsie	i
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e7fe      	b.n	8006096 <prvTaskExitError+0x2a>
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	b672      	cpsid	i
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	b662      	cpsie	i
 80060ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060ae:	bf00      	nop
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0fc      	beq.n	80060b0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c
	...

080060d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <pxCurrentTCBConst2>)
 80060d2:	6819      	ldr	r1, [r3, #0]
 80060d4:	6808      	ldr	r0, [r1, #0]
 80060d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060da:	f380 8809 	msr	PSP, r0
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f04f 0000 	mov.w	r0, #0
 80060e6:	f380 8811 	msr	BASEPRI, r0
 80060ea:	4770      	bx	lr
 80060ec:	f3af 8000 	nop.w

080060f0 <pxCurrentTCBConst2>:
 80060f0:	20016c18 	.word	0x20016c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop

080060f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060f8:	4808      	ldr	r0, [pc, #32]	; (800611c <prvPortStartFirstTask+0x24>)
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	6800      	ldr	r0, [r0, #0]
 80060fe:	f380 8808 	msr	MSP, r0
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f380 8814 	msr	CONTROL, r0
 800610a:	b662      	cpsie	i
 800610c:	b661      	cpsie	f
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	df00      	svc	0
 8006118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800611a:	bf00      	nop
 800611c:	e000ed08 	.word	0xe000ed08

08006120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006126:	4b36      	ldr	r3, [pc, #216]	; (8006200 <xPortStartScheduler+0xe0>)
 8006128:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <xPortStartScheduler+0xe4>)
 800614c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614e:	4b2e      	ldr	r3, [pc, #184]	; (8006208 <xPortStartScheduler+0xe8>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	e009      	b.n	800616a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006156:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <xPortStartScheduler+0xe8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <xPortStartScheduler+0xe8>)
 800615e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d0ef      	beq.n	8006156 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <xPortStartScheduler+0xe8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00b      	beq.n	800619a <xPortStartScheduler+0x7a>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	b672      	cpsid	i
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	b662      	cpsie	i
 8006196:	60bb      	str	r3, [r7, #8]
 8006198:	e7fe      	b.n	8006198 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <xPortStartScheduler+0xe8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <xPortStartScheduler+0xe8>)
 80061a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <xPortStartScheduler+0xe8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061ac:	4a16      	ldr	r2, [pc, #88]	; (8006208 <xPortStartScheduler+0xe8>)
 80061ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <xPortStartScheduler+0xec>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	; (800620c <xPortStartScheduler+0xec>)
 80061be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <xPortStartScheduler+0xec>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a10      	ldr	r2, [pc, #64]	; (800620c <xPortStartScheduler+0xec>)
 80061ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061d0:	f000 f8d4 	bl	800637c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <xPortStartScheduler+0xf0>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061da:	f000 f8f3 	bl	80063c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <xPortStartScheduler+0xf4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <xPortStartScheduler+0xf4>)
 80061e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061ea:	f7ff ff85 	bl	80060f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ee:	f7ff f8bf 	bl	8005370 <vTaskSwitchContext>
	prvTaskExitError();
 80061f2:	f7ff ff3b 	bl	800606c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	e000e400 	.word	0xe000e400
 8006204:	20016d44 	.word	0x20016d44
 8006208:	20016d48 	.word	0x20016d48
 800620c:	e000ed20 	.word	0xe000ed20
 8006210:	2000000c 	.word	0x2000000c
 8006214:	e000ef34 	.word	0xe000ef34

08006218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	b672      	cpsid	i
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	b662      	cpsie	i
 8006232:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <vPortEnterCritical+0x5c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <vPortEnterCritical+0x5c>)
 800623c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <vPortEnterCritical+0x5c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d110      	bne.n	8006268 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <vPortEnterCritical+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <vPortEnterCritical+0x50>
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	b672      	cpsid	i
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	b662      	cpsie	i
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	e7fe      	b.n	8006266 <vPortEnterCritical+0x4e>
	}
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	2000000c 	.word	0x2000000c
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <vPortExitCritical+0x26>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	b672      	cpsid	i
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	b662      	cpsie	i
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	e7fe      	b.n	80062a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <vPortExitCritical+0x50>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <vPortExitCritical+0x50>)
 80062aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <vPortExitCritical+0x50>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <vPortExitCritical+0x42>
 80062b4:	2300      	movs	r3, #0
 80062b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	2000000c 	.word	0x2000000c

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f01e 0f10 	tst.w	lr, #16
 80062e0:	bf08      	it	eq
 80062e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062f4:	b672      	cpsid	i
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	b662      	cpsie	i
 8006304:	f7ff f834 	bl	8005370 <vTaskSwitchContext>
 8006308:	f04f 0000 	mov.w	r0, #0
 800630c:	f380 8811 	msr	BASEPRI, r0
 8006310:	bc09      	pop	{r0, r3}
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	6808      	ldr	r0, [r1, #0]
 8006316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	f01e 0f10 	tst.w	lr, #16
 800631e:	bf08      	it	eq
 8006320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006324:	f380 8809 	msr	PSP, r0
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop

08006330 <pxCurrentTCBConst>:
 8006330:	20016c18 	.word	0x20016c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	b672      	cpsid	i
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	b662      	cpsie	i
 8006352:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006354:	f7fe ff52 	bl	80051fc <xTaskIncrementTick>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <xPortSysTickHandler+0x40>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	603b      	str	r3, [r7, #0]
	__asm volatile
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortSetupTimerInterrupt+0x34>)
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <vPortSetupTimerInterrupt+0x38>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <vPortSetupTimerInterrupt+0x3c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <vPortSetupTimerInterrupt+0x40>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <vPortSetupTimerInterrupt+0x44>)
 800639a:	3b01      	subs	r3, #1
 800639c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <vPortSetupTimerInterrupt+0x34>)
 80063a0:	2207      	movs	r2, #7
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e010 	.word	0xe000e010
 80063b4:	e000e018 	.word	0xe000e018
 80063b8:	20000000 	.word	0x20000000
 80063bc:	10624dd3 	.word	0x10624dd3
 80063c0:	e000e014 	.word	0xe000e014

080063c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063d4 <vPortEnableVFP+0x10>
 80063c8:	6801      	ldr	r1, [r0, #0]
 80063ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ce:	6001      	str	r1, [r0, #0]
 80063d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063d2:	bf00      	nop
 80063d4:	e000ed88 	.word	0xe000ed88

080063d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063de:	f3ef 8305 	mrs	r3, IPSR
 80063e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	d915      	bls.n	8006416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <vPortValidateInterruptPriority+0x74>)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <vPortValidateInterruptPriority+0x78>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	7afa      	ldrb	r2, [r7, #11]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20b      	bcs.n	8006416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	b672      	cpsid	i
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	b662      	cpsie	i
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e7fe      	b.n	8006414 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <vPortValidateInterruptPriority+0x7c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <vPortValidateInterruptPriority+0x80>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d90b      	bls.n	800643e <vPortValidateInterruptPriority+0x66>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	e7fe      	b.n	800643c <vPortValidateInterruptPriority+0x64>
	}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	e000e3f0 	.word	0xe000e3f0
 8006450:	20016d44 	.word	0x20016d44
 8006454:	e000ed0c 	.word	0xe000ed0c
 8006458:	20016d48 	.word	0x20016d48

0800645c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006468:	f7fe fe0c 	bl	8005084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800646c:	4b5a      	ldr	r3, [pc, #360]	; (80065d8 <pvPortMalloc+0x17c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006474:	f000 f916 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006478:	4b58      	ldr	r3, [pc, #352]	; (80065dc <pvPortMalloc+0x180>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4013      	ands	r3, r2
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8090 	bne.w	80065a6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01e      	beq.n	80064ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800648c:	2208      	movs	r2, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4413      	add	r3, r2
 8006492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d015      	beq.n	80064ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f023 0307 	bic.w	r3, r3, #7
 80064a4:	3308      	adds	r3, #8
 80064a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <pvPortMalloc+0x6e>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e7fe      	b.n	80064c8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d06a      	beq.n	80065a6 <pvPortMalloc+0x14a>
 80064d0:	4b43      	ldr	r3, [pc, #268]	; (80065e0 <pvPortMalloc+0x184>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d865      	bhi.n	80065a6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <pvPortMalloc+0x188>)
 80064dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064de:	4b41      	ldr	r3, [pc, #260]	; (80065e4 <pvPortMalloc+0x188>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064e4:	e004      	b.n	80064f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d903      	bls.n	8006502 <pvPortMalloc+0xa6>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f1      	bne.n	80064e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006502:	4b35      	ldr	r3, [pc, #212]	; (80065d8 <pvPortMalloc+0x17c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	429a      	cmp	r2, r3
 800650a:	d04c      	beq.n	80065a6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	4413      	add	r3, r2
 8006514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1ad2      	subs	r2, r2, r3
 8006526:	2308      	movs	r3, #8
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	429a      	cmp	r2, r3
 800652c:	d920      	bls.n	8006570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <pvPortMalloc+0xfc>
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	b672      	cpsid	i
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	b662      	cpsie	i
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e7fe      	b.n	8006556 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800656a:	69b8      	ldr	r0, [r7, #24]
 800656c:	f000 f8fc 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <pvPortMalloc+0x184>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <pvPortMalloc+0x184>)
 800657c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800657e:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <pvPortMalloc+0x184>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <pvPortMalloc+0x18c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d203      	bcs.n	8006592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800658a:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <pvPortMalloc+0x184>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <pvPortMalloc+0x18c>)
 8006590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <pvPortMalloc+0x180>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	431a      	orrs	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065a6:	f7fe fd7b 	bl	80050a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <pvPortMalloc+0x170>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e7fe      	b.n	80065ca <pvPortMalloc+0x16e>
	return pvReturn;
 80065cc:	69fb      	ldr	r3, [r7, #28]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3728      	adds	r7, #40	; 0x28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	2001a954 	.word	0x2001a954
 80065dc:	2001a960 	.word	0x2001a960
 80065e0:	2001a958 	.word	0x2001a958
 80065e4:	2001a94c 	.word	0x2001a94c
 80065e8:	2001a95c 	.word	0x2001a95c

080065ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04a      	beq.n	8006694 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065fe:	2308      	movs	r3, #8
 8006600:	425b      	negs	r3, r3
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	4b22      	ldr	r3, [pc, #136]	; (800669c <vPortFree+0xb0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4013      	ands	r3, r2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <vPortFree+0x46>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	b672      	cpsid	i
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	b662      	cpsie	i
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <vPortFree+0x66>
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	b672      	cpsid	i
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	b662      	cpsie	i
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	e7fe      	b.n	8006650 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <vPortFree+0xb0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d115      	bne.n	8006694 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <vPortFree+0xb0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006678:	f7fe fd04 	bl	8005084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xb4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xb4>)
 8006688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f000 f86c 	bl	8006768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006690:	f7fe fd06 	bl	80050a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	2001a960 	.word	0x2001a960
 80066a0:	2001a958 	.word	0x2001a958

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20016d4c 	.word	0x20016d4c
 8006754:	2001a94c 	.word	0x2001a94c
 8006758:	2001a954 	.word	0x2001a954
 800675c:	2001a95c 	.word	0x2001a95c
 8006760:	2001a958 	.word	0x2001a958
 8006764:	2001a960 	.word	0x2001a960

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2001a94c 	.word	0x2001a94c
 8006818:	2001a954 	.word	0x2001a954

0800681c <vCastPointerTo_ARPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8006824:	687b      	ldr	r3, [r7, #4]
    }
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800683c:	2300      	movs	r3, #0
 800683e:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	330e      	adds	r3, #14
 8006844:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	330e      	adds	r3, #14
 800684a:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 800684c:	f107 0308 	add.w	r3, r7, #8
 8006850:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <eARPProcessPacket+0x118>)
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d068      	beq.n	800693c <eARPProcessPacket+0x108>
    {
        switch( pxARPHeader->usOperation )
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006874:	d003      	beq.n	800687e <eARPProcessPacket+0x4a>
 8006876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687a:	d057      	beq.n	800692c <eARPProcessPacket+0xf8>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 800687c:	e061      	b.n	8006942 <eARPProcessPacket+0x10e>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800687e:	4b33      	ldr	r3, [pc, #204]	; (800694c <eARPProcessPacket+0x118>)
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	429a      	cmp	r2, r3
 8006886:	d15b      	bne.n	8006940 <eARPProcessPacket+0x10c>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	3308      	adds	r3, #8
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f000 f861 	bl	8006958 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2200      	movs	r2, #0
 800689a:	719a      	strb	r2, [r3, #6]
 800689c:	2200      	movs	r2, #0
 800689e:	f042 0202 	orr.w	r2, r2, #2
 80068a2:	71da      	strb	r2, [r3, #7]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d11a      	bne.n	80068e2 <eARPProcessPacket+0xae>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <eARPProcessPacket+0x11c>)
 80068ae:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3306      	adds	r3, #6
 80068b4:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 80068b6:	2206      	movs	r2, #6
 80068b8:	6979      	ldr	r1, [r7, #20]
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f009 fd89 	bl	80103d2 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	3312      	adds	r3, #18
 80068c4:	2206      	movs	r2, #6
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f009 fda6 	bl	801041a <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2200      	movs	r2, #0
 80068d2:	761a      	strb	r2, [r3, #24]
 80068d4:	2200      	movs	r2, #0
 80068d6:	765a      	strb	r2, [r3, #25]
 80068d8:	2200      	movs	r2, #0
 80068da:	769a      	strb	r2, [r3, #26]
 80068dc:	2200      	movs	r2, #0
 80068de:	76da      	strb	r2, [r3, #27]
 80068e0:	e00d      	b.n	80068fe <eARPProcessPacket+0xca>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3308      	adds	r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	3312      	adds	r3, #18
 80068ec:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80068ee:	2206      	movs	r2, #6
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	6938      	ldr	r0, [r7, #16]
 80068f4:	f009 fd6d 	bl	80103d2 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <eARPProcessPacket+0x118>)
 8006900:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	3308      	adds	r3, #8
 8006906:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8006908:	2206      	movs	r2, #6
 800690a:	6979      	ldr	r1, [r7, #20]
 800690c:	6938      	ldr	r0, [r7, #16]
 800690e:	f009 fd60 	bl	80103d2 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <eARPProcessPacket+0x120>)
 8006914:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	330e      	adds	r3, #14
 800691a:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 8006926:	2302      	movs	r3, #2
 8006928:	77fb      	strb	r3, [r7, #31]
                break;
 800692a:	e009      	b.n	8006940 <eARPProcessPacket+0x10c>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	3308      	adds	r3, #8
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f80f 	bl	8006958 <vARPRefreshCacheEntry>
                break;
 800693a:	e002      	b.n	8006942 <eARPProcessPacket+0x10e>
        }
    }
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <eARPProcessPacket+0x10e>
                break;
 8006940:	bf00      	nop

    return eReturn;
 8006942:	7ffb      	ldrb	r3, [r7, #31]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000010 	.word	0x20000010
 8006950:	08010e18 	.word	0x08010e18
 8006954:	20000024 	.word	0x20000024

08006958 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 8006966:	f04f 33ff 	mov.w	r3, #4294967295
 800696a:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800697a:	4b70      	ldr	r3, [pc, #448]	; (8006b3c <vARPRefreshCacheEntry+0x1e4>)
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	405a      	eors	r2, r3
 8006982:	4b6f      	ldr	r3, [pc, #444]	; (8006b40 <vARPRefreshCacheEntry+0x1e8>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800698c:	4b6b      	ldr	r3, [pc, #428]	; (8006b3c <vARPRefreshCacheEntry+0x1e4>)
 800698e:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 80d0 	bne.w	8006b36 <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	3b01      	subs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e067      	b.n	8006a72 <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	4613      	mov	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4a64      	ldr	r2, [pc, #400]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 80069b4:	4413      	add	r3, r2
 80069b6:	3304      	adds	r3, #4
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	2206      	movs	r2, #6
 80069bc:	4618      	mov	r0, r3
 80069be:	f009 fcf9 	bl	80103b4 <memcmp>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 80069c8:	2301      	movs	r3, #1
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	e004      	b.n	80069d8 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	e001      	b.n	80069d8 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80069d8:	495a      	ldr	r1, [pc, #360]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	4613      	mov	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d120      	bne.n	8006a30 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	61bb      	str	r3, [r7, #24]
                    break;
 80069f8:	e03e      	b.n	8006a78 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d014      	beq.n	8006a2a <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006a00:	4950      	ldr	r1, [pc, #320]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	330a      	adds	r3, #10
 8006a10:	2296      	movs	r2, #150	; 0x96
 8006a12:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8006a14:	494b      	ldr	r1, [pc, #300]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	330b      	adds	r3, #11
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
                    return;
 8006a28:	e085      	b.n	8006b36 <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e01d      	b.n	8006a6c <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e017      	b.n	8006a6c <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8006a3c:	4941      	ldr	r1, [pc, #260]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	4613      	mov	r3, r2
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	330a      	adds	r3, #10
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	7bfa      	ldrb	r2, [r7, #15]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d90b      	bls.n	8006a6c <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8006a54:	493b      	ldr	r1, [pc, #236]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	330a      	adds	r3, #10
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	dd94      	ble.n	80069a2 <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db11      	blt.n	8006aa2 <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	db11      	blt.n	8006aac <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a2c      	ldr	r2, [pc, #176]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006a94:	4413      	add	r3, r2
 8006a96:	220c      	movs	r2, #12
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f009 fcbd 	bl	801041a <memset>
 8006aa0:	e004      	b.n	8006aac <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db01      	blt.n	8006aac <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8006aac:	4925      	ldr	r1, [pc, #148]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	2206      	movs	r2, #6
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f009 fc7a 	bl	80103d2 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006ade:	4919      	ldr	r1, [pc, #100]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	330a      	adds	r3, #10
 8006aee:	2296      	movs	r2, #150	; 0x96
 8006af0:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006af2:	4914      	ldr	r1, [pc, #80]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4613      	mov	r3, r2
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	330b      	adds	r3, #11
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e016      	b.n	8006b36 <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	da13      	bge.n	8006b36 <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006b0e:	490d      	ldr	r1, [pc, #52]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	330a      	adds	r3, #10
 8006b1e:	2205      	movs	r2, #5
 8006b20:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006b22:	4908      	ldr	r1, [pc, #32]	; (8006b44 <vARPRefreshCacheEntry+0x1ec>)
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	330b      	adds	r3, #11
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000010 	.word	0x20000010
 8006b40:	2001a970 	.word	0x2001a970
 8006b44:	2001b844 	.word	0x2001b844

08006b48 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60bb      	str	r3, [r7, #8]
            eReturn = eARPCacheHit;
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8006b58:	68b8      	ldr	r0, [r7, #8]
 8006b5a:	f001 fb49 	bl	80081f0 <xIsIPv4Multicast>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <eARPGetCacheEntry+0x2a>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	68b8      	ldr	r0, [r7, #8]
 8006b68:	f001 fb6a 	bl	8008240 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e047      	b.n	8006c02 <eARPGetCacheEntry+0xba>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d005      	beq.n	8006b88 <eARPGetCacheEntry+0x40>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <eARPGetCacheEntry+0xc4>)
 8006b82:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <eARPGetCacheEntry+0x52>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <eARPGetCacheEntry+0xc8>)
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	6019      	str	r1, [r3, #0]
 8006b90:	8892      	ldrh	r2, [r2, #4]
 8006b92:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e033      	b.n	8006c02 <eARPGetCacheEntry+0xba>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <eARPGetCacheEntry+0xcc>)
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <eARPGetCacheEntry+0x60>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e02c      	b.n	8006c02 <eARPGetCacheEntry+0xba>
    }
    else
    {
        eReturn = eARPCacheMiss;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <eARPGetCacheEntry+0xcc>)
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	405a      	eors	r2, r3
 8006bb6:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <eARPGetCacheEntry+0xc4>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <eARPGetCacheEntry+0x90>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8006bc0:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <eARPGetCacheEntry+0xc4>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <eARPGetCacheEntry+0x88>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <eARPGetCacheEntry+0xc4>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	e006      	b.n	8006bde <eARPGetCacheEntry+0x96>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	e002      	b.n	8006bde <eARPGetCacheEntry+0x96>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <eARPGetCacheEntry+0xa2>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006be4:	2302      	movs	r3, #2
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	e00b      	b.n	8006c02 <eARPGetCacheEntry+0xba>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	68b8      	ldr	r0, [r7, #8]
 8006bee:	f000 f813 	bl	8006c18 <prvCacheLookup>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <eARPGetCacheEntry+0xba>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2001a970 	.word	0x2001a970
 8006c10:	08010e18 	.word	0x08010e18
 8006c14:	20000010 	.word	0x20000010

08006c18 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 8006c22:	2300      	movs	r3, #0
 8006c24:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e02b      	b.n	8006c84 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006c2c:	4919      	ldr	r1, [pc, #100]	; (8006c94 <prvCacheLookup+0x7c>)
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d11d      	bne.n	8006c7e <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006c42:	4914      	ldr	r1, [pc, #80]	; (8006c94 <prvCacheLookup+0x7c>)
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	330b      	adds	r3, #11
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8006c5c:	e015      	b.n	8006c8a <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006c5e:	6838      	ldr	r0, [r7, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <prvCacheLookup+0x7c>)
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	2206      	movs	r2, #6
 8006c72:	4619      	mov	r1, r3
 8006c74:	f009 fbad 	bl	80103d2 <memcpy>
                eReturn = eARPCacheHit;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	72fb      	strb	r3, [r7, #11]
            break;
 8006c7c:	e005      	b.n	8006c8a <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	ddd0      	ble.n	8006c2c <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2001b844 	.word	0x2001b844

08006c98 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	e063      	b.n	8006d6c <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8006ca4:	4940      	ldr	r1, [pc, #256]	; (8006da8 <vARPAgeCache+0x110>)
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	330a      	adds	r3, #10
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d055      	beq.n	8006d66 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8006cba:	493b      	ldr	r1, [pc, #236]	; (8006da8 <vARPAgeCache+0x110>)
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	330a      	adds	r3, #10
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b2d8      	uxtb	r0, r3
 8006cd0:	4935      	ldr	r1, [pc, #212]	; (8006da8 <vARPAgeCache+0x110>)
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	330a      	adds	r3, #10
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006ce4:	4930      	ldr	r1, [pc, #192]	; (8006da8 <vARPAgeCache+0x110>)
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	330b      	adds	r3, #11
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006cfa:	492b      	ldr	r1, [pc, #172]	; (8006da8 <vARPAgeCache+0x110>)
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f85e 	bl	8006dcc <FreeRTOS_OutputARPRequest>
 8006d10:	e015      	b.n	8006d3e <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006d12:	4925      	ldr	r1, [pc, #148]	; (8006da8 <vARPAgeCache+0x110>)
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	330a      	adds	r3, #10
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d80a      	bhi.n	8006d3e <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006d28:	491f      	ldr	r1, [pc, #124]	; (8006da8 <vARPAgeCache+0x110>)
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f847 	bl	8006dcc <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 8006d3e:	491a      	ldr	r1, [pc, #104]	; (8006da8 <vARPAgeCache+0x110>)
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	330a      	adds	r3, #10
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8006d54:	4914      	ldr	r1, [pc, #80]	; (8006da8 <vARPAgeCache+0x110>)
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	dd98      	ble.n	8006ca4 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 8006d72:	f7fe fa33 	bl	80051dc <xTaskGetTickCount>
 8006d76:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <vARPAgeCache+0x114>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <vARPAgeCache+0xf8>
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <vARPAgeCache+0x114>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d907      	bls.n	8006da0 <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <vARPAgeCache+0x118>)
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f819 	bl	8006dcc <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <vARPAgeCache+0x114>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6013      	str	r3, [r2, #0]
    }
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2001b844 	.word	0x2001b844
 8006dac:	2001a964 	.word	0x2001a964
 8006db0:	20000010 	.word	0x20000010

08006db4 <vARPSendGratuitous>:
/**
 * @brief Send a Gratuitous ARP packet to allow this node to announce the IP-MAC
 *        mapping to the entire network.
 */
void vARPSendGratuitous( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
    /* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
     * time vARPAgeCache() is called. */
    xLastGratuitousARPTime = ( TickType_t ) 0;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <vARPSendGratuitous+0x14>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]

    /* Let the IP-task call vARPAgeCache(). */
    ( void ) xSendEventToIPTask( eARPTimerEvent );
 8006dbe:	2003      	movs	r0, #3
 8006dc0:	f001 f90c 	bl	8007fdc <xSendEventToIPTask>
}
 8006dc4:	bf00      	nop
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	2001a964 	.word	0x2001a964

08006dcc <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	202a      	movs	r0, #42	; 0x2a
 8006dd8:	f007 fb2e 	bl	800e438 <pxGetNetworkBufferWithDescriptor>
 8006ddc:	6178      	str	r0, [r7, #20]

    if( pxNetworkBuffer != NULL )
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <FreeRTOS_OutputARPRequest+0x5a>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 8006dea:	6978      	ldr	r0, [r7, #20]
 8006dec:	f000 f820 	bl	8006e30 <vARPGenerateRequestPacket>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 8006df0:	f000 fe8e 	bl	8007b10 <xIsCallingFromIPTask>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <FreeRTOS_OutputARPRequest+0x38>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	f007 fdb5 	bl	800e96c <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 8006e02:	e010      	b.n	8006e26 <FreeRTOS_OutputARPRequest+0x5a>
            xSendEvent.eEventType = eNetworkTxEvent;
 8006e04:	2302      	movs	r3, #2
 8006e06:	733b      	strb	r3, [r7, #12]
            xSendEvent.pvData = pxNetworkBuffer;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	613b      	str	r3, [r7, #16]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	f04f 31ff 	mov.w	r1, #4294967295
 8006e14:	4618      	mov	r0, r3
 8006e16:	f001 f8f7 	bl	8008008 <xSendEventStructToIPTask>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <FreeRTOS_OutputARPRequest+0x5a>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006e20:	6978      	ldr	r0, [r7, #20]
 8006e22:	f007 fb87 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <vARPGenerateRequestPacket+0x26>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	b672      	cpsid	i
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	b662      	cpsie	i
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	e7fe      	b.n	8006e54 <vARPGenerateRequestPacket+0x24>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b29      	cmp	r3, #41	; 0x29
 8006e5c:	d80b      	bhi.n	8006e76 <vARPGenerateRequestPacket+0x46>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e7fe      	b.n	8006e74 <vARPGenerateRequestPacket+0x44>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fcce 	bl	800681c <vCastPointerTo_ARPPacket_t>
 8006e80:	61f8      	str	r0, [r7, #28]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8006e82:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <vARPGenerateRequestPacket+0xb8>)
 8006e84:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8006e8a:	2226      	movs	r2, #38	; 0x26
 8006e8c:	69b9      	ldr	r1, [r7, #24]
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f009 fa9f 	bl	80103d2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vARPGenerateRequestPacket+0xbc>)
 8006e96:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3306      	adds	r3, #6
 8006e9c:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006e9e:	2206      	movs	r2, #6
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	6978      	ldr	r0, [r7, #20]
 8006ea4:	f009 fa95 	bl	80103d2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <vARPGenerateRequestPacket+0xbc>)
 8006eaa:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3316      	adds	r3, #22
 8006eb0:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006eb2:	2206      	movs	r2, #6
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f009 fa8b 	bl	80103d2 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <vARPGenerateRequestPacket+0xc0>)
 8006ebe:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	331c      	adds	r3, #28
 8006ec4:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	222a      	movs	r2, #42	; 0x2a
 8006ede:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08010dc0 	.word	0x08010dc0
 8006eec:	20000010 	.word	0x20000010
 8006ef0:	20000024 	.word	0x20000024

08006ef4 <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8006ef8:	2248      	movs	r2, #72	; 0x48
 8006efa:	2100      	movs	r1, #0
 8006efc:	4802      	ldr	r0, [pc, #8]	; (8006f08 <FreeRTOS_ClearARP+0x14>)
 8006efe:	f009 fa8c 	bl	801041a <memset>
}
 8006f02:	bf00      	nop
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2001b844 	.word	0x2001b844

08006f0c <vCastPointerTo_DHCPMessage_IPv4_t>:

/**
 * @brief Function to cast pointers to DHCPMessage_IPv4_t.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
    {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
        return ( DHCPMessage_IPv4_t * ) pvArgument;
 8006f14:	687b      	ldr	r3, [r7, #4]
    }
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <vCastConstPointerTo_DHCPMessage_IPv4_t>:

/**
 * @brief Function to cast const pointers to DHCPMessage_IPv4_t.
 */
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
    {
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
        return ( const DHCPMessage_IPv4_t * ) pvArgument;
 8006f2a:	687b      	ldr	r3, [r7, #4]
    }
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <xIsDHCPSocket>:
 *
 * @return If the socket given as parameter is the DHCP socket - return
 *         pdTRUE, else pdFALSE.
 */
    BaseType_t xIsDHCPSocket( Socket_t xSocket )
    {
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;

        if( xDHCPSocket == xSocket )
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <xIsDHCPSocket+0x2c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d102      	bne.n	8006f50 <xIsDHCPSocket+0x18>
        {
            xReturn = pdTRUE;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e001      	b.n	8006f54 <xIsDHCPSocket+0x1c>
        }
        else
        {
            xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8006f54:	68fb      	ldr	r3, [r7, #12]
    }
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2001b8ac 	.word	0x2001b8ac

08006f68 <vDHCPProcess>:
 * @brief Process the DHCP state machine based on current state.
 *
 * @param[in] xReset: Is the DHCP state machine starting over? pdTRUE/pdFALSE.
 */
    void vDHCPProcess( BaseType_t xReset )
    {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
        BaseType_t xGivingUp = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigUSE_DHCP_HOOK != 0 )
            eDHCPCallbackAnswer_t eAnswer;
        #endif /* ipconfigUSE_DHCP_HOOK */

        /* Is DHCP starting over? */
        if( xReset != pdFALSE )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <vDHCPProcess+0x18>
        {
            EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8006f7a:	4b87      	ldr	r3, [pc, #540]	; (8007198 <vDHCPProcess+0x230>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	771a      	strb	r2, [r3, #28]
        }

        switch( EP_DHCPData.eDHCPState )
 8006f80:	4b85      	ldr	r3, [pc, #532]	; (8007198 <vDHCPProcess+0x230>)
 8006f82:	7f1b      	ldrb	r3, [r3, #28]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	f200 80e6 	bhi.w	8007156 <vDHCPProcess+0x1ee>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <vDHCPProcess+0x28>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fa5 	.word	0x08006fa5
 8006f94:	08006fd3 	.word	0x08006fd3
 8006f98:	08007065 	.word	0x08007065
 8006f9c:	0800710b 	.word	0x0800710b
 8006fa0:	0800714f 	.word	0x0800714f
                    if( eAnswer == eDHCPContinue )
                #endif /* ipconfigUSE_DHCP_HOOK */
                {
                    /* Initial state.  Create the DHCP socket, timer, etc. if they
                     * have not already been created. */
                    prvInitialiseDHCP();
 8006fa4:	f000 f95a 	bl	800725c <prvInitialiseDHCP>

                    /* See if prvInitialiseDHCP() has creates a socket. */
                    if( xDHCPSocket == NULL )
 8006fa8:	4b7c      	ldr	r3, [pc, #496]	; (800719c <vDHCPProcess+0x234>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <vDHCPProcess+0x4e>
                    {
                        xGivingUp = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]

                        /* The user indicates that the DHCP process does not continue. */
                        xGivingUp = pdTRUE;
                    }
                #endif /* ipconfigUSE_DHCP_HOOK */
                break;
 8006fb4:	e0d6      	b.n	8007164 <vDHCPProcess+0x1fc>
                        *ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 8006fb6:	4b7a      	ldr	r3, [pc, #488]	; (80071a0 <vDHCPProcess+0x238>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	615a      	str	r2, [r3, #20]
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8006fbc:	f7fe f90e 	bl	80051dc <xTaskGetTickCount>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b75      	ldr	r3, [pc, #468]	; (8007198 <vDHCPProcess+0x230>)
 8006fc4:	611a      	str	r2, [r3, #16]
                        prvSendDHCPDiscover();
 8006fc6:	f000 fc1b 	bl	8007800 <prvSendDHCPDiscover>
                        EP_DHCPData.eDHCPState = eWaitingOffer;
 8006fca:	4b73      	ldr	r3, [pc, #460]	; (8007198 <vDHCPProcess+0x230>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	771a      	strb	r2, [r3, #28]
                break;
 8006fd0:	e0c8      	b.n	8007164 <vDHCPProcess+0x1fc>

            case eWaitingOffer:

                xGivingUp = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]

                /* Look for offers coming in. */
                if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 8006fd6:	2002      	movs	r0, #2
 8006fd8:	f000 f95e 	bl	8007298 <prvProcessDHCPReplies>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10e      	bne.n	8007000 <vDHCPProcess+0x98>
                        if( eAnswer == eDHCPContinue )
                    #endif /* ipconfigUSE_DHCP_HOOK */
                    {
                        /* An offer has been made, the user wants to continue,
                         * generate the request. */
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8006fe2:	f7fe f8fb 	bl	80051dc <xTaskGetTickCount>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b6b      	ldr	r3, [pc, #428]	; (8007198 <vDHCPProcess+0x230>)
 8006fea:	611a      	str	r2, [r3, #16]
                        EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8006fec:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <vDHCPProcess+0x230>)
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	615a      	str	r2, [r3, #20]
                        prvSendDHCPRequest();
 8006ff4:	f000 fbc4 	bl	8007780 <prvSendDHCPRequest>
                        EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <vDHCPProcess+0x230>)
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	771a      	strb	r2, [r3, #28]
                        break;
 8006ffe:	e0b1      	b.n	8007164 <vDHCPProcess+0x1fc>
                        xGivingUp = pdTRUE;
                    #endif /* ipconfigUSE_DHCP_HOOK */
                }

                /* Is it time to send another Discover? */
                else if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 8007000:	f7fe f8ec 	bl	80051dc <xTaskGetTickCount>
 8007004:	4602      	mov	r2, r0
 8007006:	4b64      	ldr	r3, [pc, #400]	; (8007198 <vDHCPProcess+0x230>)
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	4b62      	ldr	r3, [pc, #392]	; (8007198 <vDHCPProcess+0x230>)
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	f240 80a2 	bls.w	800715a <vDHCPProcess+0x1f2>
                {
                    /* It is time to send another Discover.  Increase the time
                     * period, and if it has not got to the point of giving up - send
                     * another discovery. */
                    EP_DHCPData.xDHCPTxPeriod <<= 1;
 8007016:	4b60      	ldr	r3, [pc, #384]	; (8007198 <vDHCPProcess+0x230>)
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	4a5e      	ldr	r2, [pc, #376]	; (8007198 <vDHCPProcess+0x230>)
 800701e:	6153      	str	r3, [r2, #20]

                    if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8007020:	4b5d      	ldr	r3, [pc, #372]	; (8007198 <vDHCPProcess+0x230>)
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	4a5f      	ldr	r2, [pc, #380]	; (80071a4 <vDHCPProcess+0x23c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d819      	bhi.n	800705e <vDHCPProcess+0xf6>
                    {
                        if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 800702a:	485b      	ldr	r0, [pc, #364]	; (8007198 <vDHCPProcess+0x230>)
 800702c:	f7f9 fd2f 	bl	8000a8e <xApplicationGetRandomNumber>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8091 	beq.w	800715a <vDHCPProcess+0x1f2>
                        {
                            EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8007038:	f7fe f8d0 	bl	80051dc <xTaskGetTickCount>
 800703c:	4602      	mov	r2, r0
 800703e:	4b56      	ldr	r3, [pc, #344]	; (8007198 <vDHCPProcess+0x230>)
 8007040:	611a      	str	r2, [r3, #16]

                            if( EP_DHCPData.xUseBroadcast != pdFALSE )
 8007042:	4b55      	ldr	r3, [pc, #340]	; (8007198 <vDHCPProcess+0x230>)
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <vDHCPProcess+0xea>
                            {
                                EP_DHCPData.xUseBroadcast = pdFALSE;
 800704a:	4b53      	ldr	r3, [pc, #332]	; (8007198 <vDHCPProcess+0x230>)
 800704c:	2200      	movs	r2, #0
 800704e:	619a      	str	r2, [r3, #24]
 8007050:	e002      	b.n	8007058 <vDHCPProcess+0xf0>
                            }
                            else
                            {
                                EP_DHCPData.xUseBroadcast = pdTRUE;
 8007052:	4b51      	ldr	r3, [pc, #324]	; (8007198 <vDHCPProcess+0x230>)
 8007054:	2201      	movs	r2, #1
 8007056:	619a      	str	r2, [r3, #24]
                            }

                            prvSendDHCPDiscover();
 8007058:	f000 fbd2 	bl	8007800 <prvSendDHCPDiscover>
                else
                {
                    /* There was no DHCP reply, there was no time-out, just keep on waiting. */
                }

                break;
 800705c:	e07d      	b.n	800715a <vDHCPProcess+0x1f2>
                                xGivingUp = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
                break;
 8007062:	e07a      	b.n	800715a <vDHCPProcess+0x1f2>

            case eWaitingAcknowledge:

                /* Look for acks coming in. */
                if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 8007064:	2005      	movs	r0, #5
 8007066:	f000 f917 	bl	8007298 <prvProcessDHCPReplies>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d12c      	bne.n	80070ca <vDHCPProcess+0x162>
                {
                    FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );

                    /* DHCP completed.  The IP address can now be used, and the
                     * timer set to the lease timeout time. */
                    *ipLOCAL_IP_ADDRESS_POINTER = EP_DHCPData.ulOfferedIPAddress;
 8007070:	4b49      	ldr	r3, [pc, #292]	; (8007198 <vDHCPProcess+0x230>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a4a      	ldr	r2, [pc, #296]	; (80071a0 <vDHCPProcess+0x238>)
 8007076:	6153      	str	r3, [r2, #20]

                    /* Setting the 'local' broadcast address, something like
                     * '192.168.1.255'. */
                    EP_IPv4_SETTINGS.ulBroadcastAddress = ( EP_DHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8007078:	4b47      	ldr	r3, [pc, #284]	; (8007198 <vDHCPProcess+0x230>)
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <vDHCPProcess+0x240>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	43db      	mvns	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	4a48      	ldr	r2, [pc, #288]	; (80071a8 <vDHCPProcess+0x240>)
 8007086:	6113      	str	r3, [r2, #16]
                    EP_DHCPData.eDHCPState = eLeasedAddress;
 8007088:	4b43      	ldr	r3, [pc, #268]	; (8007198 <vDHCPProcess+0x230>)
 800708a:	2203      	movs	r2, #3
 800708c:	771a      	strb	r2, [r3, #28]
                    iptraceDHCP_SUCCEDEED( EP_DHCPData.ulOfferedIPAddress );

                    /* DHCP failed, the default configured IP-address will be used
                     * Now call vIPNetworkUpCalls() to send the network-up event and
                     * start the ARP timer. */
                    vIPNetworkUpCalls();
 800708e:	f001 f833 	bl	80080f8 <vIPNetworkUpCalls>

                    /* Close socket to ensure packets don't queue on it. */
                    prvCloseDHCPSocket();
 8007092:	f000 f88d 	bl	80071b0 <prvCloseDHCPSocket>

                    if( EP_DHCPData.ulLeaseTime == 0UL )
 8007096:	4b40      	ldr	r3, [pc, #256]	; (8007198 <vDHCPProcess+0x230>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <vDHCPProcess+0x13e>
                    {
                        EP_DHCPData.ulLeaseTime = ( uint32_t ) dhcpDEFAULT_LEASE_TIME;
 800709e:	4b3e      	ldr	r3, [pc, #248]	; (8007198 <vDHCPProcess+0x230>)
 80070a0:	4a42      	ldr	r2, [pc, #264]	; (80071ac <vDHCPProcess+0x244>)
 80070a2:	60da      	str	r2, [r3, #12]
 80070a4:	e009      	b.n	80070ba <vDHCPProcess+0x152>
                    }
                    else if( EP_DHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <vDHCPProcess+0x230>)
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d803      	bhi.n	80070ba <vDHCPProcess+0x152>
                    {
                        EP_DHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 80070b2:	4b39      	ldr	r3, [pc, #228]	; (8007198 <vDHCPProcess+0x230>)
 80070b4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80070b8:	60da      	str	r2, [r3, #12]
                    {
                        /* The lease time is already valid. */
                    }

                    /* Check for clashes. */
                    vARPSendGratuitous();
 80070ba:	f7ff fe7b 	bl	8006db4 <vARPSendGratuitous>
                    vIPReloadDHCPTimer( EP_DHCPData.ulLeaseTime );
 80070be:	4b36      	ldr	r3, [pc, #216]	; (8007198 <vDHCPProcess+0x230>)
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fdba 	bl	8008c3c <vIPReloadDHCPTimer>
                            EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
                        }
                    }
                }

                break;
 80070c8:	e049      	b.n	800715e <vDHCPProcess+0x1f6>
                    if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 80070ca:	f7fe f887 	bl	80051dc <xTaskGetTickCount>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <vDHCPProcess+0x230>)
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	4b30      	ldr	r3, [pc, #192]	; (8007198 <vDHCPProcess+0x230>)
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d93f      	bls.n	800715e <vDHCPProcess+0x1f6>
                        EP_DHCPData.xDHCPTxPeriod <<= 1;
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <vDHCPProcess+0x230>)
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4a2c      	ldr	r2, [pc, #176]	; (8007198 <vDHCPProcess+0x230>)
 80070e6:	6153      	str	r3, [r2, #20]
                        if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 80070e8:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <vDHCPProcess+0x230>)
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <vDHCPProcess+0x23c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d807      	bhi.n	8007102 <vDHCPProcess+0x19a>
                            EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 80070f2:	f7fe f873 	bl	80051dc <xTaskGetTickCount>
 80070f6:	4602      	mov	r2, r0
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <vDHCPProcess+0x230>)
 80070fa:	611a      	str	r2, [r3, #16]
                            prvSendDHCPRequest();
 80070fc:	f000 fb40 	bl	8007780 <prvSendDHCPRequest>
                break;
 8007100:	e02d      	b.n	800715e <vDHCPProcess+0x1f6>
                            EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8007102:	4b25      	ldr	r3, [pc, #148]	; (8007198 <vDHCPProcess+0x230>)
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
                break;
 8007108:	e029      	b.n	800715e <vDHCPProcess+0x1f6>
                        break;
                #endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */

            case eLeasedAddress:

                if( FreeRTOS_IsNetworkUp() != 0 )
 800710a:	f001 fdb1 	bl	8008c70 <FreeRTOS_IsNetworkUp>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <vDHCPProcess+0x1dc>
                {
                    /* Resend the request at the appropriate time to renew the lease. */
                    prvCreateDHCPSocket();
 8007114:	f000 f85e 	bl	80071d4 <prvCreateDHCPSocket>

                    if( xDHCPSocket != NULL )
 8007118:	4b20      	ldr	r3, [pc, #128]	; (800719c <vDHCPProcess+0x234>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d020      	beq.n	8007162 <vDHCPProcess+0x1fa>
                    {
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 8007120:	f7fe f85c 	bl	80051dc <xTaskGetTickCount>
 8007124:	4602      	mov	r2, r0
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <vDHCPProcess+0x230>)
 8007128:	611a      	str	r2, [r3, #16]
                        EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <vDHCPProcess+0x230>)
 800712c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007130:	615a      	str	r2, [r3, #20]
                        prvSendDHCPRequest();
 8007132:	f000 fb25 	bl	8007780 <prvSendDHCPRequest>
                        EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 8007136:	4b18      	ldr	r3, [pc, #96]	; (8007198 <vDHCPProcess+0x230>)
 8007138:	2202      	movs	r2, #2
 800713a:	771a      	strb	r2, [r3, #28]

                        /* From now on, we should be called more often */
                        vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800713c:	20fa      	movs	r0, #250	; 0xfa
 800713e:	f001 fd7d 	bl	8008c3c <vIPReloadDHCPTimer>
                    /* See PR #53 on github/freertos/freertos */
                    FreeRTOS_printf( ( "DHCP: lease time finished but network is down\n" ) );
                    vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
                }

                break;
 8007142:	e00e      	b.n	8007162 <vDHCPProcess+0x1fa>
                    vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
 8007144:	f241 3088 	movw	r0, #5000	; 0x1388
 8007148:	f001 fd78 	bl	8008c3c <vIPReloadDHCPTimer>
                break;
 800714c:	e009      	b.n	8007162 <vDHCPProcess+0x1fa>

            case eNotUsingLeasedAddress:

                vIPSetDHCPTimerEnableState( pdFALSE );
 800714e:	2000      	movs	r0, #0
 8007150:	f001 fd5a 	bl	8008c08 <vIPSetDHCPTimerEnableState>
                break;
 8007154:	e006      	b.n	8007164 <vDHCPProcess+0x1fc>

            default:
                /* Lint: all options are included. */
                break;
 8007156:	bf00      	nop
 8007158:	e004      	b.n	8007164 <vDHCPProcess+0x1fc>
                break;
 800715a:	bf00      	nop
 800715c:	e002      	b.n	8007164 <vDHCPProcess+0x1fc>
                break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <vDHCPProcess+0x1fc>
                break;
 8007162:	bf00      	nop
        }

        if( xGivingUp != pdFALSE )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d011      	beq.n	800718e <vDHCPProcess+0x226>
            /* xGivingUp became true either because of a time-out, or because
             * xApplicationDHCPHook() returned another value than 'eDHCPContinue',
             * meaning that the conversion is cancelled from here. */

            /* Revert to static IP address. */
            taskENTER_CRITICAL();
 800716a:	f7ff f855 	bl	8006218 <vPortEnterCritical>
            {
                *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <vDHCPProcess+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a0b      	ldr	r2, [pc, #44]	; (80071a0 <vDHCPProcess+0x238>)
 8007174:	6153      	str	r3, [r2, #20]
                iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
            }
            taskEXIT_CRITICAL();
 8007176:	f7ff f881 	bl	800627c <vPortExitCritical>

            EP_DHCPData.eDHCPState = eNotUsingLeasedAddress;
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <vDHCPProcess+0x230>)
 800717c:	2204      	movs	r2, #4
 800717e:	771a      	strb	r2, [r3, #28]
            vIPSetDHCPTimerEnableState( pdFALSE );
 8007180:	2000      	movs	r0, #0
 8007182:	f001 fd41 	bl	8008c08 <vIPSetDHCPTimerEnableState>

            /* DHCP failed, the default configured IP-address will be used.  Now
             * call vIPNetworkUpCalls() to send the network-up event and start the ARP
             * timer. */
            vIPNetworkUpCalls();
 8007186:	f000 ffb7 	bl	80080f8 <vIPNetworkUpCalls>

            prvCloseDHCPSocket();
 800718a:	f000 f811 	bl	80071b0 <prvCloseDHCPSocket>
        }
    }
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2001b88c 	.word	0x2001b88c
 800719c:	2001b8ac 	.word	0x2001b8ac
 80071a0:	20000010 	.word	0x20000010
 80071a4:	0001d4c0 	.word	0x0001d4c0
 80071a8:	2001a970 	.word	0x2001a970
 80071ac:	0a4cb800 	.word	0x0a4cb800

080071b0 <prvCloseDHCPSocket>:

/**
 * @brief Close the DHCP socket.
 */
    static void prvCloseDHCPSocket( void )
    {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
        if( xDHCPSocket != NULL )
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <prvCloseDHCPSocket+0x20>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <prvCloseDHCPSocket+0x1c>
        {
            /* This modules runs from the IP-task. Use the internal
             * function 'vSocketClose()` to close the socket. */
            ( void ) vSocketClose( xDHCPSocket );
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <prvCloseDHCPSocket+0x20>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f002 fa1b 	bl	80095fc <vSocketClose>
            xDHCPSocket = NULL;
 80071c6:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <prvCloseDHCPSocket+0x20>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
        }
    }
 80071cc:	bf00      	nop
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	2001b8ac 	.word	0x2001b8ac

080071d4 <prvCreateDHCPSocket>:

/**
 * @brief Create a DHCP socket with the defined timeouts.
 */
    _static void prvCreateDHCPSocket( void )
    {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
        struct freertos_sockaddr xAddress;
        BaseType_t xReturn;
        TickType_t xTimeoutTime = ( TickType_t ) 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]

        /* Create the socket, if it has not already been created. */
        if( xDHCPSocket == NULL )
 80071de:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <prvCreateDHCPSocket+0x84>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d134      	bne.n	8007250 <prvCreateDHCPSocket+0x7c>
        {
            xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80071e6:	2211      	movs	r2, #17
 80071e8:	2102      	movs	r1, #2
 80071ea:	2002      	movs	r0, #2
 80071ec:	f001 fee8 	bl	8008fc0 <FreeRTOS_socket>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b19      	ldr	r3, [pc, #100]	; (8007258 <prvCreateDHCPSocket+0x84>)
 80071f4:	601a      	str	r2, [r3, #0]

            if( xDHCPSocket != FREERTOS_INVALID_SOCKET )
 80071f6:	4b18      	ldr	r3, [pc, #96]	; (8007258 <prvCreateDHCPSocket+0x84>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d024      	beq.n	800724a <prvCreateDHCPSocket+0x76>
            {
                /* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
                 * context of the IP task. */
                ( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 8007200:	4b15      	ldr	r3, [pc, #84]	; (8007258 <prvCreateDHCPSocket+0x84>)
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	463a      	mov	r2, r7
 8007206:	2304      	movs	r3, #4
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	f002 fac8 	bl	80097a4 <FreeRTOS_setsockopt>
                ( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 8007214:	4b10      	ldr	r3, [pc, #64]	; (8007258 <prvCreateDHCPSocket+0x84>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	463a      	mov	r2, r7
 800721a:	2304      	movs	r3, #4
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	2201      	movs	r2, #1
 8007222:	2100      	movs	r1, #0
 8007224:	f002 fabe 	bl	80097a4 <FreeRTOS_setsockopt>

                /* Bind to the standard DHCP client port. */
                xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT_IPv4;
 8007228:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800722c:	80fb      	strh	r3, [r7, #6]
                xReturn = vSocketBind( xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800722e:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <prvCreateDHCPSocket+0x84>)
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	1d39      	adds	r1, r7, #4
 8007234:	2300      	movs	r3, #0
 8007236:	2208      	movs	r2, #8
 8007238:	f002 f920 	bl	800947c <vSocketBind>
 800723c:	60f8      	str	r0, [r7, #12]

                if( xReturn != 0 )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <prvCreateDHCPSocket+0x7c>
                {
                    /* Binding failed, close the socket again. */
                    prvCloseDHCPSocket();
 8007244:	f7ff ffb4 	bl	80071b0 <prvCloseDHCPSocket>
            {
                /* Change to NULL for easier testing. */
                xDHCPSocket = NULL;
            }
        }
    }
 8007248:	e002      	b.n	8007250 <prvCreateDHCPSocket+0x7c>
                xDHCPSocket = NULL;
 800724a:	4b03      	ldr	r3, [pc, #12]	; (8007258 <prvCreateDHCPSocket+0x84>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    }
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	2001b8ac 	.word	0x2001b8ac

0800725c <prvInitialiseDHCP>:
/**
 * @brief Initialise the DHCP state machine by creating DHCP socket and
 *        begin the transaction.
 */
    static void prvInitialiseDHCP( void )
    {
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
        /* Initialise the parameters that will be set by the DHCP process. Per
         * https://www.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random
         * value chosen by the client. */

        /* Check for random number generator API failure. */
        if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 8007260:	480c      	ldr	r0, [pc, #48]	; (8007294 <prvInitialiseDHCP+0x38>)
 8007262:	f7f9 fc14 	bl	8000a8e <xApplicationGetRandomNumber>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d011      	beq.n	8007290 <prvInitialiseDHCP+0x34>
        {
            EP_DHCPData.xUseBroadcast = 0;
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <prvInitialiseDHCP+0x38>)
 800726e:	2200      	movs	r2, #0
 8007270:	619a      	str	r2, [r3, #24]
            EP_DHCPData.ulOfferedIPAddress = 0UL;
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <prvInitialiseDHCP+0x38>)
 8007274:	2200      	movs	r2, #0
 8007276:	605a      	str	r2, [r3, #4]
            EP_DHCPData.ulDHCPServerAddress = 0UL;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <prvInitialiseDHCP+0x38>)
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
            EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <prvInitialiseDHCP+0x38>)
 8007280:	f241 3288 	movw	r2, #5000	; 0x1388
 8007284:	615a      	str	r2, [r3, #20]

            /* Create the DHCP socket if it has not already been created. */
            prvCreateDHCPSocket();
 8007286:	f7ff ffa5 	bl	80071d4 <prvCreateDHCPSocket>
            FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
            vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800728a:	20fa      	movs	r0, #250	; 0xfa
 800728c:	f001 fcd6 	bl	8008c3c <vIPReloadDHCPTimer>
        }
        else
        {
            /* There was a problem with the randomizer. */
        }
    }
 8007290:	bf00      	nop
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2001b88c 	.word	0x2001b88c

08007298 <prvProcessDHCPReplies>:
 *                                  Messages of different type will be dropped.
 *
 * @return pdPASS: if DHCP options are received correctly; pdFAIL: Otherwise.
 */
    _static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
    {
 8007298:	b580      	push	{r7, lr}
 800729a:	b092      	sub	sp, #72	; 0x48
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
        int32_t lBytes;
        const DHCPMessage_IPv4_t * pxDHCPMessage;
        const uint8_t * pucByte;
        uint8_t ucOptionCode;
        uint32_t ulProcessed, ulParameter;
        BaseType_t xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
        const uint32_t ulMandatoryOptions = 2UL; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 80072a4:	2302      	movs	r3, #2
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        /* Passing the address of a pointer (pucUDPPayload) because FREERTOS_ZERO_COPY is used. */
        lBytes = FreeRTOS_recvfrom( xDHCPSocket, &pucUDPPayload, 0UL, FREERTOS_ZERO_COPY, NULL, NULL );
 80072a8:	4bb8      	ldr	r3, [pc, #736]	; (800758c <prvProcessDHCPReplies+0x2f4>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	f107 010c 	add.w	r1, r7, #12
 80072b0:	2300      	movs	r3, #0
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	2300      	movs	r3, #0
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2301      	movs	r3, #1
 80072ba:	2200      	movs	r2, #0
 80072bc:	f001 ff1c 	bl	80090f8 <FreeRTOS_recvfrom>
 80072c0:	62b8      	str	r0, [r7, #40]	; 0x28

        if( lBytes > 0 )
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f340 8192 	ble.w	80075ee <prvProcessDHCPReplies+0x356>
        {
            /* Map a DHCP structure onto the received data. */
            pxDHCPMessage = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayload );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fe28 	bl	8006f22 <vCastConstPointerTo_DHCPMessage_IPv4_t>
 80072d2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Sanity check. */
            if( lBytes < ( int32_t ) sizeof( DHCPMessage_IPv4_t ) )
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2bef      	cmp	r3, #239	; 0xef
 80072d8:	f340 8185 	ble.w	80075e6 <prvProcessDHCPReplies+0x34e>
            {
                /* Not enough bytes. */
            }
            else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80072e2:	4aab      	ldr	r2, [pc, #684]	; (8007590 <prvProcessDHCPReplies+0x2f8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	f040 817e 	bne.w	80075e6 <prvProcessDHCPReplies+0x34e>
                     ( pxDHCPMessage->ucOpcode != ( uint8_t ) dhcpREPLY_OPCODE ) )
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	f040 8179 	bne.w	80075e6 <prvProcessDHCPReplies+0x34e>
            {
                /* Invalid cookie or unexpected opcode. */
            }
            else if( ( pxDHCPMessage->ulTransactionID != FreeRTOS_htonl( EP_DHCPData.ulTransactionId ) ) )
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4ba6      	ldr	r3, [pc, #664]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	0619      	lsls	r1, r3, #24
 80072fe:	4ba5      	ldr	r3, [pc, #660]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007308:	4319      	orrs	r1, r3
 800730a:	4ba2      	ldr	r3, [pc, #648]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007314:	4319      	orrs	r1, r3
 8007316:	4b9f      	ldr	r3, [pc, #636]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	0e1b      	lsrs	r3, r3, #24
 800731c:	430b      	orrs	r3, r1
 800731e:	429a      	cmp	r2, r3
 8007320:	f040 8161 	bne.w	80075e6 <prvProcessDHCPReplies+0x34e>
            {
                /* Transaction ID does not match. */
            }
            else /* Looks like a valid DHCP response, with the same transaction ID. */
            {
                if( memcmp( pxDHCPMessage->ucClientHardwareAddress,
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	331c      	adds	r3, #28
 8007328:	2206      	movs	r2, #6
 800732a:	499b      	ldr	r1, [pc, #620]	; (8007598 <prvProcessDHCPReplies+0x300>)
 800732c:	4618      	mov	r0, r3
 800732e:	f009 f841 	bl	80103b4 <memcmp>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8156 	bne.w	80075e6 <prvProcessDHCPReplies+0x34e>
                else
                {
                    size_t uxIndex, uxPayloadDataLength, uxLength;

                    /* None of the essential options have been processed yet. */
                    ulProcessed = 0UL;
 800733a:	2300      	movs	r3, #0
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Walk through the options until the dhcpOPTION_END_BYTE byte
                     * is found, taking care not to walk off the end of the options. */
                    pucByte = &( pucUDPPayload[ sizeof( DHCPMessage_IPv4_t ) ] );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	33f0      	adds	r3, #240	; 0xf0
 8007342:	623b      	str	r3, [r7, #32]
                    uxIndex = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
                    uxPayloadDataLength = ( ( size_t ) lBytes ) - sizeof( DHCPMessage_IPv4_t );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	3bf0      	subs	r3, #240	; 0xf0
 800734c:	61fb      	str	r3, [r7, #28]

                    while( uxIndex < uxPayloadDataLength )
 800734e:	e131      	b.n	80075b4 <prvProcessDHCPReplies+0x31c>
                    {
                        ucOptionCode = pucByte[ uxIndex ];
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007354:	4413      	add	r3, r2
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	76fb      	strb	r3, [r7, #27]

                        if( ucOptionCode == ( uint8_t ) dhcpOPTION_END_BYTE )
 800735a:	7efb      	ldrb	r3, [r7, #27]
 800735c:	2bff      	cmp	r3, #255	; 0xff
 800735e:	f000 812f 	beq.w	80075c0 <prvProcessDHCPReplies+0x328>
                            /* Ready, the last byte has been seen. */
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        if( ucOptionCode == ( uint8_t ) dhcpIPv4_ZERO_PAD_OPTION_CODE )
 8007362:	7efb      	ldrb	r3, [r7, #27]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <prvProcessDHCPReplies+0xd8>
                        {
                            /* The value zero is used as a pad byte,
                             * it is not followed by a length byte. */
                            uxIndex = uxIndex + 1U;
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736a:	3301      	adds	r3, #1
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
                            continue;
 800736e:	e121      	b.n	80075b4 <prvProcessDHCPReplies+0x31c>
                        }

                        /* Stop if the response is malformed. */
                        if( ( uxIndex + 1U ) < uxPayloadDataLength )
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	3301      	adds	r3, #1
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	429a      	cmp	r2, r3
 8007378:	f240 8124 	bls.w	80075c4 <prvProcessDHCPReplies+0x32c>
                        {
                            /* Fetch the length byte. */
                            uxLength = ( size_t ) pucByte[ uxIndex + 1U ];
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	3301      	adds	r3, #1
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	4413      	add	r3, r2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	633b      	str	r3, [r7, #48]	; 0x30
                            uxIndex = uxIndex + 2U;
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	3302      	adds	r3, #2
 800738c:	637b      	str	r3, [r7, #52]	; 0x34

                            if( !( ( ( uxIndex + uxLength ) - 1U ) < uxPayloadDataLength ) )
 800738e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	4413      	add	r3, r2
 8007394:	3b01      	subs	r3, #1
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	429a      	cmp	r2, r3
 800739a:	f240 8115 	bls.w	80075c8 <prvProcessDHCPReplies+0x330>
                            break;
                        }

                        /* In most cases, a 4-byte network-endian parameter follows,
                         * just get it once here and use later. */
                        if( uxLength >= sizeof( ulParameter ) )
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d90c      	bls.n	80073be <prvProcessDHCPReplies+0x126>
                            /*
                             * Use helper variables for memcpy() to remain
                             * compliant with MISRA Rule 21.15.  These should be
                             * optimized away.
                             */
                            pvCopySource = &pucByte[ uxIndex ];
 80073a4:	6a3a      	ldr	r2, [r7, #32]
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	4413      	add	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
                            pvCopyDest = &ulParameter;
 80073ac:	f107 0308 	add.w	r3, r7, #8
 80073b0:	613b      	str	r3, [r7, #16]
                            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulParameter ) );
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	e001      	b.n	80073c2 <prvProcessDHCPReplies+0x12a>
                            /* 'uxIndex' will be increased at the end of this loop. */
                        }
                        else
                        {
                            ulParameter = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
                        }

                        /* Confirm uxIndex is still a valid index after adjustments to uxIndex above */
                        if( !( uxIndex < uxPayloadDataLength ) )
 80073c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	f080 8100 	bcs.w	80075cc <prvProcessDHCPReplies+0x334>
                        {
                            break;
                        }

                        /* Option-specific handling. */
                        switch( ucOptionCode )
 80073cc:	7efb      	ldrb	r3, [r7, #27]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	2b35      	cmp	r3, #53	; 0x35
 80073d2:	f200 80d4 	bhi.w	800757e <prvProcessDHCPReplies+0x2e6>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <prvProcessDHCPReplies+0x144>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	080074eb 	.word	0x080074eb
 80073e0:	0800757f 	.word	0x0800757f
 80073e4:	080074f9 	.word	0x080074f9
 80073e8:	0800757f 	.word	0x0800757f
 80073ec:	0800757f 	.word	0x0800757f
 80073f0:	08007507 	.word	0x08007507
 80073f4:	0800757f 	.word	0x0800757f
 80073f8:	0800757f 	.word	0x0800757f
 80073fc:	0800757f 	.word	0x0800757f
 8007400:	0800757f 	.word	0x0800757f
 8007404:	0800757f 	.word	0x0800757f
 8007408:	0800757f 	.word	0x0800757f
 800740c:	0800757f 	.word	0x0800757f
 8007410:	0800757f 	.word	0x0800757f
 8007414:	0800757f 	.word	0x0800757f
 8007418:	0800757f 	.word	0x0800757f
 800741c:	0800757f 	.word	0x0800757f
 8007420:	0800757f 	.word	0x0800757f
 8007424:	0800757f 	.word	0x0800757f
 8007428:	0800757f 	.word	0x0800757f
 800742c:	0800757f 	.word	0x0800757f
 8007430:	0800757f 	.word	0x0800757f
 8007434:	0800757f 	.word	0x0800757f
 8007438:	0800757f 	.word	0x0800757f
 800743c:	0800757f 	.word	0x0800757f
 8007440:	0800757f 	.word	0x0800757f
 8007444:	0800757f 	.word	0x0800757f
 8007448:	0800757f 	.word	0x0800757f
 800744c:	0800757f 	.word	0x0800757f
 8007450:	0800757f 	.word	0x0800757f
 8007454:	0800757f 	.word	0x0800757f
 8007458:	0800757f 	.word	0x0800757f
 800745c:	0800757f 	.word	0x0800757f
 8007460:	0800757f 	.word	0x0800757f
 8007464:	0800757f 	.word	0x0800757f
 8007468:	0800757f 	.word	0x0800757f
 800746c:	0800757f 	.word	0x0800757f
 8007470:	0800757f 	.word	0x0800757f
 8007474:	0800757f 	.word	0x0800757f
 8007478:	0800757f 	.word	0x0800757f
 800747c:	0800757f 	.word	0x0800757f
 8007480:	0800757f 	.word	0x0800757f
 8007484:	0800757f 	.word	0x0800757f
 8007488:	0800757f 	.word	0x0800757f
 800748c:	0800757f 	.word	0x0800757f
 8007490:	0800757f 	.word	0x0800757f
 8007494:	0800757f 	.word	0x0800757f
 8007498:	0800757f 	.word	0x0800757f
 800749c:	0800757f 	.word	0x0800757f
 80074a0:	0800757f 	.word	0x0800757f
 80074a4:	0800753b 	.word	0x0800753b
 80074a8:	0800757f 	.word	0x0800757f
 80074ac:	080074b5 	.word	0x080074b5
 80074b0:	0800750f 	.word	0x0800750f
                        {
                            case dhcpIPv4_MESSAGE_TYPE_OPTION_CODE:

                                if( pucByte[ uxIndex ] == ( uint8_t ) xExpectedMessageType )
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	4413      	add	r3, r2
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d103      	bne.n	80074cc <prvProcessDHCPReplies+0x234>
                                {
                                    /* The message type is the message type the
                                     * state machine is expecting. */
                                    ulProcessed++;
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	3301      	adds	r3, #1
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c

                                    /* Stop processing further options. */
                                    uxLength = 0;
                                }

                                break;
 80074ca:	e06c      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>
                                    if( pucByte[ uxIndex ] == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 80074cc:	6a3a      	ldr	r2, [r7, #32]
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	4413      	add	r3, r2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	d105      	bne.n	80074e4 <prvProcessDHCPReplies+0x24c>
                                        if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d102      	bne.n	80074e4 <prvProcessDHCPReplies+0x24c>
                                            EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 80074de:	4b2d      	ldr	r3, [pc, #180]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
                                    uxLength = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	633b      	str	r3, [r7, #48]	; 0x30
                                break;
 80074e8:	e05d      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>

                            case dhcpIPv4_SUBNET_MASK_OPTION_CODE:

                                if( uxLength == sizeof( uint32_t ) )
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d148      	bne.n	8007582 <prvProcessDHCPReplies+0x2ea>
                                {
                                    EP_IPv4_SETTINGS.ulNetMask = ulParameter;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4a2a      	ldr	r2, [pc, #168]	; (800759c <prvProcessDHCPReplies+0x304>)
 80074f4:	6053      	str	r3, [r2, #4]
                                }

                                break;
 80074f6:	e044      	b.n	8007582 <prvProcessDHCPReplies+0x2ea>

                            case dhcpIPv4_GATEWAY_OPTION_CODE:

                                /* The DHCP server may send more than 1 gateway addresses. */
                                if( uxLength >= sizeof( uint32_t ) )
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d943      	bls.n	8007586 <prvProcessDHCPReplies+0x2ee>
                                {
                                    /* ulProcessed is not incremented in this case
                                     * because the gateway is not essential. */
                                    EP_IPv4_SETTINGS.ulGatewayAddress = ulParameter;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a26      	ldr	r2, [pc, #152]	; (800759c <prvProcessDHCPReplies+0x304>)
 8007502:	6093      	str	r3, [r2, #8]
                                }

                                break;
 8007504:	e03f      	b.n	8007586 <prvProcessDHCPReplies+0x2ee>
                            case dhcpIPv4_DNS_SERVER_OPTIONS_CODE:

                                /* ulProcessed is not incremented in this case
                                 * because the DNS server is not essential.  Only the
                                 * first DNS server address is taken. */
                                EP_IPv4_SETTINGS.ulDNSServerAddress = ulParameter;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a24      	ldr	r2, [pc, #144]	; (800759c <prvProcessDHCPReplies+0x304>)
 800750a:	60d3      	str	r3, [r2, #12]
                                break;
 800750c:	e04b      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>

                            case dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE:

                                if( uxLength == sizeof( uint32_t ) )
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b04      	cmp	r3, #4
 8007512:	d145      	bne.n	80075a0 <prvProcessDHCPReplies+0x308>
                                {
                                    if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d106      	bne.n	8007528 <prvProcessDHCPReplies+0x290>
                                    {
                                        /* Offers state the replying server. */
                                        ulProcessed++;
 800751a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751c:	3301      	adds	r3, #1
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
                                        EP_DHCPData.ulDHCPServerAddress = ulParameter;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 8007524:	6093      	str	r3, [r2, #8]
                                            ulProcessed++;
                                        }
                                    }
                                }

                                break;
 8007526:	e03b      	b.n	80075a0 <prvProcessDHCPReplies+0x308>
                                        if( EP_DHCPData.ulDHCPServerAddress == ulParameter )
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	d136      	bne.n	80075a0 <prvProcessDHCPReplies+0x308>
                                            ulProcessed++;
 8007532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007534:	3301      	adds	r3, #1
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
                                break;
 8007538:	e032      	b.n	80075a0 <prvProcessDHCPReplies+0x308>

                            case dhcpIPv4_LEASE_TIME_OPTION_CODE:

                                if( uxLength == sizeof( EP_DHCPData.ulLeaseTime ) )
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2b04      	cmp	r3, #4
 800753e:	d131      	bne.n	80075a4 <prvProcessDHCPReplies+0x30c>
                                    /* ulProcessed is not incremented in this case
                                     * because the lease time is not essential. */

                                    /* The DHCP parameter is in seconds, convert
                                     * to host-endian format. */
                                    EP_DHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	061a      	lsls	r2, r3, #24
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800754c:	431a      	orrs	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007556:	431a      	orrs	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	0e1b      	lsrs	r3, r3, #24
 800755c:	4313      	orrs	r3, r2
 800755e:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 8007560:	60d3      	str	r3, [r2, #12]

                                    /* Divide the lease time by two to ensure a renew
                                     * request is sent before the lease actually expires. */
                                    EP_DHCPData.ulLeaseTime >>= 1UL;
 8007562:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 800756a:	60d3      	str	r3, [r2, #12]

                                    /* Multiply with configTICK_RATE_HZ to get clock ticks. */
                                    EP_DHCPData.ulLeaseTime = ( uint32_t ) configTICK_RATE_HZ * ( uint32_t ) EP_DHCPData.ulLeaseTime;
 800756c:	4b09      	ldr	r3, [pc, #36]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	4a06      	ldr	r2, [pc, #24]	; (8007594 <prvProcessDHCPReplies+0x2fc>)
 800757a:	60d3      	str	r3, [r2, #12]
                                }

                                break;
 800757c:	e012      	b.n	80075a4 <prvProcessDHCPReplies+0x30c>

                            default:

                                /* Not interested in this field. */

                                break;
 800757e:	bf00      	nop
 8007580:	e011      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>
                                break;
 8007582:	bf00      	nop
 8007584:	e00f      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>
                                break;
 8007586:	bf00      	nop
 8007588:	e00d      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>
 800758a:	bf00      	nop
 800758c:	2001b8ac 	.word	0x2001b8ac
 8007590:	63538263 	.word	0x63538263
 8007594:	2001b88c 	.word	0x2001b88c
 8007598:	20000010 	.word	0x20000010
 800759c:	2001a970 	.word	0x2001a970
                                break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <prvProcessDHCPReplies+0x30e>
                                break;
 80075a4:	bf00      	nop
                        }

                        /* Jump over the data to find the next option code. */
                        if( uxLength == 0U )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d011      	beq.n	80075d0 <prvProcessDHCPReplies+0x338>
                        {
                            break;
                        }

                        uxIndex = uxIndex + uxLength;
 80075ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	4413      	add	r3, r2
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
                    while( uxIndex < uxPayloadDataLength )
 80075b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	f4ff aec9 	bcc.w	8007350 <prvProcessDHCPReplies+0xb8>
 80075be:	e008      	b.n	80075d2 <prvProcessDHCPReplies+0x33a>
                            break;
 80075c0:	bf00      	nop
 80075c2:	e006      	b.n	80075d2 <prvProcessDHCPReplies+0x33a>
                            break;
 80075c4:	bf00      	nop
 80075c6:	e004      	b.n	80075d2 <prvProcessDHCPReplies+0x33a>
                                break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <prvProcessDHCPReplies+0x33a>
                            break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <prvProcessDHCPReplies+0x33a>
                            break;
 80075d0:	bf00      	nop
                    }

                    /* Were all the mandatory options received? */
                    if( ulProcessed >= ulMandatoryOptions )
 80075d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d305      	bcc.n	80075e6 <prvProcessDHCPReplies+0x34e>
                    {
                        /* HT:endian: used to be network order */
                        EP_DHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <prvProcessDHCPReplies+0x360>)
 80075e0:	6053      	str	r3, [r2, #4]
                        FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
                        xReturn = pdPASS;
 80075e2:	2301      	movs	r3, #1
 80075e4:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
            }

            FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fbf6 	bl	8007dda <FreeRTOS_ReleaseUDPPayloadBuffer>
        } /* if( lBytes > 0 ) */

        return xReturn;
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
 80075f0:	4618      	mov	r0, r3
 80075f2:	3740      	adds	r7, #64	; 0x40
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	2001b88c 	.word	0x2001b88c

080075fc <prvCreatePartDHCPMessage>:
 */
    static uint8_t * prvCreatePartDHCPMessage( struct freertos_sockaddr * pxAddress,
                                               BaseType_t xOpcode,
                                               const uint8_t * const pucOptionsArray,
                                               size_t * pxOptionsArraySize )
    {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08e      	sub	sp, #56	; 0x38
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
        DHCPMessage_IPv4_t * pxDHCPMessage;
        size_t uxRequiredBufferSize = sizeof( DHCPMessage_IPv4_t ) + *pxOptionsArraySize;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	33f0      	adds	r3, #240	; 0xf0
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
        const NetworkBufferDescriptor_t * pxNetworkBuffer;
        uint8_t * pucUDPPayloadBuffer;

        #if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
            const char * pucHostName = pcApplicationHostnameHook();
 8007612:	f7f9 fa55 	bl	8000ac0 <pcApplicationHostnameHook>
 8007616:	6338      	str	r0, [r7, #48]	; 0x30
            size_t uxNameLength = strlen( pucHostName );
 8007618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761a:	f7f8 fe11 	bl	8000240 <strlen>
 800761e:	62f8      	str	r0, [r7, #44]	; 0x2c
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            /* Two extra bytes for option code and length. */
            uxRequiredBufferSize += ( 2U + uxNameLength );
 8007620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	4413      	add	r3, r2
 8007626:	3302      	adds	r3, #2
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
         * to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
         * be test. */
        do
        {
            /* Obtain a network buffer with the required amount of storage. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + uxRequiredBufferSize, portMAX_DELAY );
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	332a      	adds	r3, #42	; 0x2a
 800762e:	f04f 31ff 	mov.w	r1, #4294967295
 8007632:	4618      	mov	r0, r3
 8007634:	f006 ff00 	bl	800e438 <pxGetNetworkBufferWithDescriptor>
 8007638:	62b8      	str	r0, [r7, #40]	; 0x28
        } while( pxNetworkBuffer == NULL );
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0f4      	beq.n	800762a <prvCreatePartDHCPMessage+0x2e>

        /* Leave space for the UDP header. */
        pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	332a      	adds	r3, #42	; 0x2a
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
        pxDHCPMessage = ipCAST_PTR_TO_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayloadBuffer );
 8007648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800764a:	f7ff fc5f 	bl	8006f0c <vCastPointerTo_DHCPMessage_IPv4_t>
 800764e:	6238      	str	r0, [r7, #32]

        /* Most fields need to be zero. */
        ( void ) memset( pxDHCPMessage, 0x00, sizeof( DHCPMessage_IPv4_t ) );
 8007650:	22f0      	movs	r2, #240	; 0xf0
 8007652:	2100      	movs	r1, #0
 8007654:	6a38      	ldr	r0, [r7, #32]
 8007656:	f008 fee0 	bl	801041a <memset>

        /* Create the message. */
        pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	701a      	strb	r2, [r3, #0]
        pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2201      	movs	r2, #1
 8007666:	705a      	strb	r2, [r3, #1]
        pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2206      	movs	r2, #6
 800766c:	709a      	strb	r2, [r3, #2]
        pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( EP_DHCPData.ulTransactionId );
 800766e:	4b42      	ldr	r3, [pc, #264]	; (8007778 <prvCreatePartDHCPMessage+0x17c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	061a      	lsls	r2, r3, #24
 8007674:	4b40      	ldr	r3, [pc, #256]	; (8007778 <prvCreatePartDHCPMessage+0x17c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800767e:	431a      	orrs	r2, r3
 8007680:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <prvCreatePartDHCPMessage+0x17c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800768a:	431a      	orrs	r2, r3
 800768c:	4b3a      	ldr	r3, [pc, #232]	; (8007778 <prvCreatePartDHCPMessage+0x17c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0e1b      	lsrs	r3, r3, #24
 8007692:	431a      	orrs	r2, r3
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	605a      	str	r2, [r3, #4]
        pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	2200      	movs	r2, #0
 800769c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80076a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80076a4:	2200      	movs	r2, #0
 80076a6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80076aa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80076ae:	2200      	movs	r2, #0
 80076b0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80076b4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80076b8:	2200      	movs	r2, #0
 80076ba:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80076be:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

        if( EP_DHCPData.xUseBroadcast != pdFALSE )
 80076c2:	4b2d      	ldr	r3, [pc, #180]	; (8007778 <prvCreatePartDHCPMessage+0x17c>)
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <prvCreatePartDHCPMessage+0xde>
        {
            pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076d2:	729a      	strb	r2, [r3, #10]
 80076d4:	2200      	movs	r2, #0
 80076d6:	72da      	strb	r2, [r3, #11]
 80076d8:	e004      	b.n	80076e4 <prvCreatePartDHCPMessage+0xe8>
        }
        else
        {
            pxDHCPMessage->usFlags = 0U;
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2200      	movs	r2, #0
 80076de:	729a      	strb	r2, [r3, #10]
 80076e0:	2200      	movs	r2, #0
 80076e2:	72da      	strb	r2, [r3, #11]
        }

        ( void ) memcpy( &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	331c      	adds	r3, #28
 80076e8:	2206      	movs	r2, #6
 80076ea:	4924      	ldr	r1, [pc, #144]	; (800777c <prvCreatePartDHCPMessage+0x180>)
 80076ec:	4618      	mov	r0, r3
 80076ee:	f008 fe70 	bl	80103d2 <memcpy>

        /* Copy in the const part of the options options. */
        ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), pucOptionsArray, *pxOptionsArraySize );
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	f008 fe67 	bl	80103d2 <memcpy>
            {
                /* With this option, the hostname can be registered as well which makes
                 * it easier to lookup a device in a router's list of DHCP clients. */

                /* Point to where the OPTION_END was stored to add data. */
                pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1U ) ] );
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	33ef      	adds	r3, #239	; 0xef
 800770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770c:	4413      	add	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
                pucPtr[ 0U ] = dhcpIPv4_DNS_HOSTNAME_OPTIONS_CODE;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	220c      	movs	r2, #12
 8007714:	701a      	strb	r2, [r3, #0]
                pucPtr[ 1U ] = ( uint8_t ) uxNameLength;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	3301      	adds	r3, #1
 800771a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
                /*
                 * Use helper variables for memcpy() to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pucHostName;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	61bb      	str	r3, [r7, #24]
                pvCopyDest = &pucPtr[ 2U ];
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3302      	adds	r3, #2
 8007728:	617b      	str	r3, [r7, #20]

                ( void ) memcpy( pvCopyDest, pvCopySource, uxNameLength );
 800772a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	6978      	ldr	r0, [r7, #20]
 8007730:	f008 fe4f 	bl	80103d2 <memcpy>
                pucPtr[ 2U + uxNameLength ] = ( uint8_t ) dhcpOPTION_END_BYTE;
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	3302      	adds	r3, #2
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	701a      	strb	r2, [r3, #0]
                *pxOptionsArraySize += ( size_t ) ( 2U + uxNameLength );
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	4413      	add	r3, r2
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	601a      	str	r2, [r3, #0]
            }
        #endif /* if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 ) */

        /* Map in the client identifier. */
        ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	33f6      	adds	r3, #246	; 0xf6
 8007752:	2206      	movs	r2, #6
 8007754:	4909      	ldr	r1, [pc, #36]	; (800777c <prvCreatePartDHCPMessage+0x180>)
 8007756:	4618      	mov	r0, r3
 8007758:	f008 fe3b 	bl	80103d2 <memcpy>
                         ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

        /* Set the addressing. */
        pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	605a      	str	r2, [r3, #4]
        pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT_IPv4;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 800776a:	805a      	strh	r2, [r3, #2]

        return pucUDPPayloadBuffer;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800776e:	4618      	mov	r0, r3
 8007770:	3738      	adds	r7, #56	; 0x38
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2001b88c 	.word	0x2001b88c
 800777c:	20000010 	.word	0x20000010

08007780 <prvSendDHCPRequest>:

/**
 * @brief Create and send a DHCP request message through the DHCP socket.
 */
    static void prvSendDHCPRequest( void )
    {
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE,  7, 1, 0, 0, 0, 0, 0, 0,      /* Client identifier. */
            dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,               /* The IP address being requested. */
            dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE,  4, 0, 0, 0, 0,               /* The IP address of the DHCP server. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPRequestOptions );
 8007786:	2319      	movs	r3, #25
 8007788:	603b      	str	r3, [r7, #0]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800778a:	463b      	mov	r3, r7
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <prvSendDHCPRequest+0x70>)
 8007790:	2101      	movs	r1, #1
 8007792:	f7ff ff33 	bl	80075fc <prvCreatePartDHCPMessage>
 8007796:	6178      	str	r0, [r7, #20]
        /*
         * Use helper variables for memcpy() source & dest to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = &EP_DHCPData.ulOfferedIPAddress;
 8007798:	4b16      	ldr	r3, [pc, #88]	; (80077f4 <prvSendDHCPRequest+0x74>)
 800779a:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ];
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	33fe      	adds	r3, #254	; 0xfe
 80077a0:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulOfferedIPAddress ) );
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	601a      	str	r2, [r3, #0]

        /* Copy in the address of the DHCP server being used. */
        pvCopySource = &EP_DHCPData.ulDHCPServerAddress;
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <prvSendDHCPRequest+0x78>)
 80077ae:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ];
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80077b6:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulDHCPServerAddress ) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

        FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
        iptraceSENDING_DHCP_REQUEST();

        if( FreeRTOS_sendto( xDHCPSocket, pucUDPPayloadBuffer, sizeof( DHCPMessage_IPv4_t ) + uxOptionsLength, FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80077c2:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <prvSendDHCPRequest+0x7c>)
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80077cc:	2308      	movs	r3, #8
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	2301      	movs	r3, #1
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	f001 fd3d 	bl	8009256 <FreeRTOS_sendto>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <prvSendDHCPRequest+0x68>
        {
            /* The packet was not successfully queued for sending and must be
             * returned to the stack. */
            FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 80077e2:	6978      	ldr	r0, [r7, #20]
 80077e4:	f000 faf9 	bl	8007dda <FreeRTOS_ReleaseUDPPayloadBuffer>
        }
    }
 80077e8:	bf00      	nop
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08010de8 	.word	0x08010de8
 80077f4:	2001b890 	.word	0x2001b890
 80077f8:	2001b894 	.word	0x2001b894
 80077fc:	2001b8ac 	.word	0x2001b8ac

08007800 <prvSendDHCPDiscover>:

/**
 * @brief Create and send a DHCP discover packet through the DHCP socket.
 */
    static void prvSendDHCPDiscover( void )
    {
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af02      	add	r7, sp, #8
            dhcpIPv4_MESSAGE_TYPE_OPTION_CODE,      1, dhcpMESSAGE_TYPE_DISCOVER,                                                                        /* Message type option. */
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE, 7, 1,                                0,                            0, 0, 0, 0, 0,                    /* Client identifier. */
            dhcpIPv4_PARAMETER_REQUEST_OPTION_CODE, 3, dhcpIPv4_SUBNET_MASK_OPTION_CODE, dhcpIPv4_GATEWAY_OPTION_CODE, dhcpIPv4_DNS_SERVER_OPTIONS_CODE, /* Parameter request option. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8007806:	2312      	movs	r3, #18
 8007808:	603b      	str	r3, [r7, #0]

        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800780a:	463b      	mov	r3, r7
 800780c:	1d38      	adds	r0, r7, #4
 800780e:	4a0e      	ldr	r2, [pc, #56]	; (8007848 <prvSendDHCPDiscover+0x48>)
 8007810:	2101      	movs	r1, #1
 8007812:	f7ff fef3 	bl	80075fc <prvCreatePartDHCPMessage>
 8007816:	60f8      	str	r0, [r7, #12]
                                                        &( uxOptionsLength ) );

        FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
        iptraceSENDING_DHCP_DISCOVER();

        if( FreeRTOS_sendto( xDHCPSocket,
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <prvSendDHCPDiscover+0x4c>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8007822:	2308      	movs	r3, #8
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	1d3b      	adds	r3, r7, #4
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2301      	movs	r3, #1
 800782c:	68f9      	ldr	r1, [r7, #12]
 800782e:	f001 fd12 	bl	8009256 <FreeRTOS_sendto>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <prvSendDHCPDiscover+0x3e>
                             &( xAddress ),
                             sizeof( xAddress ) ) == 0 )
        {
            /* The packet was not successfully queued for sending and must be
             * returned to the stack. */
            FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 face 	bl	8007dda <FreeRTOS_ReleaseUDPPayloadBuffer>
        }
    }
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	08010e04 	.word	0x08010e04
 800784c:	2001b8ac 	.word	0x2001b8ac

08007850 <vCastPointerTo_EthernetHeader_t>:
    {
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 8007858:	687b      	ldr	r3, [r7, #4]
    }
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <vCastConstPointerTo_EthernetHeader_t>:
    {
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 800786e:	687b      	ldr	r3, [r7, #4]
    }
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <vCastPointerTo_ARPPacket_t>:
    {
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8007884:	687b      	ldr	r3, [r7, #4]
    }
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <vCastPointerTo_IPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xIP_PACKET IPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( IPPacket_t )
    {
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 800789a:	687b      	ldr	r3, [r7, #4]
    }
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <vCastConstPointerTo_IPPacket_t>:
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( IPPacket_t )
    {
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 80078b0:	687b      	ldr	r3, [r7, #4]
    }
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <vCastPointerTo_ICMPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xICMP_PACKET ICMPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ICMPPacket_t )
    {
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 80078c6:	687b      	ldr	r3, [r7, #4]
    }
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <vCastConstPointerTo_UDPPacket_t>:
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
        return ( UDPPacket_t * ) pvArgument;
    }
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 80078dc:	687b      	ldr	r3, [r7, #4]
    }
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <vCastPointerTo_ProtocolPacket_t>:
        UDPPacket_t xUDPPacket;   /**< Union member: UDP packet struct */
        ICMPPacket_t xICMPPacket; /**< Union member: ICMP packet struct */
    } ProtocolPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
    {
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 80078f2:	687b      	ldr	r3, [r7, #4]
    }
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <vCastConstPointerTo_ProtocolPacket_t>:
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
    {
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 8007908:	687b      	ldr	r3, [r7, #4]
    }
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <vCastPointerTo_FreeRTOS_Socket_t>:
            #endif /* ipconfigUSE_TCP */
        } u;                              /**< Union of TCP/UDP socket */
    } FreeRTOS_Socket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( FreeRTOS_Socket_t )
    {
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800791e:	687b      	ldr	r3, [r7, #4]
    }
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 8007934:	687b      	ldr	r3, [r7, #4]
        }
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800794a:	687b      	ldr	r3, [r7, #4]
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 8007960:	f000 f9ee 	bl	8007d40 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8007964:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007968:	4864      	ldr	r0, [pc, #400]	; (8007afc <prvIPTask+0x1a4>)
 800796a:	f000 f99d 	bl	8007ca8 <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800796e:	4b64      	ldr	r3, [pc, #400]	; (8007b00 <prvIPTask+0x1a8>)
 8007970:	2201      	movs	r2, #1
 8007972:	601a      	str	r2, [r3, #0]
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 8007974:	f000 f928 	bl	8007bc8 <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 8007978:	f000 f8ec 	bl	8007b54 <prvCalculateSleepTime>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 800797e:	4b61      	ldr	r3, [pc, #388]	; (8007b04 <prvIPTask+0x1ac>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f107 0114 	add.w	r1, r7, #20
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f7fc fd9b 	bl	80044c4 <xQueueReceive>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <prvIPTask+0x40>
        {
            xReceivedEvent.eEventType = eNoEvent;
 8007994:	23ff      	movs	r3, #255	; 0xff
 8007996:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 8007998:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800799c:	3301      	adds	r3, #1
 800799e:	2b0d      	cmp	r3, #13
 80079a0:	f200 80a1 	bhi.w	8007ae6 <prvIPTask+0x18e>
 80079a4:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <prvIPTask+0x54>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	08007ae7 	.word	0x08007ae7
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	080079f1 	.word	0x080079f1
 80079b8:	08007a03 	.word	0x08007a03
 80079bc:	08007a17 	.word	0x08007a17
 80079c0:	08007a7f 	.word	0x08007a7f
 80079c4:	08007a91 	.word	0x08007a91
 80079c8:	08007aab 	.word	0x08007aab
 80079cc:	08007ab7 	.word	0x08007ab7
 80079d0:	08007ae1 	.word	0x08007ae1
 80079d4:	08007a1d 	.word	0x08007a1d
 80079d8:	08007a6d 	.word	0x08007a6d
 80079dc:	08007a99 	.word	0x08007a99
 80079e0:	08007ae7 	.word	0x08007ae7
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 80079e4:	4b48      	ldr	r3, [pc, #288]	; (8007b08 <prvIPTask+0x1b0>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 80079ea:	f000 fb59 	bl	80080a0 <prvProcessNetworkDownEvent>
                break;
 80079ee:	e07d      	b.n	8007aec <prvIPTask+0x194>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff ffa5 	bl	8007942 <vCastPointerTo_NetworkBufferDescriptor_t>
 80079f8:	4603      	mov	r3, r0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f89e 	bl	8007b3c <prvHandleEthernetPacket>
                break;
 8007a00:	e074      	b.n	8007aec <prvIPTask+0x194>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff ff9c 	bl	8007942 <vCastPointerTo_NetworkBufferDescriptor_t>
 8007a0a:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f006 ffac 	bl	800e96c <xNetworkInterfaceOutput>
               }

               break;
 8007a14:	e06a      	b.n	8007aec <prvIPTask+0x194>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 8007a16:	f7ff f93f 	bl	8006c98 <vARPAgeCache>
                break;
 8007a1a:	e067      	b.n	8007aec <prvIPTask+0x194>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff ff79 	bl	8007916 <vCastPointerTo_FreeRTOS_Socket_t>
 8007a24:	6238      	str	r0, [r7, #32]
                xAddress.sin_addr = 0U; /* For the moment. */
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	b21a      	sxth	r2, r3
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	b21b      	sxth	r3, r3
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	b21b      	sxth	r3, r3
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2200      	movs	r2, #0
 8007a48:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8007a4a:	f107 010c 	add.w	r1, r7, #12
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2208      	movs	r2, #8
 8007a52:	6a38      	ldr	r0, [r7, #32]
 8007a54:	f001 fd12 	bl	800947c <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f043 0210 	orr.w	r2, r3, #16
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 8007a64:	6a38      	ldr	r0, [r7, #32]
 8007a66:	f002 f8f9 	bl	8009c5c <vSocketWakeUpUser>
                break;
 8007a6a:	e03f      	b.n	8007aec <prvIPTask+0x194>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ff51 	bl	8007916 <vCastPointerTo_FreeRTOS_Socket_t>
 8007a74:	4603      	mov	r3, r0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fdc0 	bl	80095fc <vSocketClose>
                break;
 8007a7c:	e036      	b.n	8007aec <prvIPTask+0x194>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff ff5e 	bl	8007942 <vCastPointerTo_NetworkBufferDescriptor_t>
 8007a86:	4603      	mov	r3, r0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f006 faf9 	bl	800e080 <vProcessGeneratedUDPPacket>
                break;
 8007a8e:	e02d      	b.n	8007aec <prvIPTask+0x194>

            case eDHCPEvent:
                /* The DHCP state machine needs processing. */
                #if ( ipconfigUSE_DHCP == 1 )
                    /* Process DHCP messages for a given end-point. */
                    vDHCPProcess( pdFALSE );
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7ff fa69 	bl	8006f68 <vDHCPProcess>
                #endif /* ipconfigUSE_DHCP */
                break;
 8007a96:	e029      	b.n	8007aec <prvIPTask+0x194>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff ff46 	bl	800792c <vCastPointerTo_SocketSelect_t>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f002 fb9a 	bl	800a1dc <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 8007aa8:	e020      	b.n	8007aec <prvIPTask+0x194>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8007aaa:	4a14      	ldr	r2, [pc, #80]	; (8007afc <prvIPTask+0x1a4>)
 8007aac:	7813      	ldrb	r3, [r2, #0]
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 8007ab4:	e01a      	b.n	8007aec <prvIPTask+0x194>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff ff2c 	bl	8007916 <vCastPointerTo_FreeRTOS_Socket_t>
 8007abe:	6238      	str	r0, [r7, #32]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8007ac0:	6a38      	ldr	r0, [r7, #32]
 8007ac2:	f005 fa8f 	bl	800cfe4 <xTCPCheckNewClient>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <prvIPTask+0x192>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f043 0204 	orr.w	r2, r3, #4
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 8007ad8:	6a38      	ldr	r0, [r7, #32]
 8007ada:	f002 f8bf 	bl	8009c5c <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 8007ade:	e004      	b.n	8007aea <prvIPTask+0x192>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 8007ae0:	f002 faf6 	bl	800a0d0 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 8007ae4:	e002      	b.n	8007aec <prvIPTask+0x194>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <prvIPTask+0x194>
                break;
 8007aea:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 8007aec:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <prvIPTask+0x1b4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f43f af3f 	beq.w	8007974 <prvIPTask+0x1c>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 8007af6:	f000 fad3 	bl	80080a0 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 8007afa:	e73b      	b.n	8007974 <prvIPTask+0x1c>
 8007afc:	2001a9d0 	.word	0x2001a9d0
 8007b00:	2001a9e4 	.word	0x2001a9e4
 8007b04:	2001a968 	.word	0x2001a968
 8007b08:	2001a9a4 	.word	0x2001a9a4
 8007b0c:	2001a998 	.word	0x2001a998

08007b10 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8007b16:	f7fd ff35 	bl	8005984 <xTaskGetCurrentTaskHandle>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <xIsCallingFromIPTask+0x28>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d102      	bne.n	8007b2a <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	607b      	str	r3, [r7, #4]
 8007b28:	e001      	b.n	8007b2e <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8007b2e:	687b      	ldr	r3, [r7, #4]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	2001a99c 	.word	0x2001a99c

08007b3c <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
        {
            /* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
             * buffer will be sent at a time.  This is the default way for +TCP to pass
             * messages from the MAC to the TCP/IP stack. */
            prvProcessEthernetPacket( pxBuffer );
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 faeb 	bl	8008120 <prvProcessEthernetPacket>

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8007b5a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007b5e:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8007b60:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <prvCalculateSleepTime+0x68>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <prvCalculateSleepTime+0x68>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d902      	bls.n	8007b7e <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 8007b78:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <prvCalculateSleepTime+0x68>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 )
        {
            if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <prvCalculateSleepTime+0x6c>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <prvCalculateSleepTime+0x48>
            {
                if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <prvCalculateSleepTime+0x6c>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d902      	bls.n	8007b9c <prvCalculateSleepTime+0x48>
                {
                    xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <prvCalculateSleepTime+0x6c>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <prvCalculateSleepTime+0x70>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d902      	bls.n	8007bac <prvCalculateSleepTime+0x58>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8007ba6:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <prvCalculateSleepTime+0x70>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 8007bac:	687b      	ldr	r3, [r7, #4]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	2001a9a8 	.word	0x2001a9a8
 8007bc0:	2001a9bc 	.word	0x2001a9bc
 8007bc4:	2001a9d0 	.word	0x2001a9d0

08007bc8 <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8007bce:	481f      	ldr	r0, [pc, #124]	; (8007c4c <prvCheckNetworkTimers+0x84>)
 8007bd0:	f000 f87a 	bl	8007cc8 <prvIPTimerCheck>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8007bda:	2003      	movs	r0, #3
 8007bdc:	f000 f9fe 	bl	8007fdc <xSendEventToIPTask>
    }

    #if ( ipconfigUSE_DHCP == 1 )
        {
            /* Is it time for DHCP processing? */
            if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 8007be0:	481b      	ldr	r0, [pc, #108]	; (8007c50 <prvCheckNetworkTimers+0x88>)
 8007be2:	f000 f871 	bl	8007cc8 <prvIPTimerCheck>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <prvCheckNetworkTimers+0x2a>
            {
                ( void ) xSendEventToIPTask( eDHCPEvent );
 8007bec:	2005      	movs	r0, #5
 8007bee:	f000 f9f5 	bl	8007fdc <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8007bf2:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <prvCheckNetworkTimers+0x8c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fc fe56 	bl	80048a8 <uxQueueMessagesWaiting>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <prvCheckNetworkTimers+0x40>
            {
                xWillSleep = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e001      	b.n	8007c0c <prvCheckNetworkTimers+0x44>
            }
            else
            {
                xWillSleep = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8007c0c:	4812      	ldr	r0, [pc, #72]	; (8007c58 <prvCheckNetworkTimers+0x90>)
 8007c0e:	f000 f85b 	bl	8007cc8 <prvIPTimerCheck>
 8007c12:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <prvCheckNetworkTimers+0x94>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <prvCheckNetworkTimers+0x5e>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <prvCheckNetworkTimers+0x5e>
            {
                xCheckTCPSockets = pdTRUE;
 8007c22:	2301      	movs	r3, #1
 8007c24:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <prvCheckNetworkTimers+0x7a>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f002 f859 	bl	8009ce4 <xTCPTimerCheck>
 8007c32:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4808      	ldr	r0, [pc, #32]	; (8007c58 <prvCheckNetworkTimers+0x90>)
 8007c38:	f000 f812 	bl	8007c60 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvCheckNetworkTimers+0x94>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	2001a9a8 	.word	0x2001a9a8
 8007c50:	2001a9bc 	.word	0x2001a9bc
 8007c54:	2001a968 	.word	0x2001a968
 8007c58:	2001a9d0 	.word	0x2001a9d0
 8007c5c:	2001a9a0 	.word	0x2001a9a0

08007c60 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd fd06 	bl	8005680 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7813      	ldrb	r3, [r2, #0]
 8007c84:	f043 0302 	orr.w	r3, r3, #2
 8007c88:	7013      	strb	r3, [r2, #0]
 8007c8a:	e004      	b.n	8007c96 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	7813      	ldrb	r3, [r2, #0]
 8007c90:	f36f 0341 	bfc	r3, #1, #1
 8007c94:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	7813      	ldrb	r3, [r2, #0]
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	7013      	strb	r3, [r2, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7ff ffd0 	bl	8007c60 <prvIPTimerStart>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e028      	b.n	8007d36 <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10f      	bne.n	8007d12 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fd fcfd 	bl	80056fc <xTaskCheckForTimeOut>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7813      	ldrb	r3, [r2, #0]
 8007d0c:	f043 0302 	orr.w	r3, r3, #2
 8007d10:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ff9a 	bl	8007c60 <prvIPTimerStart>
            xReturn = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e001      	b.n	8007d36 <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4808      	ldr	r0, [pc, #32]	; (8007d70 <FreeRTOS_NetworkDown+0x30>)
 8007d4e:	f000 f95b 	bl	8008008 <xSendEventStructToIPTask>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d003      	beq.n	8007d60 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <FreeRTOS_NetworkDown+0x34>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8007d5e:	e002      	b.n	8007d66 <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <FreeRTOS_NetworkDown+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	08010e20 	.word	0x08010e20
 8007d74:	2001a998 	.word	0x2001a998

08007d78 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e011      	b.n	8007db2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	3b0a      	subs	r3, #10
 8007d9a:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e001      	b.n	8007db2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 8007db2:	68fb      	ldr	r3, [r7, #12]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 8007dc8:	212a      	movs	r1, #42	; 0x2a
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff ffd4 	bl	8007d78 <prvPacketBuffer_to_NetworkBuffer>
 8007dd0:	4603      	mov	r3, r0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <FreeRTOS_ReleaseUDPPayloadBuffer>:
 * @brief Release the UDP payload buffer.
 *
 * @param[in] pvBuffer: Pointer to the UDP buffer that is to be released.
 */
void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
    vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff ffec 	bl	8007dc0 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007de8:	4603      	mov	r3, r0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f006 fba2 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 8007df8:	b5b0      	push	{r4, r5, r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8007e0a:	f000 ff25 	bl	8008c58 <xIPIsNetworkTaskReady>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <FreeRTOS_IPInit+0x34>
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	b672      	cpsid	i
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	b662      	cpsie	i
 8007e28:	623b      	str	r3, [r7, #32]
 8007e2a:	e7fe      	b.n	8007e2a <FreeRTOS_IPInit+0x32>
    configASSERT( xNetworkEventQueue == NULL );
 8007e2c:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <FreeRTOS_IPInit+0x54>
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	b672      	cpsid	i
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	b662      	cpsie	i
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	e7fe      	b.n	8007e4a <FreeRTOS_IPInit+0x52>
    configASSERT( xIPTaskHandle == NULL );
 8007e4c:	4b5c      	ldr	r3, [pc, #368]	; (8007fc0 <FreeRTOS_IPInit+0x1c8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <FreeRTOS_IPInit+0x74>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e7fe      	b.n	8007e6a <FreeRTOS_IPInit+0x72>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2108      	movs	r1, #8
 8007e70:	2041      	movs	r0, #65	; 0x41
 8007e72:	f7fc f98f 	bl	8004194 <xQueueGenericCreate>
 8007e76:	4602      	mov	r2, r0
 8007e78:	4b50      	ldr	r3, [pc, #320]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007e7a:	601a      	str	r2, [r3, #0]
    configASSERT( xNetworkEventQueue != NULL );
 8007e7c:	4b4f      	ldr	r3, [pc, #316]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <FreeRTOS_IPInit+0xa4>
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	b672      	cpsid	i
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	b662      	cpsie	i
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e7fe      	b.n	8007e9a <FreeRTOS_IPInit+0xa2>

    if( xNetworkEventQueue != NULL )
 8007e9c:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8086 	beq.w	8007fb2 <FreeRTOS_IPInit+0x1ba>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8007ea6:	4b45      	ldr	r3, [pc, #276]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4946      	ldr	r1, [pc, #280]	; (8007fc4 <FreeRTOS_IPInit+0x1cc>)
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fc fe67 	bl	8004b80 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8007eb2:	f006 fa31 	bl	800e318 <xNetworkBuffersInitialise>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d172      	bne.n	8007fa2 <FreeRTOS_IPInit+0x1aa>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3303      	adds	r3, #3
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	061a      	lsls	r2, r3, #24
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	4a3a      	ldr	r2, [pc, #232]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007ee0:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	061a      	lsls	r2, r3, #24
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3302      	adds	r3, #2
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	4313      	orrs	r3, r2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	4a30      	ldr	r2, [pc, #192]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f06:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3303      	adds	r3, #3
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	061a      	lsls	r2, r3, #24
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3302      	adds	r3, #2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	4313      	orrs	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7812      	ldrb	r2, [r2, #0]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f2c:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	3303      	adds	r3, #3
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	061a      	lsls	r2, r3, #24
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f52:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8007f54:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f62:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8007f64:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <FreeRTOS_IPInit+0x1d4>)
 8007f66:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <FreeRTOS_IPInit+0x1d0>)
 8007f68:	4614      	mov	r4, r2
 8007f6a:	461d      	mov	r5, r3
 8007f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	6023      	str	r3, [r4, #0]

            #if ipconfigUSE_DHCP == 1
                {
                    /* The IP address is not set until DHCP completes. */
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <FreeRTOS_IPInit+0x1d8>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	615a      	str	r2, [r3, #20]
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8007f7a:	2206      	movs	r2, #6
 8007f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f7e:	4814      	ldr	r0, [pc, #80]	; (8007fd0 <FreeRTOS_IPInit+0x1d8>)
 8007f80:	f008 fa27 	bl	80103d2 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8007f84:	f000 ff78 	bl	8008e78 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <FreeRTOS_IPInit+0x1c8>)
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	2305      	movs	r3, #5
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2300      	movs	r3, #0
 8007f92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007f96:	490f      	ldr	r1, [pc, #60]	; (8007fd4 <FreeRTOS_IPInit+0x1dc>)
 8007f98:	480f      	ldr	r0, [pc, #60]	; (8007fd8 <FreeRTOS_IPInit+0x1e0>)
 8007f9a:	f7fc fea3 	bl	8004ce4 <xTaskCreate>
 8007f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8007fa0:	e007      	b.n	8007fb2 <FreeRTOS_IPInit+0x1ba>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8007fa2:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fc fc9d 	bl	80048e6 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <FreeRTOS_IPInit+0x1c4>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
    }

    return xReturn;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3728      	adds	r7, #40	; 0x28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bdb0      	pop	{r4, r5, r7, pc}
 8007fbc:	2001a968 	.word	0x2001a968
 8007fc0:	2001a99c 	.word	0x2001a99c
 8007fc4:	08010cb4 	.word	0x08010cb4
 8007fc8:	2001a970 	.word	0x2001a970
 8007fcc:	2001a984 	.word	0x2001a984
 8007fd0:	20000010 	.word	0x20000010
 8007fd4:	08010cbc 	.word	0x08010cbc
 8007fd8:	08007959 	.word	0x08007959

08007fdc <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f805 	bl	8008008 <xSendEventStructToIPTask>
 8007ffe:	4603      	mov	r3, r0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8008016:	f000 fe1f 	bl	8008c58 <xIPIsNetworkTaskReady>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d107      	bne.n	8008030 <xSendEventStructToIPTask+0x28>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f993 3000 	ldrsb.w	r3, [r3]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e02d      	b.n	800808c <xSendEventStructToIPTask+0x84>
    }
    else
    {
        xSendMessage = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f993 3000 	ldrsb.w	r3, [r3]
 800803a:	2b06      	cmp	r3, #6
 800803c:	d10e      	bne.n	800805c <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <xSendEventStructToIPTask+0x90>)
 8008040:	7813      	ldrb	r3, [r2, #0]
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8008048:	4b14      	ldr	r3, [pc, #80]	; (800809c <xSendEventStructToIPTask+0x94>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f7fc fc2b 	bl	80048a8 <uxQueueMessagesWaiting>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d012      	beq.n	8008088 <xSendEventStructToIPTask+0x80>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8008062:	f7ff fd55 	bl	8007b10 <xIsCallingFromIPTask>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d104      	bne.n	8008076 <xSendEventStructToIPTask+0x6e>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <xSendEventStructToIPTask+0x94>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	f7fc f91e 	bl	80042c0 <xQueueGenericSend>
 8008084:	6178      	str	r0, [r7, #20]
 8008086:	e001      	b.n	800808c <xSendEventStructToIPTask+0x84>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8008088:	2301      	movs	r3, #1
 800808a:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800808c:	697b      	ldr	r3, [r7, #20]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	2001a9d0 	.word	0x2001a9d0
 800809c:	2001a968 	.word	0x2001a968

080080a0 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 80080a4:	4a12      	ldr	r2, [pc, #72]	; (80080f0 <prvProcessNetworkDownEvent+0x50>)
 80080a6:	7813      	ldrb	r3, [r2, #0]
 80080a8:	f36f 0300 	bfc	r3, #0, #1
 80080ac:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <prvProcessNetworkDownEvent+0x54>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d102      	bne.n	80080bc <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 80080b6:	2001      	movs	r0, #1
 80080b8:	f7f8 fcf7 	bl	8000aaa <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <prvProcessNetworkDownEvent+0x54>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 80080c2:	f7fe ff17 	bl	8006ef4 <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 80080c6:	f006 fb19 	bl	800e6fc <xNetworkInterfaceInitialise>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d006      	beq.n	80080de <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 80080d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80080d4:	f7fc ff3e 	bl	8004f54 <vTaskDelay>
        FreeRTOS_NetworkDown();
 80080d8:	f7ff fe32 	bl	8007d40 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 80080dc:	e005      	b.n	80080ea <prvProcessNetworkDownEvent+0x4a>
                vDHCPProcess( pdTRUE );
 80080de:	2001      	movs	r0, #1
 80080e0:	f7fe ff42 	bl	8006f68 <vDHCPProcess>
                ( void ) xSendEventToIPTask( eDHCPEvent );
 80080e4:	2005      	movs	r0, #5
 80080e6:	f7ff ff79 	bl	8007fdc <xSendEventToIPTask>
}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	2001a9a8 	.word	0x2001a9a8
 80080f4:	2001a9e8 	.word	0x2001a9e8

080080f8 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <vIPNetworkUpCalls+0x20>)
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008102:	2000      	movs	r0, #0
 8008104:	f7f8 fcd1 	bl	8000aaa <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008108:	f242 7110 	movw	r1, #10000	; 0x2710
 800810c:	4803      	ldr	r0, [pc, #12]	; (800811c <vIPNetworkUpCalls+0x24>)
 800810e:	f7ff fdcb 	bl	8007ca8 <prvIPTimerReload>
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2001a9a4 	.word	0x2001a9a4
 800811c:	2001a9a8 	.word	0x2001a9a8

08008120 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8008128:	2300      	movs	r3, #0
 800812a:	75fb      	strb	r3, [r7, #23]

    configASSERT( pxNetworkBuffer != NULL );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <prvProcessEthernetPacket+0x2a>
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e7fe      	b.n	8008148 <prvProcessEthernetPacket+0x28>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b0d      	cmp	r3, #13
 8008150:	d939      	bls.n	80081c6 <prvProcessEthernetPacket+0xa6>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8008152:	2301      	movs	r3, #1
 8008154:	75fb      	strb	r3, [r7, #23]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fb83 	bl	8007866 <vCastConstPointerTo_EthernetHeader_t>
 8008160:	6138      	str	r0, [r7, #16]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	899b      	ldrh	r3, [r3, #12]
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b08      	cmp	r3, #8
 800816a:	d015      	beq.n	8008198 <prvProcessEthernetPacket+0x78>
 800816c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8008170:	d126      	bne.n	80081c0 <prvProcessEthernetPacket+0xa0>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	2b29      	cmp	r3, #41	; 0x29
 8008178:	d90b      	bls.n	8008192 <prvProcessEthernetPacket+0x72>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fb7c 	bl	800787c <vCastPointerTo_ARPPacket_t>
 8008184:	4603      	mov	r3, r0
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fb54 	bl	8006834 <eARPProcessPacket>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8008190:	e01a      	b.n	80081c8 <prvProcessEthernetPacket+0xa8>
                        eReturned = eReleaseBuffer;
 8008192:	2300      	movs	r3, #0
 8008194:	75fb      	strb	r3, [r7, #23]
                    break;
 8008196:	e017      	b.n	80081c8 <prvProcessEthernetPacket+0xa8>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	2b21      	cmp	r3, #33	; 0x21
 800819e:	d90c      	bls.n	80081ba <prvProcessEthernetPacket+0x9a>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fb74 	bl	8007892 <vCastPointerTo_IPPacket_t>
 80081aa:	4603      	mov	r3, r0
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f8fc 	bl	80083ac <prvProcessIPPacket>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80081b8:	e006      	b.n	80081c8 <prvProcessEthernetPacket+0xa8>
                        eReturned = eReleaseBuffer;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
                    break;
 80081be:	e003      	b.n	80081c8 <prvProcessEthernetPacket+0xa8>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
                    break;
 80081c4:	e000      	b.n	80081c8 <prvProcessEthernetPacket+0xa8>
            }
        }
 80081c6:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d002      	beq.n	80081d4 <prvProcessEthernetPacket+0xb4>
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d009      	beq.n	80081e6 <prvProcessEthernetPacket+0xc6>
 80081d2:	e004      	b.n	80081de <prvProcessEthernetPacket+0xbe>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80081d4:	2101      	movs	r1, #1
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fce2 	bl	8008ba0 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80081dc:	e004      	b.n	80081e8 <prvProcessEthernetPacket+0xc8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f006 f9a8 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
            break;
 80081e4:	e000      	b.n	80081e8 <prvProcessEthernetPacket+0xc8>
            break;
 80081e6:	bf00      	nop
    }
}
 80081e8:	bf00      	nop
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	061a      	lsls	r2, r3, #24
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	0e1b      	lsrs	r3, r3, #24
 8008214:	4313      	orrs	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800821e:	d306      	bcc.n	800822e <xIsIPv4Multicast+0x3e>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8008226:	d202      	bcs.n	800822e <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e001      	b.n	8008232 <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	061a      	lsls	r2, r3, #24
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	0e1b      	lsrs	r3, r3, #24
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	225e      	movs	r2, #94	; 0x5e
 800827a:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	b2da      	uxtb	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	715a      	strb	r2, [r3, #5]
}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	330e      	adds	r3, #14
 80082c2:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	88db      	ldrh	r3, [r3, #6]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	f64f 730f 	movw	r3, #65295	; 0xff0f
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <prvAllowIPPacket+0x38>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082e2:	e020      	b.n	8008326 <prvAllowIPPacket+0x7a>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b44      	cmp	r3, #68	; 0x44
 80082ea:	d903      	bls.n	80082f4 <prvAllowIPPacket+0x48>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80082f0:	2b4f      	cmp	r3, #79	; 0x4f
 80082f2:	d903      	bls.n	80082fc <prvAllowIPPacket+0x50>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082fa:	e014      	b.n	8008326 <prvAllowIPPacket+0x7a>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 80082fc:	4b28      	ldr	r3, [pc, #160]	; (80083a0 <prvAllowIPPacket+0xf4>)
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	429a      	cmp	r2, r3
 8008304:	d00f      	beq.n	8008326 <prvAllowIPPacket+0x7a>
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d00b      	beq.n	8008326 <prvAllowIPPacket+0x7a>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800830e:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <prvAllowIPPacket+0xf8>)
 8008310:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	429a      	cmp	r2, r3
 8008316:	d006      	beq.n	8008326 <prvAllowIPPacket+0x7a>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8008318:	4b21      	ldr	r3, [pc, #132]	; (80083a0 <prvAllowIPPacket+0xf4>)
 800831a:	695b      	ldr	r3, [r3, #20]
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <prvAllowIPPacket+0x7a>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8008326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10d      	bne.n	800834a <prvAllowIPPacket+0x9e>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f000 f99d 	bl	8008678 <xCheckSizeFields>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d002      	beq.n	800834a <prvAllowIPPacket+0x9e>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 8008344:	2300      	movs	r3, #0
 8008346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 800834a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800834e:	2b01      	cmp	r3, #1
 8008350:	d11f      	bne.n	8008392 <prvAllowIPPacket+0xe6>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	7ddb      	ldrb	r3, [r3, #23]
 8008356:	2b11      	cmp	r3, #17
 8008358:	d11b      	bne.n	8008392 <prvAllowIPPacket+0xe6>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3b14      	subs	r3, #20
 8008362:	4413      	add	r3, r2
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fac0 	bl	80078ea <vCastPointerTo_ProtocolPacket_t>
 800836a:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3328      	adds	r3, #40	; 0x28
 8008370:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <prvAllowIPPacket+0xe6>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <prvAllowIPPacket+0xfc>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b04      	cmp	r3, #4
 8008380:	dc04      	bgt.n	800838c <prvAllowIPPacket+0xe0>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <prvAllowIPPacket+0xfc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <prvAllowIPPacket+0xfc>)
 800838a:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 800838c:	2300      	movs	r3, #0
 800838e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8008392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008396:	4618      	mov	r0, r3
 8008398:	3728      	adds	r7, #40	; 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000010 	.word	0x20000010
 80083a4:	2001a970 	.word	0x2001a970
 80083a8:	2001a9ec 	.word	0x2001a9ec

080083ac <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b090      	sub	sp, #64	; 0x40
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	330e      	adds	r3, #14
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	3b0e      	subs	r3, #14
 80083d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d802      	bhi.n	80083de <prvProcessIPPacket+0x32>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2b13      	cmp	r3, #19
 80083dc:	d803      	bhi.n	80083e6 <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80083e4:	e0cb      	b.n	800857e <prvProcessIPPacket+0x1d2>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7ddb      	ldrb	r3, [r3, #23]
 80083ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 80083ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff ff5a 	bl	80082ac <prvAllowIPPacket>
 80083f8:	4603      	mov	r3, r0
 80083fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 80083fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008402:	2b01      	cmp	r3, #1
 8008404:	f040 80b8 	bne.w	8008578 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2b14      	cmp	r3, #20
 800840c:	d927      	bls.n	800845e <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	3b14      	subs	r3, #20
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	330e      	adds	r3, #14
 800841c:	4413      	add	r3, r2
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	3322      	adds	r3, #34	; 0x22
 8008426:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	69da      	ldr	r2, [r3, #28]
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	3b22      	subs	r3, #34	; 0x22
 8008432:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008438:	6a38      	ldr	r0, [r7, #32]
 800843a:	f007 ffd5 	bl	80103e8 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f023 030f 	bic.w	r3, r3, #15
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f043 0305 	orr.w	r3, r3, #5
 8008458:	b2da      	uxtb	r2, r3
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 800845e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8088 	beq.w	8008578 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8008468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800846c:	2b11      	cmp	r3, #17
 800846e:	d007      	beq.n	8008480 <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	1d9a      	adds	r2, r3, #6
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f7fe fa6c 	bl	8006958 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 8008480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008484:	2b06      	cmp	r3, #6
 8008486:	d068      	beq.n	800855a <prvProcessIPPacket+0x1ae>
 8008488:	2b11      	cmp	r3, #17
 800848a:	d01d      	beq.n	80084c8 <prvProcessIPPacket+0x11c>
 800848c:	2b01      	cmp	r3, #1
 800848e:	d000      	beq.n	8008492 <prvProcessIPPacket+0xe6>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 8008490:	e075      	b.n	800857e <prvProcessIPPacket+0x1d2>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	2b29      	cmp	r3, #41	; 0x29
 8008498:	d912      	bls.n	80084c0 <prvProcessIPPacket+0x114>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff fa0d 	bl	80078be <vCastPointerTo_ICMPPacket_t>
 80084a4:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	4b38      	ldr	r3, [pc, #224]	; (800858c <prvProcessIPPacket+0x1e0>)
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d164      	bne.n	800857c <prvProcessIPPacket+0x1d0>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 80084b2:	68b8      	ldr	r0, [r7, #8]
 80084b4:	f000 f8c6 	bl	8008644 <prvProcessICMPPacket>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 80084be:	e05d      	b.n	800857c <prvProcessIPPacket+0x1d0>
                                eReturn = eReleaseBuffer;
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 80084c6:	e059      	b.n	800857c <prvProcessIPPacket+0x1d0>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fa01 	bl	80078d4 <vCastConstPointerTo_UDPPacket_t>
 80084d2:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084d8:	b29b      	uxth	r3, r3
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	b21a      	sxth	r2, r3
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	0a1b      	lsrs	r3, r3, #8
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	4313      	orrs	r3, r2
 80084ec:	b21b      	sxth	r3, r3
 80084ee:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	2b29      	cmp	r3, #41	; 0x29
 80084f6:	d92a      	bls.n	800854e <prvProcessIPPacket+0x1a2>
 80084f8:	8afb      	ldrh	r3, [r7, #22]
 80084fa:	2b07      	cmp	r3, #7
 80084fc:	d927      	bls.n	800854e <prvProcessIPPacket+0x1a2>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	3b2a      	subs	r3, #42	; 0x2a
 8008504:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8008506:	8afb      	ldrh	r3, [r7, #22]
 8008508:	3b08      	subs	r3, #8
 800850a:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d904      	bls.n	800851e <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008522:	b29a      	uxth	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008536:	b29b      	uxth	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	6838      	ldr	r0, [r7, #0]
 800853c:	f005 fe72 	bl	800e224 <xProcessReceivedUDPPacket>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d107      	bne.n	8008556 <prvProcessIPPacket+0x1aa>
                                   eReturn = eFrameConsumed;
 8008546:	2303      	movs	r3, #3
 8008548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 800854c:	e003      	b.n	8008556 <prvProcessIPPacket+0x1aa>
                               eReturn = eReleaseBuffer;
 800854e:	2300      	movs	r3, #0
 8008550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 8008554:	e013      	b.n	800857e <prvProcessIPPacket+0x1d2>
                           {
 8008556:	bf00      	nop
                       break;
 8008558:	e011      	b.n	800857e <prvProcessIPPacket+0x1d2>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800855a:	6838      	ldr	r0, [r7, #0]
 800855c:	f004 fa58 	bl	800ca10 <xProcessReceivedTCPPacket>
 8008560:	4603      	mov	r3, r0
 8008562:	2b01      	cmp	r3, #1
 8008564:	d102      	bne.n	800856c <prvProcessIPPacket+0x1c0>
                                    eReturn = eFrameConsumed;
 8008566:	2303      	movs	r3, #3
 8008568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <prvProcessIPPacket+0x1e4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	4a07      	ldr	r2, [pc, #28]	; (8008590 <prvProcessIPPacket+0x1e4>)
 8008574:	6013      	str	r3, [r2, #0]
                                break;
 8008576:	e002      	b.n	800857e <prvProcessIPPacket+0x1d2>
                }
            }
 8008578:	bf00      	nop
 800857a:	e000      	b.n	800857e <prvProcessIPPacket+0x1d2>
                        break;
 800857c:	bf00      	nop
        }
    }

    return eReturn;
 800857e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008582:	4618      	mov	r0, r3
 8008584:	3740      	adds	r7, #64	; 0x40
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000010 	.word	0x20000010
 8008590:	2001a9a0 	.word	0x2001a9a0

08008594 <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3322      	adds	r3, #34	; 0x22
 80085a0:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	330e      	adds	r3, #14
 80085a6:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80085b6:	4b22      	ldr	r3, [pc, #136]	; (8008640 <prvProcessICMPEchoRequest+0xac>)
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 80085be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085c2:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	89fb      	ldrh	r3, [r7, #14]
 80085cc:	43db      	mvns	r3, r3
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	b299      	uxth	r1, r3
 80085d4:	89f8      	ldrh	r0, [r7, #14]
 80085d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085da:	1a1b      	subs	r3, r3, r0
 80085dc:	0a1b      	lsrs	r3, r3, #8
 80085de:	b29b      	uxth	r3, r3
 80085e0:	430b      	orrs	r3, r1
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d312      	bcc.n	800860e <prvProcessICMPEchoRequest+0x7a>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	885b      	ldrh	r3, [r3, #2]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	89fb      	ldrh	r3, [r7, #14]
 80085f0:	3301      	adds	r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	b299      	uxth	r1, r3
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	3301      	adds	r3, #1
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	b29b      	uxth	r3, r3
 8008600:	430b      	orrs	r3, r1
 8008602:	b29b      	uxth	r3, r3
 8008604:	4413      	add	r3, r2
 8008606:	b29a      	uxth	r2, r3
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	805a      	strh	r2, [r3, #2]
 800860c:	e010      	b.n	8008630 <prvProcessICMPEchoRequest+0x9c>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	b29a      	uxth	r2, r3
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	b219      	sxth	r1, r3
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	0a1b      	lsrs	r3, r3, #8
 800861e:	b29b      	uxth	r3, r3
 8008620:	b21b      	sxth	r3, r3
 8008622:	430b      	orrs	r3, r1
 8008624:	b21b      	sxth	r3, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	4413      	add	r3, r2
 800862a:	b29a      	uxth	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 8008630:	2302      	movs	r3, #2
    }
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000010 	.word	0x20000010

08008644 <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <prvProcessICMPPacket+0x28>
 800865a:	2b08      	cmp	r3, #8
 800865c:	d000      	beq.n	8008660 <prvProcessICMPPacket+0x1c>
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;

            default:
                /* Only ICMP echo packets are handled. */
                break;
 800865e:	e006      	b.n	800866e <prvProcessICMPPacket+0x2a>
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff97 	bl	8008594 <prvProcessICMPEchoRequest>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
                break;
 800866a:	e000      	b.n	800866e <prvProcessICMPPacket+0x2a>
                break;
 800866c:	bf00      	nop
        }

        return eReturn;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
    }
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 8008678:	b580      	push	{r7, lr}
 800867a:	b08c      	sub	sp, #48	; 0x30
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b21      	cmp	r3, #33	; 0x21
 800868e:	d802      	bhi.n	8008696 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8008690:	2301      	movs	r3, #1
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008694:	e07a      	b.n	800878c <xCheckSizeFields+0x114>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff f906 	bl	80078a8 <vCastConstPointerTo_IPPacket_t>
 800869c:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	7b9b      	ldrb	r3, [r3, #14]
 80086a2:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80086a4:	8bfb      	ldrh	r3, [r7, #30]
 80086a6:	2b44      	cmp	r3, #68	; 0x44
 80086a8:	d902      	bls.n	80086b0 <xCheckSizeFields+0x38>
 80086aa:	8bfb      	ldrh	r3, [r7, #30]
 80086ac:	2b4f      	cmp	r3, #79	; 0x4f
 80086ae:	d902      	bls.n	80086b6 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 80086b0:	2302      	movs	r3, #2
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80086b4:	e06a      	b.n	800878c <xCheckSizeFields+0x114>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 80086b6:	8bfb      	ldrh	r3, [r7, #30]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80086c0:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 80086c2:	8bfb      	ldrh	r3, [r7, #30]
 80086c4:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	330e      	adds	r3, #14
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d202      	bcs.n	80086d6 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 80086d0:	2303      	movs	r3, #3
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80086d4:	e05a      	b.n	800878c <xCheckSizeFields+0x114>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	7c1a      	ldrb	r2, [r3, #16]
 80086da:	7c5b      	ldrb	r3, [r3, #17]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	4313      	orrs	r3, r2
 80086e0:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 80086e2:	8afb      	ldrh	r3, [r7, #22]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	b21a      	sxth	r2, r3
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	4313      	orrs	r3, r2
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 80086f6:	8afb      	ldrh	r3, [r7, #22]
 80086f8:	330e      	adds	r3, #14
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d202      	bcs.n	8008706 <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8008700:	2304      	movs	r3, #4
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008704:	e042      	b.n	800878c <xCheckSizeFields+0x114>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	7ddb      	ldrb	r3, [r3, #23]
 800870a:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	3b14      	subs	r3, #20
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4413      	add	r3, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff f8f3 	bl	8007900 <vCastConstPointerTo_ProtocolPacket_t>
 800871a:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800871c:	7d7b      	ldrb	r3, [r7, #21]
 800871e:	2b11      	cmp	r3, #17
 8008720:	d103      	bne.n	800872a <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	3316      	adds	r3, #22
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008728:	e013      	b.n	8008752 <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800872a:	7d7b      	ldrb	r3, [r7, #21]
 800872c:	2b06      	cmp	r3, #6
 800872e:	d103      	bne.n	8008738 <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	3322      	adds	r3, #34	; 0x22
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008736:	e00c      	b.n	8008752 <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8008738:	7d7b      	ldrb	r3, [r7, #21]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d002      	beq.n	8008744 <xCheckSizeFields+0xcc>
 800873e:	7d7b      	ldrb	r3, [r7, #21]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d103      	bne.n	800874c <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	3316      	adds	r3, #22
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874a:	e002      	b.n	8008752 <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800874c:	2305      	movs	r3, #5
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008750:	e01c      	b.n	800878c <xCheckSizeFields+0x114>
            }

            if( uxBufferLength < uxMinimumLength )
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	429a      	cmp	r2, r3
 8008758:	d202      	bcs.n	8008760 <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800875a:	2306      	movs	r3, #6
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800875e:	e015      	b.n	800878c <xCheckSizeFields+0x114>
            }

            uxLength = ( size_t ) usLength;
 8008760:	8afb      	ldrh	r3, [r7, #22]
 8008762:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	b29b      	uxth	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b07      	cmp	r3, #7
 8008774:	d905      	bls.n	8008782 <xCheckSizeFields+0x10a>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	429a      	cmp	r2, r3
 8008780:	d902      	bls.n	8008788 <xCheckSizeFields+0x110>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8008782:	2307      	movs	r3, #7
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8008786:	e001      	b.n	800878c <xCheckSizeFields+0x114>
            }

            xResult = pdPASS;
 8008788:	2301      	movs	r3, #1
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800878e:	4618      	mov	r0, r3
 8008790:	3730      	adds	r7, #48	; 0x30
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <usGenerateProtocolChecksum>:
 *         When xOutgoingPacket is true: either ipINVALID_LENGTH or ipCORRECT_CRC.
 */
uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer,
                                     size_t uxBufferLength,
                                     BaseType_t xOutgoingPacket )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	; 0x38
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
        const char * pcType;
    #endif
    uint16_t usLength;
    uint16_t ucVersionHeaderLength;
    DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 80087a4:	2300      	movs	r3, #0
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Introduce a do-while loop to allow use of break statements.
     * Note: MISRA prohibits use of 'goto', thus replaced with breaks. */
    do
    {
        /* Check for minimum packet size. */
        if( uxBufferLength < sizeof( IPPacket_t ) )
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b21      	cmp	r3, #33	; 0x21
 80087ac:	d805      	bhi.n	80087ba <usGenerateProtocolChecksum+0x22>
        {
            usChecksum = ipINVALID_LENGTH;
 80087ae:	f241 2334 	movw	r3, #4660	; 0x1234
 80087b2:	86fb      	strh	r3, [r7, #54]	; 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 80087b4:	2301      	movs	r3, #1
 80087b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80087b8:	e105      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        }

        /* Parse the packet length. */
        pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff f874 	bl	80078a8 <vCastConstPointerTo_IPPacket_t>
 80087c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header
         * Length field contains the length of the internet header in 32-bit words. */
        ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	7b9b      	ldrb	r3, [r3, #14]
 80087c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 80087c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80087d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 80087d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087d6:	623b      	str	r3, [r7, #32]

        /* Check for minimum packet size. */
        if( uxBufferLength < ( sizeof( IPPacket_t ) + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) ) )
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	330e      	adds	r3, #14
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d205      	bcs.n	80087ee <usGenerateProtocolChecksum+0x56>
        {
            usChecksum = ipINVALID_LENGTH;
 80087e2:	f241 2334 	movw	r3, #4660	; 0x1234
 80087e6:	86fb      	strh	r3, [r7, #54]	; 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 80087e8:	2302      	movs	r3, #2
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80087ec:	e0eb      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	7c1a      	ldrb	r2, [r3, #16]
 80087f2:	7c5b      	ldrb	r3, [r3, #17]
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	4313      	orrs	r3, r2
 80087f8:	83fb      	strh	r3, [r7, #30]
        usLength = FreeRTOS_ntohs( usLength );
 80087fa:	8bfb      	ldrh	r3, [r7, #30]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	b21a      	sxth	r2, r3
 8008800:	8bfb      	ldrh	r3, [r7, #30]
 8008802:	0a1b      	lsrs	r3, r3, #8
 8008804:	b29b      	uxth	r3, r3
 8008806:	b21b      	sxth	r3, r3
 8008808:	4313      	orrs	r3, r2
 800880a:	b21b      	sxth	r3, r3
 800880c:	83fb      	strh	r3, [r7, #30]

        if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800880e:	8bfb      	ldrh	r3, [r7, #30]
 8008810:	330e      	adds	r3, #14
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	429a      	cmp	r2, r3
 8008816:	d205      	bcs.n	8008824 <usGenerateProtocolChecksum+0x8c>
        {
            usChecksum = ipINVALID_LENGTH;
 8008818:	f241 2334 	movw	r3, #4660	; 0x1234
 800881c:	86fb      	strh	r3, [r7, #54]	; 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800881e:	2303      	movs	r3, #3
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8008822:	e0d0      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        }

        /* Identify the next protocol. */
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	7ddb      	ldrb	r3, [r3, #23]
 8008828:	777b      	strb	r3, [r7, #29]
        /* N.B., if this IP packet header includes Options, then the following
         * assignment results in a pointer into the protocol packet with the Ethernet
         * and IP headers incorrectly aligned. However, either way, the "third"
         * protocol (Layer 3 or 4) header will be aligned, which is the convenience
         * of this calculation. */
        pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	3b14      	subs	r3, #20
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f864 	bl	8007900 <vCastConstPointerTo_ProtocolPacket_t>
 8008838:	61b8      	str	r0, [r7, #24]

        /* Switch on the Layer 3/4 protocol. */
        if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800883a:	7f7b      	ldrb	r3, [r7, #29]
 800883c:	2b11      	cmp	r3, #17
 800883e:	d10e      	bne.n	800885e <usGenerateProtocolChecksum+0xc6>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	3316      	adds	r3, #22
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	429a      	cmp	r2, r3
 8008848:	d205      	bcs.n	8008856 <usGenerateProtocolChecksum+0xbe>
            {
                usChecksum = ipINVALID_LENGTH;
 800884a:	f241 2334 	movw	r3, #4660	; 0x1234
 800884e:	86fb      	strh	r3, [r7, #54]	; 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8008850:	2304      	movs	r3, #4
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8008854:	e0b7      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	3328      	adds	r3, #40	; 0x28
 800885a:	633b      	str	r3, [r7, #48]	; 0x30
 800885c:	e02c      	b.n	80088b8 <usGenerateProtocolChecksum+0x120>
                {
                    pcType = "UDP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800885e:	7f7b      	ldrb	r3, [r7, #29]
 8008860:	2b06      	cmp	r3, #6
 8008862:	d10e      	bne.n	8008882 <usGenerateProtocolChecksum+0xea>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	3322      	adds	r3, #34	; 0x22
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	429a      	cmp	r2, r3
 800886c:	d205      	bcs.n	800887a <usGenerateProtocolChecksum+0xe2>
            {
                usChecksum = ipINVALID_LENGTH;
 800886e:	f241 2334 	movw	r3, #4660	; 0x1234
 8008872:	86fb      	strh	r3, [r7, #54]	; 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8008874:	2305      	movs	r3, #5
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8008878:	e0a5      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	3332      	adds	r3, #50	; 0x32
 800887e:	633b      	str	r3, [r7, #48]	; 0x30
 8008880:	e01a      	b.n	80088b8 <usGenerateProtocolChecksum+0x120>
                {
                    pcType = "TCP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8008882:	7f7b      	ldrb	r3, [r7, #29]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d002      	beq.n	800888e <usGenerateProtocolChecksum+0xf6>
 8008888:	7f7b      	ldrb	r3, [r7, #29]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d10e      	bne.n	80088ac <usGenerateProtocolChecksum+0x114>
                 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	3316      	adds	r3, #22
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	d205      	bcs.n	80088a4 <usGenerateProtocolChecksum+0x10c>
            {
                usChecksum = ipINVALID_LENGTH;
 8008898:	f241 2334 	movw	r3, #4660	; 0x1234
 800889c:	86fb      	strh	r3, [r7, #54]	; 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800889e:	2306      	movs	r3, #6
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 80088a2:	e090      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	3324      	adds	r3, #36	; 0x24
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30
 80088aa:	e005      	b.n	80088b8 <usGenerateProtocolChecksum+0x120>
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else
        {
            /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
            usChecksum = ipUNHANDLED_PROTOCOL;
 80088ac:	f244 3321 	movw	r3, #17185	; 0x4321
 80088b0:	86fb      	strh	r3, [r7, #54]	; 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 80088b2:	2307      	movs	r3, #7
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80088b6:	e086      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        }

        /* The protocol and checksum field have been identified. Check the direction
         * of the packet. */
        if( xOutgoingPacket != pdFALSE )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <usGenerateProtocolChecksum+0x12e>
        {
            /* This is an outgoing packet. Before calculating the checksum, set it
             * to zero. */
            *( pusChecksum ) = 0U;
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2200      	movs	r2, #0
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	e014      	b.n	80088f0 <usGenerateProtocolChecksum+0x158>
        }
        else if( ( *pusChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d110      	bne.n	80088f0 <usGenerateProtocolChecksum+0x158>
 80088ce:	7f7b      	ldrb	r3, [r7, #29]
 80088d0:	2b11      	cmp	r3, #17
 80088d2:	d10d      	bne.n	80088f0 <usGenerateProtocolChecksum+0x158>
        {
            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Sender hasn't set the checksum, drop the packet because
                     * ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is not set. */
                    usChecksum = ipWRONG_CRC;
 80088d4:	2300      	movs	r3, #0
 80088d6:	86fb      	strh	r3, [r7, #54]	; 0x36
                    #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            if( xCount < 5 )
 80088d8:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <usGenerateProtocolChecksum+0x238>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	dc04      	bgt.n	80088ea <usGenerateProtocolChecksum+0x152>
                            {
                                FreeRTOS_printf( ( "usGenerateProtocolChecksum: UDP packet from %xip without CRC dropped\n",
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 80088e0:	4b3b      	ldr	r3, [pc, #236]	; (80089d0 <usGenerateProtocolChecksum+0x238>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	4a3a      	ldr	r2, [pc, #232]	; (80089d0 <usGenerateProtocolChecksum+0x238>)
 80088e8:	6013      	str	r3, [r2, #0]
                {
                    /* Sender hasn't set the checksum, no use to calculate it. */
                    usChecksum = ipCORRECT_CRC;
                }
            #endif /* if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 ) */
            DEBUG_SET_TRACE_VARIABLE( xLocation, 8 );
 80088ea:	2308      	movs	r3, #8
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80088ee:	e06a      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        else
        {
            /* Other incoming packet than UDP. */
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	7c1a      	ldrb	r2, [r3, #16]
 80088f4:	7c5b      	ldrb	r3, [r3, #17]
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	4313      	orrs	r3, r2
 80088fa:	83fb      	strh	r3, [r7, #30]
        usLength = FreeRTOS_ntohs( usLength );
 80088fc:	8bfb      	ldrh	r3, [r7, #30]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	b21a      	sxth	r2, r3
 8008902:	8bfb      	ldrh	r3, [r7, #30]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	b29b      	uxth	r3, r3
 8008908:	b21b      	sxth	r3, r3
 800890a:	4313      	orrs	r3, r2
 800890c:	b21b      	sxth	r3, r3
 800890e:	83fb      	strh	r3, [r7, #30]
        ulLength = ( uint32_t ) usLength;
 8008910:	8bfb      	ldrh	r3, [r7, #30]
 8008912:	617b      	str	r3, [r7, #20]
        ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	b29b      	uxth	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	617b      	str	r3, [r7, #20]

        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b07      	cmp	r3, #7
 8008924:	d905      	bls.n	8008932 <usGenerateProtocolChecksum+0x19a>
            ( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	429a      	cmp	r2, r3
 8008930:	d905      	bls.n	800893e <usGenerateProtocolChecksum+0x1a6>

            /* Again, in a 16-bit return value there is no space to indicate an
             * error.  For incoming packets, 0x1234 will cause dropping of the packet.
             * For outgoing packets, there is a serious problem with the
             * format/length */
            usChecksum = ipINVALID_LENGTH;
 8008932:	f241 2334 	movw	r3, #4660	; 0x1234
 8008936:	86fb      	strh	r3, [r7, #54]	; 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 9 );
 8008938:	2309      	movs	r3, #9
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800893c:	e043      	b.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        }

        if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 800893e:	7f7b      	ldrb	r3, [r7, #29]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d80a      	bhi.n	800895a <usGenerateProtocolChecksum+0x1c2>
        {
            /* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( 0U,
                                                ( const uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	3322      	adds	r3, #34	; 0x22
                         ( ~usGenerateChecksum( 0U,
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4619      	mov	r1, r3
 800894c:	2000      	movs	r0, #0
 800894e:	f000 f841 	bl	80089d4 <usGenerateChecksum>
 8008952:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 8008954:	43db      	mvns	r3, r3
 8008956:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008958:	e012      	b.n	8008980 <usGenerateProtocolChecksum+0x1e8>
        }
        else
        {
            /* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
             * fields */
            usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	b29a      	uxth	r2, r3
 800895e:	7f7b      	ldrb	r3, [r7, #29]
 8008960:	b29b      	uxth	r3, r3
 8008962:	4413      	add	r3, r2
 8008964:	86fb      	strh	r3, [r7, #54]	; 0x36

            /* And then continue at the IPv4 source and destination addresses. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( usChecksum,
                                                ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	f103 011a 	add.w	r1, r3, #26
                                                ( size_t ) ( ( 2U * ipSIZE_OF_IPv4_ADDRESS ) + ulLength ) ) );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f103 0208 	add.w	r2, r3, #8
                         ( ~usGenerateChecksum( usChecksum,
 8008972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f82d 	bl	80089d4 <usGenerateChecksum>
 800897a:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 800897c:	43db      	mvns	r3, r3
 800897e:	86fb      	strh	r3, [r7, #54]	; 0x36
            /* Sum TCP header and data. */
        }

        if( xOutgoingPacket == pdFALSE )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <usGenerateProtocolChecksum+0x1fc>
        {
            /* This is in incoming packet. If the CRC is correct, it should be zero. */
            if( usChecksum == 0U )
 8008986:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10c      	bne.n	80089a6 <usGenerateProtocolChecksum+0x20e>
            {
                usChecksum = ( uint16_t ) ipCORRECT_CRC;
 800898c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008990:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008992:	e008      	b.n	80089a6 <usGenerateProtocolChecksum+0x20e>
            }
        }
        else
        {
            if( ( usChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 8008994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <usGenerateProtocolChecksum+0x20e>
 800899a:	7f7b      	ldrb	r3, [r7, #29]
 800899c:	2b11      	cmp	r3, #17
 800899e:	d102      	bne.n	80089a6 <usGenerateProtocolChecksum+0x20e>
                            FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

                usChecksum = ( uint16_t ) 0xffffu;
 80089a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089a4:	86fb      	strh	r3, [r7, #54]	; 0x36
            }
        }

        usChecksum = FreeRTOS_htons( usChecksum );
 80089a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	b21a      	sxth	r2, r3
 80089ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	b21b      	sxth	r3, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b21b      	sxth	r3, r3
 80089b8:	86fb      	strh	r3, [r7, #54]	; 0x36

        if( xOutgoingPacket != pdFALSE )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <usGenerateProtocolChecksum+0x22e>
        {
            *( pusChecksum ) = usChecksum;
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80089c4:	801a      	strh	r2, [r3, #0]
    {
        /* NOP if ipconfigHAS_PRINTF != 0 */
        FreeRTOS_printf( ( "CRC error: %04x location %ld\n", usChecksum, xLocation ) );
    }

    return usChecksum;
 80089c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3738      	adds	r7, #56	; 0x38
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	2001a9f0 	.word	0x2001a9f0

080089d4 <usGenerateChecksum>:
 *         words in the header
 */
uint16_t usGenerateChecksum( uint16_t usSum,
                             const uint8_t * pucNextData,
                             size_t uxByteCount )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b08f      	sub	sp, #60	; 0x3c
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	81fb      	strh	r3, [r7, #14]
 * aid though to optimise the calculations. */
    xUnion32 xSum2, xSum, xTerm;
    xUnionPtr xSource;
    xUnionPtr xLastSource;
    uintptr_t uxAlignBits;
    uint32_t ulCarry = 0UL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t usTemp;
    size_t uxDataLengthBytes = uxByteCount;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Small MCUs often spend up to 30% of the time doing checksum calculations
    * This function is optimised for 32-bit CPUs; Each time it will try to fetch
    * 32-bits, sums it with an accumulator and counts the number of carries. */

    /* Swap the input (little endian platform only). */
    usTemp = FreeRTOS_ntohs( usSum );
 80089ea:	89fb      	ldrh	r3, [r7, #14]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	0a1b      	lsrs	r3, r3, #8
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	b21b      	sxth	r3, r3
 80089f8:	4313      	orrs	r3, r2
 80089fa:	b21b      	sxth	r3, r3
 80089fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    xSum.u32 = ( uint32_t ) usTemp;
 80089fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a00:	623b      	str	r3, [r7, #32]
    xTerm.u32 = 0UL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]

    xSource.u8ptr = ipPOINTER_CAST( uint8_t *, pucNextData );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	61bb      	str	r3, [r7, #24]
    uxAlignBits = ( ( ( uintptr_t ) pucNextData ) & 0x03U );
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
    /*
     * If pucNextData is non-aligned then the checksum is starting at an
     * odd position and we need to make sure the usSum value now in xSum is
     * as if it had been "aligned" in the same way.
     */
    if( ( uxAlignBits & 1UL ) != 0U )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <usGenerateChecksum+0x58>
    {
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	0a1b      	lsrs	r3, r3, #8
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	623b      	str	r3, [r7, #32]
    }

    /* If byte (8-bit) aligned... */
    if( ( ( uxAlignBits & 1UL ) != 0UL ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <usGenerateChecksum+0x7a>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <usGenerateChecksum+0x7a>
    {
        xTerm.u8[ 1 ] = *( xSource.u8ptr );
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	777b      	strb	r3, [r7, #29]
        xSource.u8ptr++;
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3301      	adds	r3, #1
 8008a46:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes--;
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Now xSource is word (16-bit) aligned. */
    }

    /* If half-word (16-bit) aligned... */
    if( ( ( uxAlignBits == 1U ) || ( uxAlignBits == 2U ) ) && ( uxDataLengthBytes >= 2U ) )
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d002      	beq.n	8008a5a <usGenerateChecksum+0x86>
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d10d      	bne.n	8008a76 <usGenerateChecksum+0xa2>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d90a      	bls.n	8008a76 <usGenerateChecksum+0xa2>
    {
        xSum.u32 += *( xSource.u16ptr );
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	8812      	ldrh	r2, [r2, #0]
 8008a66:	4413      	add	r3, r2
 8008a68:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes -= 2U;
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	3b02      	subs	r3, #2
 8008a74:	633b      	str	r3, [r7, #48]	; 0x30
        /* Now xSource is word (32-bit) aligned. */
    }

    /* Word (32-bit) aligned, do the most part. */
    xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4U ) ) - 3U;
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	3b0c      	subs	r3, #12
 8008a80:	4413      	add	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]

    /* In this loop, four 32-bit additions will be done, in total 16 bytes.
     * Indexing with constants (0,1,2,3) gives faster code than using
     * post-increments. */
    while( xSource.u32ptr < xLastSource.u32ptr )
 8008a84:	e035      	b.n	8008af2 <usGenerateChecksum+0x11e>
    {
        /* Use a secondary Sum2, just to see if the addition produced an
         * overflow. */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 8008a86:	6a3a      	ldr	r2, [r7, #32]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24

        if( xSum2.u32 < xSum.u32 )
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d202      	bcs.n	8008a9e <usGenerateChecksum+0xca>
        {
            ulCarry++;
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* Now add the secondary sum to the major sum, and remember if there was
         * a carry. */
        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 8008aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d902      	bls.n	8008ab8 <usGenerateChecksum+0xe4>
        {
            ulCarry++;
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* And do the same trick once again for indexes 2 and 3 */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 8008ab8:	6a3a      	ldr	r2, [r7, #32]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	3308      	adds	r3, #8
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24

        if( xSum2.u32 < xSum.u32 )
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d202      	bcs.n	8008ad2 <usGenerateChecksum+0xfe>
        {
            ulCarry++;
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	3301      	adds	r3, #1
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 8008ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4413      	add	r3, r2
 8008adc:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d902      	bls.n	8008aec <usGenerateChecksum+0x118>
        {
            ulCarry++;
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	3301      	adds	r3, #1
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* And finally advance the pointer 4 * 4 = 16 bytes. */
        xSource.u32ptr = &( xSource.u32ptr[ 4 ] );
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	3310      	adds	r3, #16
 8008af0:	61bb      	str	r3, [r7, #24]
    while( xSource.u32ptr < xLastSource.u32ptr )
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3c5      	bcc.n	8008a86 <usGenerateChecksum+0xb2>
    }

    /* Now add all carries. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 8008afa:	8c3b      	ldrh	r3, [r7, #32]
 8008afc:	461a      	mov	r2, r3
 8008afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b00:	441a      	add	r2, r3
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	4413      	add	r3, r2
 8008b06:	623b      	str	r3, [r7, #32]

    uxDataLengthBytes %= 16U;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	633b      	str	r3, [r7, #48]	; 0x30
    xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	4413      	add	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Half-word aligned. */

    /* Coverity does not like Unions. Warning issued here: "The operator "<"
     * is being applied to the pointers "xSource.u16ptr" and "xLastSource.u16ptr",
     * which do not point into the same object." */
    while( xSource.u16ptr < xLastSource.u16ptr )
 8008b1c:	e007      	b.n	8008b2e <usGenerateChecksum+0x15a>
    {
        /* At least one more short. */
        xSum.u32 += xSource.u16ptr[ 0 ];
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	8812      	ldrh	r2, [r2, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	61bb      	str	r3, [r7, #24]
    while( xSource.u16ptr < xLastSource.u16ptr )
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3f3      	bcc.n	8008b1e <usGenerateChecksum+0x14a>
    }

    if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0U ) /* Maybe one more ? */
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <usGenerateChecksum+0x172>
    {
        xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	773b      	strb	r3, [r7, #28]
    }

    xSum.u32 += xTerm.u32;
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	623b      	str	r3, [r7, #32]

    /* Now add all carries again. */

    /* Assigning value from "xTerm.u32" to "xSum.u32" here, but that stored value is overwritten before it can be used.
     * Coverity doesn't understand about union variables. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8008b4e:	8c3b      	ldrh	r3, [r7, #32]
 8008b50:	461a      	mov	r2, r3
 8008b52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b54:	4413      	add	r3, r2
 8008b56:	623b      	str	r3, [r7, #32]

    /* coverity[value_overwrite] */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8008b58:	8c3b      	ldrh	r3, [r7, #32]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b5e:	4413      	add	r3, r2
 8008b60:	623b      	str	r3, [r7, #32]

    if( ( uxAlignBits & 1U ) != 0U )
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <usGenerateChecksum+0x1a8>
    {
        /* Quite unlikely, but pucNextData might be non-aligned, which would
        * mean that a checksum is calculated starting at an odd position. */
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	623b      	str	r3, [r7, #32]
    }

    /* swap the output (little endian platform only). */
    return FreeRTOS_htons( ( ( uint16_t ) xSum.u32 ) );
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	b21a      	sxth	r2, r3
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	0a1b      	lsrs	r3, r3, #8
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	b21b      	sxth	r3, r3
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	b21b      	sxth	r3, r3
 8008b92:	b29b      	uxth	r3, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	373c      	adds	r7, #60	; 0x3c
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]

        if( pxNetworkBuffer != NULL )
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fe4e 	bl	8007850 <vCastPointerTo_EthernetHeader_t>
 8008bb4:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	3306      	adds	r3, #6
 8008bba:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8008bc0:	2206      	movs	r2, #6
 8008bc2:	6939      	ldr	r1, [r7, #16]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f007 fc04 	bl	80103d2 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 8008bca:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <vReturnEthernetFrame+0x50>)
 8008bcc:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	3306      	adds	r3, #6
 8008bd2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008bd4:	2206      	movs	r2, #6
 8008bd6:	6939      	ldr	r1, [r7, #16]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f007 fbfa 	bl	80103d2 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f005 fec3 	bl	800e96c <xNetworkInterfaceOutput>
    }
}
 8008be6:	bf00      	nop
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000010 	.word	0x20000010

08008bf4 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <FreeRTOS_GetMACAddress+0x10>)
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20000010 	.word	0x20000010

08008c08 <vIPSetDHCPTimerEnableState>:
 * @brief Enable/disable the DHCP timer.
 *
 * @param[in] xEnableState: pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
    {
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <vIPSetDHCPTimerEnableState+0x1a>
        {
            xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 8008c16:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <vIPSetDHCPTimerEnableState+0x30>)
 8008c18:	7813      	ldrb	r3, [r2, #0]
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDHCPTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8008c20:	e004      	b.n	8008c2c <vIPSetDHCPTimerEnableState+0x24>
            xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 8008c22:	4a05      	ldr	r2, [pc, #20]	; (8008c38 <vIPSetDHCPTimerEnableState+0x30>)
 8008c24:	7813      	ldrb	r3, [r2, #0]
 8008c26:	f36f 0300 	bfc	r3, #0, #1
 8008c2a:	7013      	strb	r3, [r2, #0]
    }
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	2001a9bc 	.word	0x2001a9bc

08008c3c <vIPReloadDHCPTimer>:
 * @brief Reload the DHCP timer.
 *
 * @param[in] ulLeaseTime: The reload value.
 */
    void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
    {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	4803      	ldr	r0, [pc, #12]	; (8008c54 <vIPReloadDHCPTimer+0x18>)
 8008c48:	f7ff f82e 	bl	8007ca8 <prvIPTimerReload>
    }
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	2001a9bc 	.word	0x2001a9bc

08008c58 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8008c5c:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <xIPIsNetworkTaskReady+0x14>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	2001a9e4 	.word	0x2001a9e4

08008c70 <FreeRTOS_IsNetworkUp>:
 * @brief Returns whether this node is connected to network or not.
 *
 * @return pdTRUE if network is connected, else pdFALSE.
 */
BaseType_t FreeRTOS_IsNetworkUp( void )
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
    return xNetworkUp;
 8008c74:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <FreeRTOS_IsNetworkUp+0x14>)
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2001a9a4 	.word	0x2001a9a4

08008c88 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bf38      	it	cc
 8008c9a:	4613      	movcc	r3, r2
        }
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
        }
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 8008cd2:	b480      	push	{r7}
 8008cd4:	b087      	sub	sp, #28
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d304      	bcc.n	8008d02 <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8008d02:	697b      	ldr	r3, [r7, #20]
    }
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	441a      	add	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d304      	bcc.n	8008d3e <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8008d3e:	697b      	ldr	r3, [r7, #20]
    }
 8008d40:	4618      	mov	r0, r3
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ffb4 	bl	8008cd2 <uxStreamBufferSpace>
 8008d6a:	4603      	mov	r3, r0
    }
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ffa0 	bl	8008cd2 <uxStreamBufferSpace>
 8008d92:	4603      	mov	r3, r0
    }
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ffab 	bl	8008d10 <uxStreamBufferDistance>
 8008dba:	4603      	mov	r3, r0
    }
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 8008dcc:	687b      	ldr	r3, [r7, #4]
    }
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 8008de2:	687b      	ldr	r3, [r7, #4]
    }
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 8008df8:	687b      	ldr	r3, [r7, #4]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 8008e0e:	687b      	ldr	r3, [r7, #4]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <prvValidSocket+0x1a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d102      	bne.n	8008e3c <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e015      	b.n	8008e68 <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d006      	beq.n	8008e50 <prvValidSocket+0x34>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	e00b      	b.n	8008e68 <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d002      	beq.n	8008e64 <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e001      	b.n	8008e68 <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008e68:	697b      	ldr	r3, [r7, #20]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 8008e7c:	4803      	ldr	r0, [pc, #12]	; (8008e8c <vNetworkSocketsInit+0x14>)
 8008e7e:	f7fb f86a 	bl	8003f56 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 8008e82:	4803      	ldr	r0, [pc, #12]	; (8008e90 <vNetworkSocketsInit+0x18>)
 8008e84:	f7fb f867 	bl	8003f56 <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 8008e88:	bf00      	nop
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	2001b8c4 	.word	0x2001b8c4
 8008e90:	2001b8b0 	.word	0x2001b8b0

08008e94 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08c      	sub	sp, #48	; 0x30
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 8008eaa:	f7ff fed5 	bl	8008c58 <xIPIsNetworkTaskReady>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb8:	e078      	b.n	8008fac <prvDetermineSocketSize+0x118>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d00b      	beq.n	8008ed8 <prvDetermineSocketSize+0x44>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed6:	e7fe      	b.n	8008ed6 <prvDetermineSocketSize+0x42>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 8008ed8:	4b37      	ldr	r3, [pc, #220]	; (8008fb8 <prvDetermineSocketSize+0x124>)
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d00b      	beq.n	8008efa <prvDetermineSocketSize+0x66>
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	623b      	str	r3, [r7, #32]
 8008ef8:	e7fe      	b.n	8008ef8 <prvDetermineSocketSize+0x64>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 8008efa:	4b30      	ldr	r3, [pc, #192]	; (8008fbc <prvDetermineSocketSize+0x128>)
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d00b      	beq.n	8008f1c <prvDetermineSocketSize+0x88>
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e7fe      	b.n	8008f1a <prvDetermineSocketSize+0x86>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b11      	cmp	r3, #17
 8008f20:	d117      	bne.n	8008f52 <prvDetermineSocketSize+0xbe>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d010      	beq.n	8008f4a <prvDetermineSocketSize+0xb6>
            {
                xReturn = pdFAIL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                configASSERT( xReturn == pdPASS );
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d00b      	beq.n	8008f4a <prvDetermineSocketSize+0xb6>
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	b672      	cpsid	i
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	b662      	cpsie	i
 8008f46:	61bb      	str	r3, [r7, #24]
 8008f48:	e7fe      	b.n	8008f48 <prvDetermineSocketSize+0xb4>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	224c      	movs	r2, #76	; 0x4c
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e02c      	b.n	8008fac <prvDetermineSocketSize+0x118>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b06      	cmp	r3, #6
 8008f56:	d118      	bne.n	8008f8a <prvDetermineSocketSize+0xf6>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d010      	beq.n	8008f80 <prvDetermineSocketSize+0xec>
                {
                    xReturn = pdFAIL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
                    configASSERT( xReturn == pdPASS );
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d00b      	beq.n	8008f80 <prvDetermineSocketSize+0xec>
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	b672      	cpsid	i
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	b662      	cpsie	i
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e7fe      	b.n	8008f7e <prvDetermineSocketSize+0xea>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e010      	b.n	8008fac <prvDetermineSocketSize+0x118>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
            configASSERT( xReturn == pdPASS );
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d00b      	beq.n	8008fac <prvDetermineSocketSize+0x118>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	e7fe      	b.n	8008faa <prvDetermineSocketSize+0x116>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3730      	adds	r7, #48	; 0x30
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2001b8c4 	.word	0x2001b8c4
 8008fbc:	2001b8b0 	.word	0x2001b8b0

08008fc0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff ff5b 	bl	8008e94 <prvDetermineSocketSize>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e07e      	b.n	80090ea <FreeRTOS_socket+0x12a>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fd fa34 	bl	800645c <pvPortMalloc>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fee4 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 8008ffc:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d103      	bne.n	800900c <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 8009004:	f04f 33ff 	mov.w	r3, #4294967295
 8009008:	61fb      	str	r3, [r7, #28]
 800900a:	e06e      	b.n	80090ea <FreeRTOS_socket+0x12a>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800900c:	f7fa fd97 	bl	8003b3e <xEventGroupCreate>
 8009010:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 8009018:	69b8      	ldr	r0, [r7, #24]
 800901a:	f7fd fae7 	bl	80065ec <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800901e:	f04f 33ff 	mov.w	r3, #4294967295
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	e061      	b.n	80090ea <FreeRTOS_socket+0x12a>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	461a      	mov	r2, r3
 800902a:	2100      	movs	r1, #0
 800902c:	69b8      	ldr	r0, [r7, #24]
 800902e:	f007 f9f4 	bl	801041a <memset>

                pxSocket->xEventGroup = xEventGroup;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b11      	cmp	r3, #17
 800903c:	d104      	bne.n	8009048 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	3338      	adds	r3, #56	; 0x38
 8009042:	4618      	mov	r0, r3
 8009044:	f7fa ff87 	bl	8003f56 <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3308      	adds	r3, #8
 800904c:	4618      	mov	r0, r3
 800904e:	f7fa ffa2 	bl	8003f96 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f241 3288 	movw	r2, #5000	; 0x1388
 800905e:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	f241 3288 	movw	r2, #5000	; 0x1388
 8009066:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d132      	bne.n	80090e6 <FreeRTOS_socket+0x126>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009086:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009090:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f242 7210 	movw	r2, #10000	; 0x2710
 800909a:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800909c:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80090a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80090a4:	f7ff fe00 	bl	8008ca8 <FreeRTOS_round_up>
 80090a8:	4602      	mov	r2, r0
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b2:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <FreeRTOS_socket+0x134>)
 80090b4:	fba2 2303 	umull	r2, r3, r2, r3
 80090b8:	0adb      	lsrs	r3, r3, #11
 80090ba:	4619      	mov	r1, r3
 80090bc:	2001      	movs	r0, #1
 80090be:	f7ff fde3 	bl	8008c88 <FreeRTOS_max_uint32>
 80090c2:	4602      	mov	r2, r0
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <FreeRTOS_socket+0x134>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	0adb      	lsrs	r3, r3, #11
 80090d6:	4619      	mov	r1, r3
 80090d8:	2001      	movs	r0, #1
 80090da:	f7ff fdd5 	bl	8008c88 <FreeRTOS_max_uint32>
 80090de:	4602      	mov	r2, r0
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e1fc780f 	.word	0xe1fc780f

080090f8 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b092      	sub	sp, #72	; 0x48
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
    BaseType_t lPacketCount;
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    const void * pvCopySource;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	633b      	str	r3, [r7, #48]	; 0x30
    TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800910a:	2300      	movs	r3, #0
 800910c:	61fb      	str	r3, [r7, #28]
    BaseType_t xTimed = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    int32_t lReturn;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 8009112:	2300      	movs	r3, #0
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t uxPayloadLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 8009116:	2201      	movs	r2, #1
 8009118:	2111      	movs	r1, #17
 800911a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911c:	f7ff fe7e 	bl	8008e1c <prvValidSocket>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d103      	bne.n	800912e <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009126:	f06f 0315 	mvn.w	r3, #21
 800912a:	637b      	str	r3, [r7, #52]	; 0x34
 800912c:	e08e      	b.n	800924c <FreeRTOS_recvfrom+0x154>
    }
    else
    {
        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        while( lPacketCount == 0 )
 8009134:	e02f      	b.n	8009196 <FreeRTOS_recvfrom+0x9e>
        {
            if( xTimed == pdFALSE )
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d111      	bne.n	8009160 <FreeRTOS_recvfrom+0x68>
            {
                /* Check to see if the socket is non blocking on the first
                 * iteration.  */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0 )
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02a      	beq.n	800919e <FreeRTOS_recvfrom+0xa6>
                        }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b00      	cmp	r3, #0
 8009150:	d127      	bne.n	80091a2 <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                /* To ensure this part only executes once. */
                xTimed = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 8009156:	f107 0314 	add.w	r3, r7, #20
 800915a:	4618      	mov	r0, r3
 800915c:	f7fc fa90 	bl	8005680 <vTaskSetTimeOutState>
            }

            /* Wait for arrival of data.  While waiting, the IP-task may set the
             * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
             * socket, thus unblocking this API call. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6858      	ldr	r0, [r3, #4]
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	2300      	movs	r3, #0
 800916a:	2201      	movs	r2, #1
 800916c:	2141      	movs	r1, #65	; 0x41
 800916e:	f7fa fd01 	bl	8003b74 <xEventGroupWaitBits>
 8009172:	62f8      	str	r0, [r7, #44]	; 0x2c
                {
                    ( void ) xEventBits;
                }
            #endif /* ipconfigSUPPORT_SIGNALS */

            lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c

            if( lPacketCount != 0 )
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d112      	bne.n	80091a6 <FreeRTOS_recvfrom+0xae>
            {
                break;
            }

            /* Has the timeout been reached ? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8009180:	f107 021c 	add.w	r2, r7, #28
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fc fab6 	bl	80056fc <xTaskCheckForTimeOut>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <FreeRTOS_recvfrom+0xb2>
        while( lPacketCount == 0 )
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0cc      	beq.n	8009136 <FreeRTOS_recvfrom+0x3e>
 800919c:	e006      	b.n	80091ac <FreeRTOS_recvfrom+0xb4>
                    break;
 800919e:	bf00      	nop
 80091a0:	e004      	b.n	80091ac <FreeRTOS_recvfrom+0xb4>
                    break;
 80091a2:	bf00      	nop
 80091a4:	e002      	b.n	80091ac <FreeRTOS_recvfrom+0xb4>
                break;
 80091a6:	bf00      	nop
 80091a8:	e000      	b.n	80091ac <FreeRTOS_recvfrom+0xb4>
            {
                break;
 80091aa:	bf00      	nop
            }
        } /* while( lPacketCount == 0 ) */

        if( lPacketCount != 0 )
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d049      	beq.n	8009246 <FreeRTOS_recvfrom+0x14e>
        {
            taskENTER_CRITICAL();
 80091b2:	f7fd f831 	bl	8006218 <vPortEnterCritical>
            {
                /* The owner of the list item is the network buffer. */
                pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff fe17 	bl	8008df0 <vCastPointerTo_NetworkBufferDescriptor_t>
 80091c2:	62b8      	str	r0, [r7, #40]	; 0x28

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d103      	bne.n	80091d6 <FreeRTOS_recvfrom+0xde>
                {
                    /* Remove the network buffer from the list of buffers waiting to
                     * be processed by the socket. */
                    ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fa ff4a 	bl	800406a <uxListRemove>
                }
            }
            taskEXIT_CRITICAL();
 80091d6:	f7fd f851 	bl	800627c <vPortExitCritical>

            /* The returned value is the length of the payload data, which is
             * calculated at the total packet size minus the headers.
             * The validity of `xDataLength` prvProcessIPPacket has been confirmed
             * in 'prvProcessIPPacket()'. */
            uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	3b2a      	subs	r3, #42	; 0x2a
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
            lReturn = ( int32_t ) uxPayloadLength;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34

            if( pxSourceAddress != NULL )
 80091e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <FreeRTOS_recvfrom+0x104>
            {
                pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	8c1a      	ldrh	r2, [r3, #32]
 80091f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f2:	805a      	strh	r2, [r3, #2]
                pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091fa:	605a      	str	r2, [r3, #4]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d118      	bne.n	8009238 <FreeRTOS_recvfrom+0x140>
            {
                /* The zero copy flag is not set.  Truncate the length if it won't
                 * fit in the provided buffer. */
                if( lReturn > ( int32_t ) uxBufferLength )
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920a:	429a      	cmp	r2, r3
 800920c:	dd01      	ble.n	8009212 <FreeRTOS_recvfrom+0x11a>
                {
                    iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
                    lReturn = ( int32_t ) uxBufferLength;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
                }

                /* Copy the received data into the provided buffer, then release the
                 * network buffer. */
                pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	332a      	adds	r3, #42	; 0x2a
 8009218:	623b      	str	r3, [r7, #32]
                ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	461a      	mov	r2, r3
 800921e:	6a39      	ldr	r1, [r7, #32]
 8009220:	68b8      	ldr	r0, [r7, #8]
 8009222:	f007 f8d6 	bl	80103d2 <memcpy>

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10d      	bne.n	800924c <FreeRTOS_recvfrom+0x154>
                {
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009232:	f005 f97f 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
 8009236:	e009      	b.n	800924c <FreeRTOS_recvfrom+0x154>
            {
                /* The zero copy flag was set.  pvBuffer is not a buffer into which
                 * the received data can be copied, but a pointer that must be set to
                 * point to the buffer in which the received data has already been
                 * placed. */
                *( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	e002      	b.n	800924c <FreeRTOS_recvfrom+0x154>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 8009246:	f06f 030a 	mvn.w	r3, #10
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800924e:	4618      	mov	r0, r3
 8009250:	3740      	adds	r7, #64	; 0x40
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b090      	sub	sp, #64	; 0x40
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    void * pvCopyDest;
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8009264:	2304      	movs	r3, #4
 8009266:	773b      	strb	r3, [r7, #28]
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
    TimeOut_t xTimeOut;
    TickType_t xTicksToWait;
    int32_t lReturn = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63bb      	str	r3, [r7, #56]	; 0x38
    FreeRTOS_Socket_t const * pxSocket;
    const size_t uxMaxPayloadLength = ipMAX_UDP_PAYLOAD_LENGTH;
 8009270:	f240 4394 	movw	r3, #1172	; 0x494
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 8009276:	232a      	movs	r3, #42	; 0x2a
 8009278:	633b      	str	r3, [r7, #48]	; 0x30


    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pvBuffer != NULL );
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <FreeRTOS_sendto+0x46>
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	b672      	cpsid	i
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	b662      	cpsie	i
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
 800929a:	e7fe      	b.n	800929a <FreeRTOS_sendto+0x44>

    if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d87a      	bhi.n	800939a <FreeRTOS_sendto+0x144>
    {
        /* If the socket is not already bound to an address, bind it now.
         * Passing NULL as the address parameter tells FreeRTOS_bind() to select
         * the address to bind to. */
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d107      	bne.n	80092bc <FreeRTOS_sendto+0x66>
            ( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 80092ac:	2200      	movs	r2, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f877 	bl	80093a4 <FreeRTOS_bind>
 80092b6:	4603      	mov	r3, r0
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d16e      	bne.n	800939a <FreeRTOS_sendto+0x144>
        {
            xTicksToWait = pxSocket->xSendBlockTime;
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	613b      	str	r3, [r7, #16]
                        xTicksToWait = ( TickType_t ) 0;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	f003 0310 	and.w	r3, r3, #16
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <FreeRTOS_sendto+0x7a>
            {
                xTicksToWait = ( TickType_t ) 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	613b      	str	r3, [r7, #16]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d128      	bne.n	800932c <FreeRTOS_sendto+0xd6>
            {
                /* Zero copy is not set, so obtain a network buffer into
                 * which the payload will be copied. */
                vTaskSetTimeOutState( &xTimeOut );
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fc f9ce 	bl	8005680 <vTaskSetTimeOutState>

                /* Block until a buffer becomes available, or until a
                 * timeout has been reached */
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 80092e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4413      	add	r3, r2
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f005 f8a2 	bl	800e438 <pxGetNetworkBufferWithDescriptor>
 80092f4:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( pxNetworkBuffer != NULL )
 80092f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01b      	beq.n	8009334 <FreeRTOS_sendto+0xde>
                {
                    pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	4413      	add	r3, r2
 8009304:	62bb      	str	r3, [r7, #40]	; 0x28
                    ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930c:	f007 f861 	bl	80103d2 <memcpy>

                    if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 8009310:	f107 0210 	add.w	r2, r7, #16
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7fc f9ee 	bl	80056fc <xTaskCheckForTimeOut>
 8009320:	4603      	mov	r3, r0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d106      	bne.n	8009334 <FreeRTOS_sendto+0xde>
                    {
                        /* The entire block time has been used up. */
                        xTicksToWait = ( TickType_t ) 0;
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e003      	b.n	8009334 <FreeRTOS_sendto+0xde>
            else
            {
                /* When zero copy is used, pvBuffer is a pointer to the
                 * payload of a buffer that has already been obtained from the
                 * stack.  Obtain the network buffer pointer from the buffer. */
                pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f7fe fd47 	bl	8007dc0 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8009332:	63f8      	str	r0, [r7, #60]	; 0x3c
            }

            if( pxNetworkBuffer != NULL )
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d02f      	beq.n	800939a <FreeRTOS_sendto+0x144>
            {
                /* xDataLength is the size of the total packet, including the Ethernet header. */
                pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	61da      	str	r2, [r3, #28]
                pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8009344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009346:	885a      	ldrh	r2, [r3, #2]
 8009348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934a:	841a      	strh	r2, [r3, #32]
                pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	b29a      	uxth	r2, r3
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	845a      	strh	r2, [r3, #34]	; 0x22
                pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 8009356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935c:	615a      	str	r2, [r3, #20]

                /* The socket options are passed to the IP layer in the
                 * space that will eventually get used by the Ethernet header. */
                pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800935e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	3306      	adds	r3, #6
 8009364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009366:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800936a:	701a      	strb	r2, [r3, #0]

                /* Tell the networking task that the packet needs sending. */
                xStackTxEvent.pvData = pxNetworkBuffer;
 800936c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936e:	623b      	str	r3, [r7, #32]

                /* Ask the IP-task to send this packet */
                if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	f107 031c 	add.w	r3, r7, #28
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fe45 	bl	8008008 <xSendEventStructToIPTask>
 800937e:	4603      	mov	r3, r0
 8009380:	2b01      	cmp	r3, #1
 8009382:	d102      	bne.n	800938a <FreeRTOS_sendto+0x134>
                {
                    /* The packet was successfully sent to the IP task. */
                    lReturn = ( int32_t ) uxTotalDataLength;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	63bb      	str	r3, [r7, #56]	; 0x38
 8009388:	e007      	b.n	800939a <FreeRTOS_sendto+0x144>
                }
                else
                {
                    /* If the buffer was allocated in this function, release
                     * it. */
                    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <FreeRTOS_sendto+0x144>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009396:	f005 f8cd 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
    {
        /* The data is longer than the available buffer space. */
        iptraceSENDTO_DATA_TOO_LONG();
    }

    return lReturn;
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
} /* Tested */
 800939c:	4618      	mov	r0, r3
 800939e:	3740      	adds	r7, #64	; 0x40
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08c      	sub	sp, #48	; 0x30
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 80093b8:	f7fe fbaa 	bl	8007b10 <xIsCallingFromIPTask>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <FreeRTOS_bind+0x36>
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	b672      	cpsid	i
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	b662      	cpsie	i
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e7fe      	b.n	80093d8 <FreeRTOS_bind+0x34>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <FreeRTOS_bind+0x44>
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d103      	bne.n	80093f0 <FreeRTOS_bind+0x4c>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80093e8:	f06f 0315 	mvn.w	r3, #21
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	e03f      	b.n	8009470 <FreeRTOS_bind+0xcc>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <FreeRTOS_bind+0x5c>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80093f8:	f06f 0315 	mvn.w	r3, #21
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
 80093fe:	e037      	b.n	8009470 <FreeRTOS_bind+0xcc>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 8009400:	2309      	movs	r3, #9
 8009402:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <FreeRTOS_bind+0x88>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	b21a      	sxth	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	885b      	ldrh	r3, [r3, #2]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	b29b      	uxth	r3, r3
 800941e:	b21b      	sxth	r3, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	b21b      	sxth	r3, r3
 8009424:	b29a      	uxth	r2, r3
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	849a      	strh	r2, [r3, #36]	; 0x24
 800942a:	e002      	b.n	8009432 <FreeRTOS_bind+0x8e>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	2200      	movs	r2, #0
 8009430:	849a      	strh	r2, [r3, #36]	; 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009432:	f107 0314 	add.w	r3, r7, #20
 8009436:	f04f 31ff 	mov.w	r1, #4294967295
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fde4 	bl	8008008 <xSendEventStructToIPTask>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d103      	bne.n	800944e <FreeRTOS_bind+0xaa>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 8009446:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
 800944c:	e010      	b.n	8009470 <FreeRTOS_bind+0xcc>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	6858      	ldr	r0, [r3, #4]
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	2300      	movs	r3, #0
 800945a:	2201      	movs	r2, #1
 800945c:	2110      	movs	r1, #16
 800945e:	f7fa fb89 	bl	8003b74 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <FreeRTOS_bind+0xcc>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800946a:	f06f 0315 	mvn.w	r3, #21
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    return xReturn;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009472:	4618      	mov	r0, r3
 8009474:	3728      	adds	r7, #40	; 0x28
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08c      	sub	sp, #48	; 0x30
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800948a:	2300      	movs	r3, #0
 800948c:	62fb      	str	r3, [r7, #44]	; 0x2c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009498:	2b06      	cmp	r3, #6
 800949a:	d102      	bne.n	80094a2 <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800949c:	4b42      	ldr	r3, [pc, #264]	; (80095a8 <vSocketBind+0x12c>)
 800949e:	62bb      	str	r3, [r7, #40]	; 0x28
 80094a0:	e001      	b.n	80094a6 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 80094a2:	4b42      	ldr	r3, [pc, #264]	; (80095ac <vSocketBind+0x130>)
 80094a4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <vSocketBind+0x48>
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	b672      	cpsid	i
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	b662      	cpsie	i
 80094c0:	623b      	str	r3, [r7, #32]
 80094c2:	e7fe      	b.n	80094c2 <vSocketBind+0x46>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ca:	d10b      	bne.n	80094e4 <vSocketBind+0x68>
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	b672      	cpsid	i
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	b662      	cpsie	i
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	e7fe      	b.n	80094e2 <vSocketBind+0x66>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <vSocketBind+0x7a>
            {
                pxAddress = &xAddress;
 80094ea:	f107 0310 	add.w	r3, r7, #16
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	2200      	movs	r2, #0
 80094f4:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <vSocketBind+0x98>
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	b672      	cpsid	i
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	b662      	cpsie	i
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e7fe      	b.n	8009512 <vSocketBind+0x96>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	885b      	ldrh	r3, [r3, #2]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d111      	bne.n	8009540 <vSocketBind+0xc4>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009522:	4618      	mov	r0, r3
 8009524:	f000 faee 	bl	8009b04 <prvGetPrivatePortNumber>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <vSocketBind+0xc4>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8009538:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800953e:	e02d      	b.n	800959c <vSocketBind+0x120>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <vSocketBind+0xd4>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800954c:	2b06      	cmp	r3, #6
 800954e:	d00c      	beq.n	800956a <vSocketBind+0xee>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	885b      	ldrh	r3, [r3, #2]
 8009554:	4619      	mov	r1, r3
 8009556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009558:	f000 fb2c 	bl	8009bb4 <pxListFindListItemWithValue>
 800955c:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <vSocketBind+0xee>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8009562:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009568:	e018      	b.n	800959c <vSocketBind+0x120>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	461a      	mov	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	b21a      	sxth	r2, r3
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	0a1b      	lsrs	r3, r3, #8
 8009582:	b29b      	uxth	r3, r3
 8009584:	b21b      	sxth	r3, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	b21b      	sxth	r3, r3
 800958a:	b29a      	uxth	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3308      	adds	r3, #8
 8009594:	4619      	mov	r1, r3
 8009596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009598:	f7fa fd0a 	bl	8003fb0 <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800959e:	4618      	mov	r0, r3
 80095a0:	3730      	adds	r7, #48	; 0x30
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	2001b8b0 	.word	0x2001b8b0
 80095ac:	2001b8c4 	.word	0x2001b8c4

080095b0 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 80095b8:	230a      	movs	r3, #10
 80095ba:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <FreeRTOS_closesocket+0x1e>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d102      	bne.n	80095d4 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	e00e      	b.n	80095f2 <FreeRTOS_closesocket+0x42>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	2100      	movs	r1, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fd14 	bl	8008008 <xSendEventStructToIPTask>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d103      	bne.n	80095ee <FreeRTOS_closesocket+0x3e>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
            xResult = -1;
 80095e6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e001      	b.n	80095f2 <FreeRTOS_closesocket+0x42>
        }
        else
        {
            xResult = 1;
 80095ee:	2301      	movs	r3, #1
 80095f0:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 80095f2:	697b      	ldr	r3, [r7, #20]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800960a:	2b06      	cmp	r3, #6
 800960c:	d122      	bne.n	8009654 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961a:	4618      	mov	r0, r3
 800961c:	f004 ff8a 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	33d8      	adds	r3, #216	; 0xd8
 8009624:	4618      	mov	r0, r3
 8009626:	f003 ff61 	bl	800d4ec <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009636:	4618      	mov	r0, r3
 8009638:	f7fc ffd8 	bl	80065ec <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009648:	4618      	mov	r0, r3
 800964a:	f7fc ffcf 	bl	80065ec <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f832 	bl	80096b8 <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3308      	adds	r3, #8
 8009660:	4618      	mov	r0, r3
 8009662:	f7fa fd02 	bl	800406a <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800966c:	2b11      	cmp	r3, #17
 800966e:	d112      	bne.n	8009696 <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8009670:	e00d      	b.n	800968e <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff fbb9 	bl	8008df0 <vCastPointerTo_NetworkBufferDescriptor_t>
 800967e:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4618      	mov	r0, r3
 8009684:	f7fa fcf1 	bl	800406a <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f004 ff53 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1ed      	bne.n	8009672 <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fa fbff 	bl	8003ea6 <vEventGroupDelete>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7fc ff9f 	bl	80065ec <vPortFree>

    return NULL;
 80096ae:	2300      	movs	r3, #0
} /* Tested */
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 80096c0:	4b18      	ldr	r3, [pc, #96]	; (8009724 <prvTCPSetSocketCount+0x6c>)
 80096c2:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096c8:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e020      	b.n	8009714 <prvTCPSetSocketCount+0x5c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fb74 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 80096dc:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d112      	bne.n	800970e <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 80096ec:	89fa      	ldrh	r2, [r7, #14]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d10d      	bne.n	800970e <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <prvTCPSetSocketCount+0x56>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800970c:	e006      	b.n	800971c <prvTCPSetSocketCount+0x64>
             pxIterator = listGET_NEXT( pxIterator ) )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	617b      	str	r3, [r7, #20]
        for( pxIterator = listGET_NEXT( pxEnd );
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	429a      	cmp	r2, r3
 800971a:	d1da      	bne.n	80096d2 <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800971c:	bf00      	nop
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	2001b8b8 	.word	0x2001b8b8

08009728 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800973a:	2b06      	cmp	r3, #6
 800973c:	d003      	beq.n	8009746 <prvSockopt_so_buffer+0x1e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800973e:	f06f 0315 	mvn.w	r3, #21
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e028      	b.n	8009798 <prvSockopt_so_buffer+0x70>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b04      	cmp	r3, #4
 800974a:	d103      	bne.n	8009754 <prvSockopt_so_buffer+0x2c>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <prvSockopt_so_buffer+0x3a>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b05      	cmp	r3, #5
 8009758:	d107      	bne.n	800976a <prvSockopt_so_buffer+0x42>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <prvSockopt_so_buffer+0x42>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8009762:	f06f 0315 	mvn.w	r3, #21
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e016      	b.n	8009798 <prvSockopt_so_buffer+0x70>
        }
        else
        {
            ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b04      	cmp	r3, #4
 8009774:	d10b      	bne.n	800978e <prvSockopt_so_buffer+0x66>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800977c:	4619      	mov	r1, r3
 800977e:	6938      	ldr	r0, [r7, #16]
 8009780:	f7ff fa92 	bl	8008ca8 <FreeRTOS_round_up>
 8009784:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	671a      	str	r2, [r3, #112]	; 0x70
 800978c:	e002      	b.n	8009794 <prvSockopt_so_buffer+0x6c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            xReturn = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8009798:	697b      	ldr	r3, [r7, #20]
    }
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80097b2:	f06f 0315 	mvn.w	r3, #21
 80097b6:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	61bb      	str	r3, [r7, #24]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <FreeRTOS_setsockopt+0x26>
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c8:	d104      	bne.n	80097d4 <FreeRTOS_setsockopt+0x30>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80097ca:	f06f 0315 	mvn.w	r3, #21
 80097ce:	61fb      	str	r3, [r7, #28]
        return xReturn;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	e193      	b.n	8009afc <FreeRTOS_setsockopt+0x358>
    }

    switch( lOptionName )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b12      	cmp	r3, #18
 80097d8:	f200 817a 	bhi.w	8009ad0 <FreeRTOS_setsockopt+0x32c>
 80097dc:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <FreeRTOS_setsockopt+0x40>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	08009831 	.word	0x08009831
 80097e8:	0800983f 	.word	0x0800983f
 80097ec:	0800986b 	.word	0x0800986b
 80097f0:	08009ad1 	.word	0x08009ad1
 80097f4:	080098eb 	.word	0x080098eb
 80097f8:	080098eb 	.word	0x080098eb
 80097fc:	08009ad1 	.word	0x08009ad1
 8009800:	08009ad1 	.word	0x08009ad1
 8009804:	08009ad1 	.word	0x08009ad1
 8009808:	08009ad1 	.word	0x08009ad1
 800980c:	08009ad1 	.word	0x08009ad1
 8009810:	080099a5 	.word	0x080099a5
 8009814:	080099dd 	.word	0x080099dd
 8009818:	080098f9 	.word	0x080098f9
 800981c:	08009a15 	.word	0x08009a15
 8009820:	08009a7f 	.word	0x08009a7f
 8009824:	08009ad1 	.word	0x08009ad1
 8009828:	0800989d 	.word	0x0800989d
 800982c:	080098a9 	.word	0x080098a9
    {
        case FREERTOS_SO_RCVTIMEO:
            /* Receive time out. */
            pxSocket->xReceiveBlockTime = *( ( const TickType_t * ) pvOptionValue );
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	61da      	str	r2, [r3, #28]
            xReturn = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
            break;
 800983c:	e15d      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

        case FREERTOS_SO_SNDTIMEO:
            pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	621a      	str	r2, [r3, #32]

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800984c:	2b11      	cmp	r3, #17
 800984e:	d109      	bne.n	8009864 <FreeRTOS_setsockopt+0xc0>
            {
                /* The send time out is capped for the reason stated in the
                 * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
                 * in FreeRTOSIPConfig.h (assuming an official configuration file
                 * is being used. */
                if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	f241 3288 	movw	r2, #5000	; 0x1388
 8009858:	4293      	cmp	r3, r2
 800985a:	d903      	bls.n	8009864 <FreeRTOS_setsockopt+0xc0>
                {
                    pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009862:	621a      	str	r2, [r3, #32]
                /* For TCP socket, it isn't necessary to limit the blocking time
                 * because the FreeRTOS_send() function does not wait for a network
                 * buffer to become available. */
            }

            xReturn = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]
            break;
 8009868:	e147      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
        case FREERTOS_SO_UDPCKSUM_OUT:

            /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
             * is anything else than NULL, the checksum generation will be turned on. */

            if( pvOptionValue == NULL )
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <FreeRTOS_setsockopt+0xe0>
            {
                pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009876:	f023 0302 	bic.w	r3, r3, #2
 800987a:	b2da      	uxtb	r2, r3
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8009882:	e008      	b.n	8009896 <FreeRTOS_setsockopt+0xf2>
            }
            else
            {
                pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800988a:	f043 0302 	orr.w	r3, r3, #2
 800988e:	b2da      	uxtb	r2, r3
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            }

            xReturn = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]
            break;
 800989a:	e12e      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                        /* Each socket can have a callback function that is executed
                         * when there is an event the socket's owner might want to
                         * process. */
                        /* The type cast of the pointer expression "A" to type "B" removes const qualifier from the pointed to type. */
                        pxSocket->pxUserWakeCallback = ( const SocketWakeupCallback_t ) pvOptionValue;
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	629a      	str	r2, [r3, #40]	; 0x28
                        xReturn = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	61fb      	str	r3, [r7, #28]
                        break;
 80098a6:	e128      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                case FREERTOS_SO_SET_LOW_HIGH_WATER:
                   {
                       const LowHighWater_t * pxLowHighWater = ipPOINTER_CAST( const LowHighWater_t *, pvOptionValue );
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	617b      	str	r3, [r7, #20]

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80098b2:	2b06      	cmp	r3, #6
 80098b4:	f040 8110 	bne.w	8009ad8 <FreeRTOS_setsockopt+0x334>
                           /* It is not allowed to access 'pxSocket->u.xTCP'. */
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	f080 810b 	bcs.w	8009adc <FreeRTOS_setsockopt+0x338>
                           ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	f200 8104 	bhi.w	8009adc <FreeRTOS_setsockopt+0x338>
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
                       pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	665a      	str	r2, [r3, #100]	; 0x64
                       /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
                       pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	669a      	str	r2, [r3, #104]	; 0x68
                       xReturn = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]
                   }
                   break;
 80098e8:	e107      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                    xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	69b8      	ldr	r0, [r7, #24]
 80098f0:	f7ff ff1a 	bl	8009728 <prvSockopt_so_buffer>
 80098f4:	61f8      	str	r0, [r7, #28]
                    break;
 80098f6:	e100      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                   {
                       const WinProperties_t * pxProps;

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80098fe:	2b06      	cmp	r3, #6
 8009900:	f040 80ee 	bne.w	8009ae0 <FreeRTOS_setsockopt+0x33c>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009908:	2b00      	cmp	r3, #0
 800990a:	f040 80e7 	bne.w	8009adc <FreeRTOS_setsockopt+0x338>
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009912:	2b00      	cmp	r3, #0
 8009914:	f040 80e2 	bne.w	8009adc <FreeRTOS_setsockopt+0x338>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       pxProps = ipPOINTER_CAST( const WinProperties_t *, pvOptionValue );
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	613b      	str	r3, [r7, #16]

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	461a      	mov	r2, r3
 8009920:	2104      	movs	r1, #4
 8009922:	69b8      	ldr	r0, [r7, #24]
 8009924:	f7ff ff00 	bl	8009728 <prvSockopt_so_buffer>
 8009928:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2b00      	cmp	r3, #0
 800992e:	f040 80d9 	bne.w	8009ae4 <FreeRTOS_setsockopt+0x340>
                       {
                           break; /* will return an error. */
                       }

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	3308      	adds	r3, #8
 8009936:	461a      	mov	r2, r3
 8009938:	2105      	movs	r1, #5
 800993a:	69b8      	ldr	r0, [r7, #24]
 800993c:	f7ff fef4 	bl	8009728 <prvSockopt_so_buffer>
 8009940:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 80cf 	bne.w	8009ae8 <FreeRTOS_setsockopt+0x344>
                           break; /* will return an error. */
                       }

                       #if ( ipconfigUSE_TCP_WIN == 1 )
                           {
                               pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	461a      	mov	r2, r3
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                               pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	461a      	mov	r2, r3
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                           }
                       #endif

                       /* In case the socket has already initialised its tcpWin,
                        * adapt the window size parameters */
                       if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d015      	beq.n	800999e <FreeRTOS_setsockopt+0x1fa>
                       {
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800997e:	fb02 f203 	mul.w	r2, r2, r3
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8009994:	fb02 f203 	mul.w	r2, r2, r3
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                       }
                   }

                    xReturn = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	61fb      	str	r3, [r7, #28]
                    break;
 80099a2:	e0aa      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80099aa:	2b06      	cmp	r3, #6
 80099ac:	f040 809e 	bne.w	8009aec <FreeRTOS_setsockopt+0x348>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <FreeRTOS_setsockopt+0x224>
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80099be:	f043 0308 	orr.w	r3, r3, #8
 80099c2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80099c6:	e006      	b.n	80099d6 <FreeRTOS_setsockopt+0x232>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80099ce:	f36f 03c3 	bfc	r3, #3, #1
 80099d2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                       }
                   }
                    xReturn = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]
                    break;
 80099da:	e08e      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalize the connection */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80099e2:	2b06      	cmp	r3, #6
 80099e4:	f040 8084 	bne.w	8009af0 <FreeRTOS_setsockopt+0x34c>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d007      	beq.n	8009a00 <FreeRTOS_setsockopt+0x25c>
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80099f6:	f043 0310 	orr.w	r3, r3, #16
 80099fa:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 80099fe:	e006      	b.n	8009a0e <FreeRTOS_setsockopt+0x26a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8009a06:	f36f 1304 	bfc	r3, #4, #1
 8009a0a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                       }
                   }
                    xReturn = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
                    break;
 8009a12:	e072      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009a1a:	2b06      	cmp	r3, #6
 8009a1c:	d16a      	bne.n	8009af4 <FreeRTOS_setsockopt+0x350>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d007      	beq.n	8009a36 <FreeRTOS_setsockopt+0x292>
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE;
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 8009a2c:	f043 0302 	orr.w	r3, r3, #2
 8009a30:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
 8009a34:	e006      	b.n	8009a44 <FreeRTOS_setsockopt+0x2a0>
                       }
                       else
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE;
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 8009a3c:	f36f 0341 	bfc	r3, #1, #1
 8009a40:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
                       }

                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d111      	bne.n	8009a78 <FreeRTOS_setsockopt+0x2d4>
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d90c      	bls.n	8009a78 <FreeRTOS_setsockopt+0x2d4>
                           ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 8009a5e:	69b8      	ldr	r0, [r7, #24]
 8009a60:	f000 faf2 	bl	800a048 <FreeRTOS_tx_size>
 8009a64:	4603      	mov	r3, r0
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d006      	beq.n	8009a78 <FreeRTOS_setsockopt+0x2d4>
                       {
                           pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                           ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8009a72:	2006      	movs	r0, #6
 8009a74:	f7fe fab2 	bl	8007fdc <xSendEventToIPTask>
                       }
                   }
                    xReturn = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61fb      	str	r3, [r7, #28]
                    break;
 8009a7c:	e03d      	b.n	8009afa <FreeRTOS_setsockopt+0x356>

                case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009a84:	2b06      	cmp	r3, #6
 8009a86:	d137      	bne.n	8009af8 <FreeRTOS_setsockopt+0x354>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <FreeRTOS_setsockopt+0x2fc>
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdTRUE;
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8009a96:	f043 0304 	orr.w	r3, r3, #4
 8009a9a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 8009a9e:	e006      	b.n	8009aae <FreeRTOS_setsockopt+0x30a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdFALSE;
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8009aa6:	f36f 0382 	bfc	r3, #2, #1
 8009aaa:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                       }

                       pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                       pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                       ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8009ac4:	2006      	movs	r0, #6
 8009ac6:	f7fe fa89 	bl	8007fdc <xSendEventToIPTask>
                   }
                    xReturn = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]
                    break;
 8009ace:	e014      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
            #endif /* ipconfigUSE_TCP == 1 */

        default:
            /* No other options are handled. */
            xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 8009ad0:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 8009ad4:	61fb      	str	r3, [r7, #28]
            break;
 8009ad6:	e010      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009ad8:	bf00      	nop
 8009ada:	e00e      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
    }

    return xReturn;
 8009adc:	bf00      	nop
 8009ade:	e00c      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009ae0:	bf00      	nop
 8009ae2:	e00a      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return an error. */
 8009ae4:	bf00      	nop
 8009ae6:	e008      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return an error. */
 8009ae8:	bf00      	nop
 8009aea:	e006      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009aec:	bf00      	nop
 8009aee:	e004      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009af0:	bf00      	nop
 8009af2:	e002      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009af4:	bf00      	nop
 8009af6:	e000      	b.n	8009afa <FreeRTOS_setsockopt+0x356>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8009af8:	bf00      	nop
    return xReturn;
 8009afa:	69fb      	ldr	r3, [r7, #28]
} /* Tested */
 8009afc:	4618      	mov	r0, r3
 8009afe:	3720      	adds	r7, #32
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 8009b0c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8009b10:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 8009b12:	89fb      	ldrh	r3, [r7, #14]
 8009b14:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b06      	cmp	r3, #6
 8009b22:	d102      	bne.n	8009b2a <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 8009b24:	4b21      	ldr	r3, [pc, #132]	; (8009bac <prvGetPrivatePortNumber+0xa8>)
 8009b26:	613b      	str	r3, [r7, #16]
 8009b28:	e001      	b.n	8009b2e <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <prvGetPrivatePortNumber+0xac>)
 8009b2c:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f6 ffab 	bl	8000a8e <xApplicationGetRandomNumber>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d030      	beq.n	8009ba0 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8009b42:	89fa      	ldrh	r2, [r7, #14]
 8009b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b48:	fb02 f201 	mul.w	r2, r2, r1
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	b29b      	uxth	r3, r3
        usResult =
 8009b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b54:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 8009b56:	8abb      	ldrh	r3, [r7, #20]
 8009b58:	021b      	lsls	r3, r3, #8
 8009b5a:	b21a      	sxth	r2, r3
 8009b5c:	8abb      	ldrh	r3, [r7, #20]
 8009b5e:	0a1b      	lsrs	r3, r3, #8
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	b21b      	sxth	r3, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	b21b      	sxth	r3, r3
 8009b68:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6938      	ldr	r0, [r7, #16]
 8009b6e:	f000 f821 	bl	8009bb4 <pxListFindListItemWithValue>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 8009b78:	8abb      	ldrh	r3, [r7, #20]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	8abb      	ldrh	r3, [r7, #20]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	b21b      	sxth	r3, r3
 8009b86:	4313      	orrs	r3, r2
 8009b88:	b21b      	sxth	r3, r3
 8009b8a:	82bb      	strh	r3, [r7, #20]
            break;
 8009b8c:	e009      	b.n	8009ba2 <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 8009b92:	8afb      	ldrh	r3, [r7, #22]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 8009b98:	8afb      	ldrh	r3, [r7, #22]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1c7      	bne.n	8009b2e <prvGetPrivatePortNumber+0x2a>
 8009b9e:	e000      	b.n	8009ba2 <prvGetPrivatePortNumber+0x9e>
            break;
 8009ba0:	bf00      	nop

    return usResult;
 8009ba2:	8abb      	ldrh	r3, [r7, #20]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	2001b8b0 	.word	0x2001b8b0
 8009bb0:	2001b8c4 	.word	0x2001b8c4

08009bb4 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8009bc2:	f7ff f849 	bl	8008c58 <xIPIsNetworkTaskReady>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d018      	beq.n	8009bfe <pxListFindListItemWithValue+0x4a>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d015      	beq.n	8009bfe <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	e00a      	b.n	8009bf6 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d102      	bne.n	8009bf0 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	617b      	str	r3, [r7, #20]
                break;
 8009bee:	e006      	b.n	8009bfe <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d1f0      	bne.n	8009be0 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 8009bfe:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	4810      	ldr	r0, [pc, #64]	; (8009c58 <pxUDPSocketLookup+0x50>)
 8009c18:	f7ff ffcc 	bl	8009bb4 <pxListFindListItemWithValue>
 8009c1c:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d014      	beq.n	8009c4e <pxUDPSocketLookup+0x46>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff f8cb 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 8009c2e:	6178      	str	r0, [r7, #20]
        configASSERT( pxSocket != NULL );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <pxUDPSocketLookup+0x46>
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	b672      	cpsid	i
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	b662      	cpsie	i
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e7fe      	b.n	8009c4c <pxUDPSocketLookup+0x44>
    }

    return pxSocket;
 8009c4e:	697b      	ldr	r3, [r7, #20]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	2001b8c4 	.word	0x2001b8c4

08009c5c <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
        {
            if( pxSocket->pxUserWakeCallback != NULL )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <vSocketWakeUpUser+0x18>
            {
                pxSocket->pxUserWakeCallback( pxSocket );
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	4798      	blx	r3
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d015      	beq.n	8009ca8 <vSocketWakeUpUser+0x4c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00c      	beq.n	8009ca8 <vSocketWakeUpUser+0x4c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	431a      	orrs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	635a      	str	r2, [r3, #52]	; 0x34
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fa f872 	bl	8003d8c <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00b      	beq.n	8009cd4 <vSocketWakeUpUser+0x78>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <vSocketWakeUpUser+0x78>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fa f85c 	bl	8003d8c <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 8009cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 8009cf2:	f7fb fa73 	bl	80051dc <xTaskGetTickCount>
 8009cf6:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 8009cf8:	4b32      	ldr	r3, [pc, #200]	; (8009dc4 <xTCPTimerCheck+0xe0>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8009d02:	4b31      	ldr	r3, [pc, #196]	; (8009dc8 <xTCPTimerCheck+0xe4>)
 8009d04:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8009d06:	4b31      	ldr	r3, [pc, #196]	; (8009dcc <xTCPTimerCheck+0xe8>)
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 8009d0c:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <xTCPTimerCheck+0xe0>)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d14c      	bne.n	8009db2 <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 8009d1c:	e049      	b.n	8009db2 <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f84e 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 8009d28:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d100      	bne.n	8009d3c <xTCPTimerCheck+0x58>
            {
                continue;
 8009d3a:	e03a      	b.n	8009db2 <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d42:	461a      	mov	r2, r3
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d20a      	bcs.n	8009d60 <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009d5e:	e00b      	b.n	8009d78 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 8009d68:	6938      	ldr	r0, [r7, #16]
 8009d6a:	f000 feaf 	bl	800aacc <xTCPSocketCheck>
 8009d6e:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da00      	bge.n	8009d78 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 8009d76:	e01c      	b.n	8009db2 <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d008      	beq.n	8009d92 <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 8009d86:	6938      	ldr	r0, [r7, #16]
 8009d88:	f7ff ff68 	bl	8009c5c <vSocketWakeUpUser>
 8009d8c:	e001      	b.n	8009d92 <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <xTCPTimerCheck+0xce>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009da2:	461a      	mov	r2, r3
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d903      	bls.n	8009db2 <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 8009db2:	69fa      	ldr	r2, [r7, #28]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d1b1      	bne.n	8009d1e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3728      	adds	r7, #40	; 0x28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	2001a9f4 	.word	0x2001a9f4
 8009dc8:	2001b8b8 	.word	0x2001b8b8
 8009dcc:	2001b8b0 	.word	0x2001b8b0

08009dd0 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	; 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	623b      	str	r3, [r7, #32]
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8009de6:	4b1c      	ldr	r3, [pc, #112]	; (8009e58 <pxTCPSocketLookup+0x88>)
 8009de8:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
 8009df0:	e024      	b.n	8009e3c <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe ffe4 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 8009dfc:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d115      	bne.n	8009e36 <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d102      	bne.n	8009e1a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	61fb      	str	r3, [r7, #28]
 8009e18:	e00d      	b.n	8009e36 <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d107      	bne.n	8009e36 <pxTCPSocketLookup+0x66>
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d102      	bne.n	8009e36 <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	623b      	str	r3, [r7, #32]
                    break;
 8009e34:	e006      	b.n	8009e44 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d1d6      	bne.n	8009df2 <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
    }
 8009e50:	4618      	mov	r0, r3
 8009e52:	3728      	adds	r7, #40	; 0x28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	2001b8b8 	.word	0x2001b8b8

08009e5c <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d025      	beq.n	8009eb8 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e70:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10c      	bne.n	8009e94 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	461a      	mov	r2, r3
 8009e88:	4b29      	ldr	r3, [pc, #164]	; (8009f30 <prvTCPCreateStream+0xd4>)
 8009e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e8e:	095a      	lsrs	r2, r3, #5
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d110      	bne.n	8009ebe <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b21      	ldr	r3, [pc, #132]	; (8009f30 <prvTCPCreateStream+0xd4>)
 8009eac:	fba3 2302 	umull	r2, r3, r3, r2
 8009eb0:	095a      	lsrs	r2, r3, #5
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	669a      	str	r2, [r3, #104]	; 0x68
 8009eb6:	e002      	b.n	8009ebe <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebc:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	3314      	adds	r3, #20
 8009ed0:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 8009ed2:	6938      	ldr	r0, [r7, #16]
 8009ed4:	f7fc fac2 	bl	800645c <pvPortMalloc>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe ff93 	bl	8008e06 <vCastPointerTo_StreamBuffer_t>
 8009ee0:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <prvTCPCreateStream+0xa4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8009eee:	f043 0308 	orr.w	r3, r3, #8
 8009ef2:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8009ef6:	2108      	movs	r1, #8
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 fbf4 	bl	800b6e6 <vTCPStateChange>
 8009efe:	e011      	b.n	8009f24 <prvTCPCreateStream+0xc8>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8009f00:	2214      	movs	r2, #20
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f006 fa88 	bl	801041a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
            }

            if( xIsInputStream != 0 )
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <prvTCPCreateStream+0xc2>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	675a      	str	r2, [r3, #116]	; 0x74
 8009f1c:	e002      	b.n	8009f24 <prvTCPCreateStream+0xc8>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
    }
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	51eb851f 	.word	0x51eb851f

08009f34 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f46:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8009f52:	2101      	movs	r1, #1
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff ff81 	bl	8009e5c <prvTCPCreateStream>
 8009f5a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	db44      	blt.n	8009ff8 <lTCPAddRxdata+0xc4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	69f8      	ldr	r0, [r7, #28]
 8009f76:	f000 faf7 	bl	800a568 <uxStreamBufferAdd>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	61bb      	str	r3, [r7, #24]
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d139      	bne.n	8009ff8 <lTCPAddRxdata+0xc4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11f      	bne.n	8009fd4 <lTCPAddRxdata+0xa0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe feeb 	bl	8008d74 <uxStreamBufferFrontSpace>
 8009f9e:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d814      	bhi.n	8009fd4 <lTCPAddRxdata+0xa0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8009fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8009fce:	2006      	movs	r0, #6
 8009fd0:	f7fe f804 	bl	8007fdc <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f043 0201 	orr.w	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <lTCPAddRxdata+0xc4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
    }
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a014:	2b06      	cmp	r3, #6
 800a016:	d003      	beq.n	800a020 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a018:	f06f 0315 	mvn.w	r3, #21
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e00e      	b.n	800a03e <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a024:	2b00      	cmp	r3, #0
 800a026:	d007      	beq.n	800a038 <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fe8d 	bl	8008d4c <uxStreamBufferGetSpace>
 800a032:	4603      	mov	r3, r0
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	e002      	b.n	800a03e <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800a03e:	68fb      	ldr	r3, [r7, #12]
    }
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a05a:	2b06      	cmp	r3, #6
 800a05c:	d003      	beq.n	800a066 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a05e:	f06f 0315 	mvn.w	r3, #21
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e00d      	b.n	800a082 <FreeRTOS_tx_size+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <FreeRTOS_tx_size+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fe92 	bl	8008d9c <uxStreamBufferGetSize>
 800a078:	4603      	mov	r3, r0
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	e001      	b.n	800a082 <FreeRTOS_tx_size+0x3a>
            }
            else
            {
                xReturn = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800a082:	68fb      	ldr	r3, [r7, #12]
    }
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d003      	beq.n	800a0aa <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a0a2:	f06f 0315 	mvn.w	r3, #21
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e00d      	b.n	800a0c6 <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fe70 	bl	8008d9c <uxStreamBufferGetSize>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e001      	b.n	800a0c6 <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
    }
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b092      	sub	sp, #72	; 0x48
 800a0d4:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800a0da:	f004 fa6b 	bl	800e5b4 <uxGetMinimumFreeNetworkBuffers>
 800a0de:	6378      	str	r0, [r7, #52]	; 0x34
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800a0e0:	f004 fa5c 	bl	800e59c <uxGetNumberOfFreeNetworkBuffers>
 800a0e4:	6338      	str	r0, [r7, #48]	; 0x30

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800a0e6:	4b38      	ldr	r3, [pc, #224]	; (800a1c8 <vTCPNetStat+0xf8>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d166      	bne.n	800a1be <vTCPNetStat+0xee>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
        }
        else
        {
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a0f0:	4b36      	ldr	r3, [pc, #216]	; (800a1cc <vTCPNetStat+0xfc>)
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800a0f4:	4b36      	ldr	r3, [pc, #216]	; (800a1d0 <vTCPNetStat+0x100>)
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800a0f8:	4b33      	ldr	r3, [pc, #204]	; (800a1c8 <vTCPNetStat+0xf8>)
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0fe:	e04c      	b.n	800a19a <vTCPNetStat+0xca>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fe68 	bl	8008dda <vCastConstPointerTo_FreeRTOS_Socket_t>
 800a10a:	6278      	str	r0, [r7, #36]	; 0x24
                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800a10c:	f7fb f866 	bl	80051dc <xTaskGetTickCount>
 800a110:	4602      	mov	r2, r0
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	623b      	str	r3, [r7, #32]
                #else
                    TickType_t age = 0U;
                #endif

                char ucChildText[ 16 ] = "";
 800a11a:	2300      	movs	r3, #0
 800a11c:	607b      	str	r3, [r7, #4]
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	605a      	str	r2, [r3, #4]
 800a128:	609a      	str	r2, [r3, #8]

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a130:	2b01      	cmp	r3, #1
 800a132:	d12c      	bne.n	800a18e <vTCPNetStat+0xbe>
                {
                    /* Using function "snprintf". */
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800a13a:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800a142:	1d38      	adds	r0, r7, #4
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4613      	mov	r3, r2
 800a148:	4a22      	ldr	r2, [pc, #136]	; (800a1d4 <vTCPNetStat+0x104>)
 800a14a:	2110      	movs	r1, #16
 800a14c:	f006 f96e 	bl	801042c <sniprintf>
 800a150:	61f8      	str	r0, [r7, #28]
                    ( void ) copied_len;
                    /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
                    configASSERT( copied_len >= 0 );
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	da0b      	bge.n	800a170 <vTCPNetStat+0xa0>
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	b672      	cpsid	i
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	b662      	cpsie	i
 800a16c:	61bb      	str	r3, [r7, #24]
 800a16e:	e7fe      	b.n	800a16e <vTCPNetStat+0x9e>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	2b0f      	cmp	r3, #15
 800a174:	dd0b      	ble.n	800a18e <vTCPNetStat+0xbe>
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	b672      	cpsid	i
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	b662      	cpsie	i
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e7fe      	b.n	800a18c <vTCPNetStat+0xbc>
                                   ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                                   FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.ucTCPState ),
                                   ( age > 999999u ) ? 999999u : age, /* Format 'age' for printing */
                                   pxSocket->u.xTCP.usTimeout,
                                   ucChildText ) );
                count++;
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	3301      	adds	r3, #1
 800a192:	63bb      	str	r3, [r7, #56]	; 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800a194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800a19a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d1ae      	bne.n	800a100 <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <vTCPNetStat+0x108>)
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a8:	e005      	b.n	800a1b6 <vTCPNetStat+0xe6>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	63bb      	str	r3, [r7, #56]	; 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800a1b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d1f5      	bne.n	800a1aa <vTCPNetStat+0xda>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800a1be:	bf00      	nop
 800a1c0:	3740      	adds	r7, #64	; 0x40
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	2001b8b0 	.word	0x2001b8b0
 800a1cc:	2001b8b8 	.word	0x2001b8b8
 800a1d0:	2001b8cc 	.word	0x2001b8cc
 800a1d4:	08010d74 	.word	0x08010d74
 800a1d8:	2001b8c4 	.word	0x2001b8c4

0800a1dc <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08c      	sub	sp, #48	; 0x30
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1f0:	e0e4      	b.n	800a3bc <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800a1f8:	4b85      	ldr	r3, [pc, #532]	; (800a410 <vSocketSelect+0x234>)
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e001      	b.n	800a202 <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a1fe:	4b85      	ldr	r3, [pc, #532]	; (800a414 <vSocketSelect+0x238>)
 800a200:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	623b      	str	r3, [r7, #32]
 800a208:	e0d0      	b.n	800a3ac <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe fdd8 	bl	8008dc4 <vCastPointerTo_FreeRTOS_Socket_t>
 800a214:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	f040 80c1 	bne.w	800a3a4 <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a22c:	2b06      	cmp	r3, #6
 800a22e:	f040 80a3 	bne.w	800a378 <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800a232:	2300      	movs	r3, #0
 800a234:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d038      	beq.n	800a2d8 <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d111      	bne.n	800a294 <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a274:	2b00      	cmp	r3, #0
 800a276:	d02f      	beq.n	800a2d8 <vSocketSelect+0xfc>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d026      	beq.n	800a2d8 <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28c:	f043 0301 	orr.w	r3, r3, #1
 800a290:	62bb      	str	r3, [r7, #40]	; 0x28
 800a292:	e021      	b.n	800a2d8 <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00c      	beq.n	800a2be <vSocketSelect+0xe2>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	f043 0301 	orr.w	r3, r3, #1
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2bc:	e00c      	b.n	800a2d8 <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <vSocketSelect+0xfc>
 800a2c4:	68b8      	ldr	r0, [r7, #8]
 800a2c6:	f7ff fee1 	bl	800a08c <FreeRTOS_rx_size>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	dd03      	ble.n	800a2d8 <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00d      	beq.n	800a300 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d004      	beq.n	800a2f8 <vSocketSelect+0x11c>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d103      	bne.n	800a300 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f043 0304 	orr.w	r3, r3, #4
 800a2fe:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d043      	beq.n	800a394 <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800a316:	68b8      	ldr	r0, [r7, #8]
 800a318:	f7ff fe73 	bl	800a002 <FreeRTOS_tx_space>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd01      	ble.n	800a326 <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d11d      	bne.n	800a368 <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d015      	beq.n	800a368 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800a342:	2b04      	cmp	r3, #4
 800a344:	d910      	bls.n	800a368 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a34c:	f003 0310 	and.w	r3, r3, #16
 800a350:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800a352:	2b00      	cmp	r3, #0
 800a354:	d108      	bne.n	800a368 <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800a35c:	f043 0310 	orr.w	r3, r3, #16
 800a360:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d012      	beq.n	800a394 <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	62bb      	str	r3, [r7, #40]	; 0x28
 800a376:	e00d      	b.n	800a394 <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a398:	635a      	str	r2, [r3, #52]	; 0x34

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a2:	e000      	b.n	800a3a6 <vSocketSelect+0x1ca>
                    continue;
 800a3a4:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	f47f af2a 	bne.w	800a20a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	f77f af16 	ble.w	800a1f2 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f9 fca3 	bl	8003d18 <xEventGroupClearBits>
 800a3d2:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	43da      	mvns	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	f003 030f 	and.w	r3, r3, #15
 800a3e0:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7f9 fc92 	bl	8003d18 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	f043 0310 	orr.w	r3, r3, #16
 800a3fe:	4619      	mov	r1, r3
 800a400:	4610      	mov	r0, r2
 800a402:	f7f9 fcc3 	bl	8003d8c <xEventGroupSetBits>
    }
 800a406:	bf00      	nop
 800a408:	3730      	adds	r7, #48	; 0x30
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2001b8cc 	.word	0x2001b8cc
 800a414:	2001b8b8 	.word	0x2001b8b8

0800a418 <FreeRTOS_min_uint32>:
        {
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	4293      	cmp	r3, r2
 800a428:	bf28      	it	cs
 800a42a:	4613      	movcs	r3, r2
        }
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <uxStreamBufferSpace>:
    {
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	441a      	add	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d304      	bcc.n	800a468 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	617b      	str	r3, [r7, #20]
        return uxCount;
 800a468:	697b      	ldr	r3, [r7, #20]
    }
 800a46a:	4618      	mov	r0, r3
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <uxStreamBufferDistance>:
    {
 800a476:	b480      	push	{r7}
 800a478:	b087      	sub	sp, #28
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	441a      	add	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	429a      	cmp	r2, r3
 800a498:	d304      	bcc.n	800a4a4 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	617b      	str	r3, [r7, #20]
        return uxCount;
 800a4a4:	697b      	ldr	r3, [r7, #20]
    }
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <uxStreamBufferGetSpace>:
    {
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	68f9      	ldr	r1, [r7, #12]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff ffb4 	bl	800a438 <uxStreamBufferSpace>
 800a4d0:	4603      	mov	r3, r0
    }
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <uxStreamBufferGetSize>:
    {
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff ffbf 	bl	800a476 <uxStreamBufferDistance>
 800a4f8:	4603      	mov	r3, r0
    }
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800a502:	b480      	push	{r7}
 800a504:	b087      	sub	sp, #28
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d201      	bcs.n	800a520 <xStreamBufferLessThenEqual+0x1e>
 800a51c:	2201      	movs	r2, #1
 800a51e:	e000      	b.n	800a522 <xStreamBufferLessThenEqual+0x20>
 800a520:	2200      	movs	r2, #0
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	4299      	cmp	r1, r3
 800a528:	d201      	bcs.n	800a52e <xStreamBufferLessThenEqual+0x2c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xStreamBufferLessThenEqual+0x2e>
 800a52e:	2300      	movs	r3, #0
 800a530:	429a      	cmp	r2, r3
 800a532:	d009      	beq.n	800a548 <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d202      	bcs.n	800a542 <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e00b      	b.n	800a55a <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	e008      	b.n	800a55a <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d802      	bhi.n	800a556 <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e001      	b.n	800a55a <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800a55a:	697b      	ldr	r3, [r7, #20]
    }
 800a55c:	4618      	mov	r0, r3
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7ff ff99 	bl	800a4b2 <uxStreamBufferGetSpace>
 800a580:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	429a      	cmp	r2, r3
 800a588:	d904      	bls.n	800a594 <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800a58a:	69fa      	ldr	r2, [r7, #28]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	61fb      	str	r3, [r7, #28]
 800a592:	e001      	b.n	800a598 <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	69f8      	ldr	r0, [r7, #28]
 800a59c:	f7ff ff3c 	bl	800a418 <FreeRTOS_min_uint32>
 800a5a0:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d05a      	beq.n	800a65e <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00d      	beq.n	800a5d0 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d304      	bcc.n	800a5d0 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d022      	beq.n	800a61c <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	691a      	ldr	r2, [r3, #16]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	6979      	ldr	r1, [r7, #20]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff ff19 	bl	800a418 <FreeRTOS_min_uint32>
 800a5e6:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	3310      	adds	r3, #16
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	6879      	ldr	r1, [r7, #4]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f005 feeb 	bl	80103d2 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	429a      	cmp	r2, r3
 800a602:	d90b      	bls.n	800a61c <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f103 0014 	add.w	r0, r3, #20
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	18d1      	adds	r1, r2, r3
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	461a      	mov	r2, r3
 800a618:	f005 fedb 	bl	80103d2 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d110      	bne.n	800a644 <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	4413      	add	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	429a      	cmp	r2, r3
 800a632:	d304      	bcc.n	800a63e <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	4619      	mov	r1, r3
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f7ff ff58 	bl	800a502 <xStreamBufferLessThenEqual>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800a65e:	697b      	ldr	r3, [r7, #20]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3720      	adds	r7, #32
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff ff2f 	bl	800a4da <uxStreamBufferGetSize>
 800a67c:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800a67e:	69fa      	ldr	r2, [r7, #28]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	429a      	cmp	r2, r3
 800a684:	d904      	bls.n	800a690 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	e001      	b.n	800a694 <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	69f8      	ldr	r0, [r7, #28]
 800a698:	f7ff febe 	bl	800a418 <FreeRTOS_min_uint32>
 800a69c:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d050      	beq.n	800a746 <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00d      	beq.n	800a6cc <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d304      	bcc.n	800a6cc <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d022      	beq.n	800a718 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	691a      	ldr	r2, [r3, #16]
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	6979      	ldr	r1, [r7, #20]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff fe9b 	bl	800a418 <FreeRTOS_min_uint32>
 800a6e2:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	3310      	adds	r3, #16
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f005 fe6d 	bl	80103d2 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d90b      	bls.n	800a718 <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	18d0      	adds	r0, r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f103 0114 	add.w	r1, r3, #20
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	461a      	mov	r2, r3
 800a714:	f005 fe5d 	bl	80103d2 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d113      	bne.n	800a746 <uxStreamBufferGet+0xde>
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d110      	bne.n	800a746 <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	4413      	add	r3, r2
 800a72a:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	429a      	cmp	r2, r3
 800a734:	d304      	bcc.n	800a740 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	69ba      	ldr	r2, [r7, #24]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800a746:	697b      	ldr	r3, [r7, #20]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3720      	adds	r7, #32
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <FreeRTOS_min_int32>:
        {
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	4293      	cmp	r3, r2
 800a760:	bfa8      	it	ge
 800a762:	4613      	movge	r3, r2
        }
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <FreeRTOS_min_uint32>:
        {
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	4293      	cmp	r3, r2
 800a780:	bf28      	it	cs
 800a782:	4613      	movcs	r3, r2
        }
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <uxStreamBufferSpace>:
    {
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	441a      	add	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d304      	bcc.n	800a7c0 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	617b      	str	r3, [r7, #20]
        return uxCount;
 800a7c0:	697b      	ldr	r3, [r7, #20]
    }
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <uxStreamBufferDistance>:
    {
 800a7ce:	b480      	push	{r7}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	691a      	ldr	r2, [r3, #16]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d304      	bcc.n	800a7fc <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	617b      	str	r3, [r7, #20]
        return uxCount;
 800a7fc:	697b      	ldr	r3, [r7, #20]
    }
 800a7fe:	4618      	mov	r0, r3
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <uxStreamBufferGetSpace>:
    {
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	68f9      	ldr	r1, [r7, #12]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff ffb4 	bl	800a790 <uxStreamBufferSpace>
 800a828:	4603      	mov	r3, r0
    }
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <uxStreamBufferFrontSpace>:
    {
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff ffa0 	bl	800a790 <uxStreamBufferSpace>
 800a850:	4603      	mov	r3, r0
    }
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <uxStreamBufferMidSpace>:
    {
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff ffab 	bl	800a7ce <uxStreamBufferDistance>
 800a878:	4603      	mov	r3, r0
    }
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <vStreamBufferMoveMid>:
    {
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff ffe4 	bl	800a85a <uxStreamBufferMidSpace>
 800a892:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d901      	bls.n	800a8a4 <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d306      	bcc.n	800a8ca <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	1ad2      	subs	r2, r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	605a      	str	r2, [r3, #4]
    }
 800a8ca:	bf00      	nop
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <vCastConstPointerTo_IPHeader_t>:
    {
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800a8da:	687b      	ldr	r3, [r7, #4]
    }
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <vCastPointerTo_TCPPacket_t>:
    {
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800a8f0:	687b      	ldr	r3, [r7, #4]
    }
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <vCastConstPointerTo_TCPPacket_t>:
    {
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800a906:	687b      	ldr	r3, [r7, #4]
    }
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <vCastPointerTo_ProtocolHeaders_t>:
    {
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800a91c:	687b      	ldr	r3, [r7, #4]
    }
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800a932:	687b      	ldr	r3, [r7, #4]
    }
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800a948:	687b      	ldr	r3, [r7, #4]
    }
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <ulChar2u32>:
    {
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3301      	adds	r3, #1
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800a96c:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3302      	adds	r3, #2
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800a976:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	3203      	adds	r2, #3
 800a97c:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800a97e:	4313      	orrs	r3, r2
    }
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <usChar2u16>:
    {
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	021b      	lsls	r3, r3, #8
 800a99c:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
        return ( uint16_t )
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	b29b      	uxth	r3, r3
    }
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	2b0b      	cmp	r3, #11
 800a9c6:	d81e      	bhi.n	800aa06 <prvTCPSocketIsActive+0x4e>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <prvTCPSocketIsActive+0x18>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800aa01 	.word	0x0800aa01
 800a9d4:	0800aa07 	.word	0x0800aa07
 800a9d8:	0800aa07 	.word	0x0800aa07
 800a9dc:	0800aa07 	.word	0x0800aa07
 800a9e0:	0800aa07 	.word	0x0800aa07
 800a9e4:	0800aa07 	.word	0x0800aa07
 800a9e8:	0800aa07 	.word	0x0800aa07
 800a9ec:	0800aa01 	.word	0x0800aa01
 800a9f0:	0800aa01 	.word	0x0800aa01
 800a9f4:	0800aa01 	.word	0x0800aa01
 800a9f8:	0800aa07 	.word	0x0800aa07
 800a9fc:	0800aa01 	.word	0x0800aa01
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
                break;
 800aa04:	e002      	b.n	800aa0c <prvTCPSocketIsActive+0x54>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800aa06:	2301      	movs	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
                break;
 800aa0a:	bf00      	nop
        }

        return xResult;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
    }
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop

0800aa1c <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aa2a:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800aa2c:	7cfb      	ldrb	r3, [r7, #19]
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d81a      	bhi.n	800aa68 <prvTCPStatusAgeCheck+0x4c>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <prvTCPStatusAgeCheck+0x1c>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa63 	.word	0x0800aa63
 800aa3c:	0800aa63 	.word	0x0800aa63
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	0800aa5d 	.word	0x0800aa5d
 800aa50:	0800aa69 	.word	0x0800aa69
 800aa54:	0800aa69 	.word	0x0800aa69
 800aa58:	0800aa63 	.word	0x0800aa63
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
                    break;
 800aa60:	e005      	b.n	800aa6e <prvTCPStatusAgeCheck+0x52>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]
                    break;
 800aa66:	e002      	b.n	800aa6e <prvTCPStatusAgeCheck+0x52>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
                    break;
 800aa6c:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d025      	beq.n	800aac0 <prvTCPStatusAgeCheck+0xa4>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800aa74:	f7fa fbb2 	bl	80051dc <xTaskGetTickCount>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f247 5230 	movw	r2, #30000	; 0x7530
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d919      	bls.n	800aac0 <prvTCPStatusAgeCheck+0xa4>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800aa8c:	2108      	movs	r1, #8
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fe29 	bl	800b6e6 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00d      	beq.n	800aac0 <prvTCPStatusAgeCheck+0xa4>
                    {
                        if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaaa:	f003 0308 	and.w	r3, r3, #8
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <prvTCPStatusAgeCheck+0x9e>
                        {
                            /* As it did not get connected, and the user can never
                             * accept() it anymore, it will be deleted now.  Called from
                             * the IP-task, so it's safe to call the internal Close
                             * function: vSocketClose(). */
                            ( void ) vSocketClose( pxSocket );
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7fe fda1 	bl	80095fc <vSocketClose>
                        }

                        /* Return a negative value to tell to inform the caller
                         * xTCPTimerCheck()
                         * that the socket got closed and may not be accessed anymore. */
                        xResult = -1;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800aac0:	697b      	ldr	r3, [r7, #20]
        }
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop

0800aacc <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800aad8:	2300      	movs	r3, #0
 800aada:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d906      	bls.n	800aaf4 <xTCPSocketCheck+0x28>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 f930 	bl	800bd54 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d02a      	beq.n	800ab52 <xTCPSocketCheck+0x86>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d116      	bne.n	800ab3a <xTCPSocketCheck+0x6e>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <xTCPSocketCheck+0x5e>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800ab16:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <xTCPSocketCheck+0xc0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b01      	cmp	r3, #1
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800ab20:	2300      	movs	r3, #0
 800ab22:	2228      	movs	r2, #40	; 0x28
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f8c9 	bl	800acbc <prvTCPReturnPacket>
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 f892 	bl	800bc54 <prvTCPNextTimeout>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d901      	bls.n	800ab3a <xTCPSocketCheck+0x6e>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800ab36:	2301      	movs	r3, #1
 800ab38:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d007      	beq.n	800ab52 <xTCPSocketCheck+0x86>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab46:	4618      	mov	r0, r3
 800ab48:	f003 fcf4 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d113      	bne.n	800ab80 <xTCPSocketCheck+0xb4>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	d804      	bhi.n	800ab6c <xTCPSocketCheck+0xa0>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d102      	bne.n	800ab72 <xTCPSocketCheck+0xa6>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f80f 	bl	800ab90 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f86e 	bl	800bc54 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ff4f 	bl	800aa1c <prvTCPStatusAgeCheck>
 800ab7e:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800ab80:	68fb      	ldr	r3, [r7, #12]
    }
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2001a9fc 	.word	0x2001a9fc

0800ab90 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d010      	beq.n	800abcc <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f853 	bl	800ac60 <prvTCPSendRepeated>
 800abba:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d049      	beq.n	800ac56 <prvTCPSendPacket+0xc6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f003 fcb5 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
 800abca:	e044      	b.n	800ac56 <prvTCPSendPacket+0xc6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d904      	bls.n	800abe0 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800abd6:	2108      	movs	r1, #8
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fd84 	bl	800b6e6 <vTCPStateChange>
 800abde:	e03a      	b.n	800ac56 <prvTCPSendPacket+0xc6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d105      	bne.n	800abfc <prvTCPSendPacket+0x6c>
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fa77 	bl	800b0e4 <prvTCPPrepareConnect>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d12c      	bne.n	800ac56 <prvTCPSendPacket+0xc6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800abfc:	2314      	movs	r3, #20
 800abfe:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	330e      	adds	r3, #14
 800ac04:	3380      	adds	r3, #128	; 0x80
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4413      	add	r3, r2
 800ac0a:	3302      	adds	r3, #2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff fe81 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800ac12:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fcef 	bl	800b5fc <prvSetSynAckOptions>
 800ac1e:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3328      	adds	r3, #40	; 0x28
 800ac24:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	3314      	adds	r3, #20
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac40:	3301      	adds	r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f833 	bl	800acbc <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800ac56:	69fb      	ldr	r3, [r7, #28]
    }
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	e016      	b.n	800aca6 <prvTCPSendRepeated+0x46>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fe83 	bl	800b988 <prvTCPPrepareSend>
 800ac82:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dd11      	ble.n	800acae <prvTCPSendRepeated+0x4e>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6819      	ldr	r1, [r3, #0]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	2300      	movs	r3, #0
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f812 	bl	800acbc <prvTCPReturnPacket>
                {
                    *ppxNetworkBuffer = NULL;
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	3301      	adds	r3, #1
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b07      	cmp	r3, #7
 800acaa:	d9e5      	bls.n	800ac78 <prvTCPSendRepeated+0x18>
 800acac:	e000      	b.n	800acb0 <prvTCPSendRepeated+0x50>
                break;
 800acae:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800acb0:	693b      	ldr	r3, [r7, #16]
    }
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b09e      	sub	sp, #120	; 0x78
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	677b      	str	r3, [r7, #116]	; 0x74
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	663b      	str	r3, [r7, #96]	; 0x60
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800acd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10c      	bne.n	800acf2 <prvTCPReturnPacket+0x36>
        {
            pxNetworkBuffer = &xTempBuffer;
 800acd8:	f107 0314 	add.w	r3, r7, #20
 800acdc:	663b      	str	r3, [r7, #96]	; 0x60
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800ace4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ace6:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800ace8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acea:	2246      	movs	r2, #70	; 0x46
 800acec:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	677b      	str	r3, [r7, #116]	; 0x74
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800acf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 81c5 	beq.w	800b084 <prvTCPReturnPacket+0x3c8>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800acfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fdf2 	bl	800a8e8 <vCastPointerTo_TCPPacket_t>
 800ad04:	65f8      	str	r0, [r7, #92]	; 0x5c
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800ad06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad08:	330e      	adds	r3, #14
 800ad0a:	65bb      	str	r3, [r7, #88]	; 0x58
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800ad0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad0e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80ea 	beq.w	800aeec <prvTCPReturnPacket+0x230>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	33d8      	adds	r3, #216	; 0xd8
 800ad1c:	64fb      	str	r3, [r7, #76]	; 0x4c

                if( pxSocket->u.xTCP.rxStream != NULL )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d006      	beq.n	800ad34 <prvTCPReturnPacket+0x78>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff fd81 	bl	800a832 <uxStreamBufferFrontSpace>
 800ad30:	6738      	str	r0, [r7, #112]	; 0x70
 800ad32:	e002      	b.n	800ad3a <prvTCPReturnPacket+0x7e>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad38:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800ad3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff fd15 	bl	800a770 <FreeRTOS_min_uint32>
 800ad46:	66f8      	str	r0, [r7, #108]	; 0x6c

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <prvTCPReturnPacket+0xac>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <prvTCPReturnPacket+0xb0>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ad72:	461a      	mov	r2, r3
 800ad74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d20a      	bcs.n	800ad90 <prvTCPReturnPacket+0xd4>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ad80:	461a      	mov	r2, r3
 800ad82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d303      	bcc.n	800ad90 <prvTCPReturnPacket+0xd4>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ad8e:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800ad96:	461a      	mov	r2, r3
 800ad98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9a:	40d3      	lsrs	r3, r2
 800ad9c:	667b      	str	r3, [r7, #100]	; 0x64
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800ad9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ada0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d902      	bls.n	800adae <prvTCPReturnPacket+0xf2>
                {
                    ulWinSize = 0xfffcUL;
 800ada8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800adac:	667b      	str	r3, [r7, #100]	; 0x64
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800adae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	021b      	lsls	r3, r3, #8
 800adb4:	b21a      	sxth	r2, r3
 800adb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adb8:	b29b      	uxth	r3, r3
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	b21b      	sxth	r3, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b21b      	sxth	r3, r3
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adc8:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800add0:	f36f 0300 	bfc	r3, #0, #1
 800add4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800add8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adda:	691a      	ldr	r2, [r3, #16]
 800addc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adde:	441a      	add	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d02f      	beq.n	800ae54 <prvTCPReturnPacket+0x198>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800adfa:	f36f 0341 	bfc	r3, #1, #1
 800adfe:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ae08:	f043 0304 	orr.w	r3, r3, #4
 800ae0c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ae16:	1e5a      	subs	r2, r3, #1
 800ae18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae1a:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800ae1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae20:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ae24:	061a      	lsls	r2, r3, #24
 800ae26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae28:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae32:	431a      	orrs	r2, r3
 800ae34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae36:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae40:	431a      	orrs	r2, r3
 800ae42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae44:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ae48:	0e1b      	lsrs	r3, r3, #24
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae4e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800ae52:	e034      	b.n	800aebe <prvTCPReturnPacket+0x202>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ae5a:	061a      	lsls	r2, r3, #24
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ae70:	0a1b      	lsrs	r3, r3, #8
 800ae72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae76:	431a      	orrs	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ae7e:	0e1b      	lsrs	r3, r3, #24
 800ae80:	431a      	orrs	r2, r3
 800ae82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae84:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800ae88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d013      	beq.n	800aebe <prvTCPReturnPacket+0x202>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3b28      	subs	r3, #40	; 0x28
 800ae9a:	64bb      	str	r3, [r7, #72]	; 0x48

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800ae9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea2:	441a      	add	r2, r3
 800aea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d008      	beq.n	800aebe <prvTCPReturnPacket+0x202>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800aeac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aeb2:	f023 0301 	bic.w	r3, r3, #1
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800aebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	061a      	lsls	r2, r3, #24
 800aec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aece:	431a      	orrs	r2, r3
 800aed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	0a1b      	lsrs	r3, r3, #8
 800aed6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeda:	431a      	orrs	r2, r3
 800aedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	0e1b      	lsrs	r3, r3, #24
 800aee2:	431a      	orrs	r2, r3
 800aee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aee6:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800aeea:	e00d      	b.n	800af08 <prvTCPReturnPacket+0x24c>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800aeec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeee:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800aef2:	653b      	str	r3, [r7, #80]	; 0x50
 800aef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aef6:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800aefa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aefc:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800af00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af04:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800af08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af0a:	2280      	movs	r2, #128	; 0x80
 800af0c:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	b29b      	uxth	r3, r3
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	b29a      	uxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	0a1b      	lsrs	r3, r3, #8
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b29a      	uxth	r2, r3
 800af20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af22:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <prvTCPReturnPacket+0x276>
 800af2a:	4b58      	ldr	r3, [pc, #352]	; (800b08c <prvTCPReturnPacket+0x3d0>)
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d103      	bne.n	800af3a <prvTCPReturnPacket+0x27e>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800af32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	66bb      	str	r3, [r7, #104]	; 0x68
 800af38:	e002      	b.n	800af40 <prvTCPReturnPacket+0x284>
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800af3a:	4b54      	ldr	r3, [pc, #336]	; (800b08c <prvTCPReturnPacket+0x3d0>)
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800af40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af46:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800af48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af4c:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800af4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af50:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800af54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	4313      	orrs	r3, r2
 800af5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800af60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af64:	b29a      	uxth	r2, r3
 800af66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af68:	845a      	strh	r2, [r3, #34]	; 0x22
 800af6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800af70:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800af72:	4b47      	ldr	r3, [pc, #284]	; (800b090 <prvTCPReturnPacket+0x3d4>)
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	b21a      	sxth	r2, r3
 800af7a:	4b45      	ldr	r3, [pc, #276]	; (800b090 <prvTCPReturnPacket+0x3d4>)
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	0a1b      	lsrs	r3, r3, #8
 800af80:	b29b      	uxth	r3, r3
 800af82:	b21b      	sxth	r3, r3
 800af84:	4313      	orrs	r3, r2
 800af86:	b21b      	sxth	r3, r3
 800af88:	b29a      	uxth	r2, r3
 800af8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af8c:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800af8e:	4b40      	ldr	r3, [pc, #256]	; (800b090 <prvTCPReturnPacket+0x3d4>)
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	4b3e      	ldr	r3, [pc, #248]	; (800b090 <prvTCPReturnPacket+0x3d4>)
 800af98:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800af9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af9c:	2200      	movs	r2, #0
 800af9e:	719a      	strb	r2, [r3, #6]
 800afa0:	2200      	movs	r2, #0
 800afa2:	71da      	strb	r2, [r3, #7]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f103 020e 	add.w	r2, r3, #14
 800afaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afac:	61da      	str	r2, [r3, #28]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    /* calculate the IP header checksum, in case the driver won't do that. */
                    pxIPHeader->usHeaderChecksum = 0x00U;
 800afae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afb0:	2200      	movs	r2, #0
 800afb2:	729a      	strb	r2, [r3, #10]
 800afb4:	2200      	movs	r2, #0
 800afb6:	72da      	strb	r2, [r3, #11]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800afb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afba:	2214      	movs	r2, #20
 800afbc:	4619      	mov	r1, r3
 800afbe:	2000      	movs	r0, #0
 800afc0:	f7fd fd08 	bl	80089d4 <usGenerateChecksum>
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afca:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800afcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afce:	895b      	ldrh	r3, [r3, #10]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	021b      	lsls	r3, r3, #8
 800afd4:	b21a      	sxth	r2, r3
 800afd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afd8:	895b      	ldrh	r3, [r3, #10]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	0a1b      	lsrs	r3, r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	b21b      	sxth	r3, r3
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	43db      	mvns	r3, r3
 800afea:	b29a      	uxth	r2, r3
 800afec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afee:	815a      	strh	r2, [r3, #10]

                    /* calculate the TCP checksum for an outgoing packet. */
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800aff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800affa:	f7fd fbcd 	bl	8008798 <usGenerateProtocolChecksum>

                    /* A calculated checksum of 0 must be inverted as 0 means the checksum
                     * is disabled. */
                    if( pxTCPPacket->xTCPHeader.usChecksum == 0U )
 800affe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b002:	b29b      	uxth	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d108      	bne.n	800b01a <prvTCPReturnPacket+0x35e>
                    {
                        pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 800b008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b00a:	f04f 32ff 	mov.w	r2, #4294967295
 800b00e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800b012:	f04f 32ff 	mov.w	r2, #4294967295
 800b016:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800b01a:	6d78      	ldr	r0, [r7, #84]	; 0x54
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800b01c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b01e:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800b020:	2206      	movs	r2, #6
 800b022:	4619      	mov	r1, r3
 800b024:	f005 f9d5 	bl	80103d2 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800b028:	4b18      	ldr	r3, [pc, #96]	; (800b08c <prvTCPReturnPacket+0x3d0>)
 800b02a:	643b      	str	r3, [r7, #64]	; 0x40
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800b02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b02e:	3306      	adds	r3, #6
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b032:	2206      	movs	r2, #6
 800b034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b038:	f005 f9cb 	bl	80103d2 <memcpy>
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800b03c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b03e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b040:	f003 fc94 	bl	800e96c <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800b044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b046:	2b00      	cmp	r3, #0
 800b048:	d11c      	bne.n	800b084 <prvTCPReturnPacket+0x3c8>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800b04a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b04c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b050:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	4313      	orrs	r3, r2
 800b058:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b05c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b05e:	b29a      	uxth	r2, r3
 800b060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b062:	845a      	strh	r2, [r3, #34]	; 0x22
 800b064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b066:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b068:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800b06a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b06c:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800b070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b072:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b078:	3306      	adds	r3, #6
 800b07a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b07c:	2206      	movs	r2, #6
 800b07e:	4618      	mov	r0, r3
 800b080:	f005 f9a7 	bl	80103d2 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800b084:	bf00      	nop
 800b086:	3778      	adds	r7, #120	; 0x78
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20000010 	.word	0x20000010
 800b090:	2001a96c 	.word	0x2001a96c

0800b094 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800b094:	b5b0      	push	{r4, r5, r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af02      	add	r7, sp, #8
 800b09a:	6078      	str	r0, [r7, #4]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b0a8:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800b0ac:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b0b6:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800b0ba:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
        vTCPWindowCreate(
 800b0d0:	9201      	str	r2, [sp, #4]
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	f002 fa38 	bl	800d54c <vTCPWindowCreate>
    }
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0e4 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08c      	sub	sp, #48	; 0x30
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800b0f4:	f107 030c 	add.w	r3, r7, #12
 800b0f8:	2206      	movs	r2, #6
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f005 f98c 	bl	801041a <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	061a      	lsls	r2, r3, #24
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	0a1b      	lsrs	r3, r3, #8
 800b11a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b11e:	431a      	orrs	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b124:	0e1b      	lsrs	r3, r3, #24
 800b126:	4313      	orrs	r3, r2
 800b128:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800b12a:	f107 020c 	add.w	r2, r7, #12
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f7fb fd07 	bl	8006b48 <eARPGetCacheEntry>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800b140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b144:	2b01      	cmp	r3, #1
 800b146:	d00e      	beq.n	800b166 <prvTCPPrepareConnect+0x82>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b14e:	3301      	adds	r3, #1
 800b150:	b2da      	uxtb	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fb fe36 	bl	8006dcc <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800b164:	e000      	b.n	800b168 <prvTCPPrepareConnect+0x84>
                break;            /* We can now prepare the SYN packet. */
 800b166:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00f      	beq.n	800b18e <prvTCPPrepareConnect+0xaa>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800b16e:	4b53      	ldr	r3, [pc, #332]	; (800b2bc <prvTCPPrepareConnect+0x1d8>)
 800b170:	6958      	ldr	r0, [r3, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b17e:	f7f5 fc75 	bl	8000a6c <ulApplicationGetNextSequenceNumber>
 800b182:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <prvTCPPrepareConnect+0xaa>
            {
                xReturn = pdFALSE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 808d 	beq.w	800b2b0 <prvTCPPrepareConnect+0x1cc>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3382      	adds	r3, #130	; 0x82
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fba4 	bl	800a8e8 <vCastPointerTo_TCPPacket_t>
 800b1a0:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	330e      	adds	r3, #14
 800b1a6:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b1b6:	f043 0308 	orr.w	r3, r3, #8
 800b1ba:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3382      	adds	r3, #130	; 0x82
 800b1c2:	2246      	movs	r2, #70	; 0x46
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f005 f927 	bl	801041a <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	3306      	adds	r3, #6
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f107 030c 	add.w	r3, r7, #12
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	6010      	str	r0, [r2, #0]
 800b1da:	889b      	ldrh	r3, [r3, #4]
 800b1dc:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f042 0208 	orr.w	r2, r2, #8
 800b1e6:	731a      	strb	r2, [r3, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2245      	movs	r2, #69	; 0x45
 800b1f0:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800b1f2:	2338      	movs	r3, #56	; 0x38
 800b1f4:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800b1f6:	8b7b      	ldrh	r3, [r7, #26]
 800b1f8:	021b      	lsls	r3, r3, #8
 800b1fa:	b21a      	sxth	r2, r3
 800b1fc:	8b7b      	ldrh	r3, [r7, #26]
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	b21b      	sxth	r3, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	b21b      	sxth	r3, r3
 800b208:	b29a      	uxth	r2, r3
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	2280      	movs	r2, #128	; 0x80
 800b212:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	2206      	movs	r2, #6
 800b218:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800b21a:	4b28      	ldr	r3, [pc, #160]	; (800b2bc <prvTCPPrepareConnect+0x1d8>)
 800b21c:	695a      	ldr	r2, [r3, #20]
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b226:	061a      	lsls	r2, r3, #24
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b232:	431a      	orrs	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	0a1b      	lsrs	r3, r3, #8
 800b23a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b23e:	431a      	orrs	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	0e1b      	lsrs	r3, r3, #24
 800b246:	431a      	orrs	r2, r3
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	b21a      	sxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b258:	0a1b      	lsrs	r3, r3, #8
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	b21b      	sxth	r3, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	b21b      	sxth	r3, r3
 800b262:	b29a      	uxth	r2, r3
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	b21a      	sxth	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b274:	0a1b      	lsrs	r3, r3, #8
 800b276:	b29b      	uxth	r3, r3
 800b278:	b21b      	sxth	r3, r3
 800b27a:	4313      	orrs	r3, r2
 800b27c:	b21b      	sxth	r3, r3
 800b27e:	b29a      	uxth	r2, r3
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b290:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	2250      	movs	r2, #80	; 0x50
 800b298:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 fb79 	bl	800c99c <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff fef2 	bl	800b094 <prvTCPCreateWindow>
        }

        return xReturn;
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3730      	adds	r7, #48	; 0x30
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000010 	.word	0x20000010

0800b2c0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08c      	sub	sp, #48	; 0x30
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800b2ca:	2322      	movs	r3, #34	; 0x22
 800b2cc:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fb1c 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800b2dc:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	3314      	adds	r3, #20
 800b2e2:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	7b1b      	ldrb	r3, [r3, #12]
 800b2f2:	2b50      	cmp	r3, #80	; 0x50
 800b2f4:	d93e      	bls.n	800b374 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	7b1b      	ldrb	r3, [r3, #12]
 800b2fa:	091b      	lsrs	r3, r3, #4
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	3b05      	subs	r3, #5
 800b300:	b2db      	uxtb	r3, r3
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800b306:	7cfb      	ldrb	r3, [r7, #19]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d22f      	bcs.n	800b374 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d22a      	bcs.n	800b374 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	69da      	ldr	r2, [r3, #28]
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800b326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b328:	429a      	cmp	r2, r3
 800b32a:	d823      	bhi.n	800b374 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	7b5b      	ldrb	r3, [r3, #13]
 800b330:	f003 0302 	and.w	r3, r3, #2
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800b338:	2301      	movs	r3, #1
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b33c:	e001      	b.n	800b342 <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800b33e:	2300      	movs	r3, #0
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	d012      	beq.n	800b36e <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b350:	f000 f814 	bl	800b37c <prvSingleStepTCPHeaderOptions>
 800b354:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800b364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800b36c:	e7e9      	b.n	800b342 <prvCheckOptions+0x82>
                            break;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <prvCheckOptions+0xb4>
                            break;
 800b372:	bf00      	nop
                    }
                }
            }
        }
    }
 800b374:	bf00      	nop
 800b376:	3730      	adds	r7, #48	; 0x30
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08a      	sub	sp, #40	; 0x28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	33d8      	adds	r3, #216	; 0xd8
 800b392:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800b394:	2300      	movs	r3, #0
 800b396:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
 800b3a4:	e0c1      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d102      	bne.n	800b3b4 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	623b      	str	r3, [r7, #32]
 800b3b2:	e0ba      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d802      	bhi.n	800b3c0 <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	623b      	str	r3, [r7, #32]
 800b3be:	e0b4      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d11c      	bne.n	800b402 <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d904      	bls.n	800b3d8 <prvSingleStepTCPHeaderOptions+0x5c>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d002      	beq.n	800b3de <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	623b      	str	r3, [r7, #32]
 800b3dc:	e0a5      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	789a      	ldrb	r2, [r3, #2]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b3f4:	f043 0310 	orr.w	r3, r3, #16
 800b3f8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	623b      	str	r3, [r7, #32]
 800b400:	e093      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d15d      	bne.n	800b4c6 <prvSingleStepTCPHeaderOptions+0x14a>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d904      	bls.n	800b41a <prvSingleStepTCPHeaderOptions+0x9e>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3301      	adds	r3, #1
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b04      	cmp	r3, #4
 800b418:	d002      	beq.n	800b420 <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	623b      	str	r3, [r7, #32]
 800b41e:	e084      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3302      	adds	r3, #2
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fab1 	bl	800a98c <usChar2u16>
 800b42a:	4603      	mov	r3, r0
 800b42c:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b434:	461a      	mov	r2, r3
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	4293      	cmp	r3, r2
 800b43a:	d006      	beq.n	800b44a <prvSingleStepTCPHeaderOptions+0xce>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <prvSingleStepTCPHeaderOptions+0xce>
                    {
                        uxIndex = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d16c      	bne.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b456:	461a      	mov	r2, r3
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d230      	bcs.n	800b4c0 <prvSingleStepTCPHeaderOptions+0x144>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b464:	f043 0301 	orr.w	r3, r3, #1
 800b468:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b472:	461a      	mov	r2, r3
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	4293      	cmp	r3, r2
 800b478:	d204      	bcs.n	800b484 <prvSingleStepTCPHeaderOptions+0x108>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	fb02 f203 	mul.w	r2, r2, r3
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	623b      	str	r3, [r7, #32]
 800b4c4:	e031      	b.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800b4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d927      	bls.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
 800b4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d322      	bcc.n	800b52a <prvSingleStepTCPHeaderOptions+0x1ae>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b05      	cmp	r3, #5
 800b4ea:	d119      	bne.n	800b520 <prvSingleStepTCPHeaderOptions+0x1a4>
                        {
                            ucLen -= 2U;
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f0:	3b02      	subs	r3, #2
 800b4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800b4fc:	e00c      	b.n	800b518 <prvSingleStepTCPHeaderOptions+0x19c>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	6a39      	ldr	r1, [r7, #32]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 f816 	bl	800b534 <prvReadSackOption>
                                uxIndex += 8U;
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	3308      	adds	r3, #8
 800b50c:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800b50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b512:	3b08      	subs	r3, #8
 800b514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800b518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b51c:	2b07      	cmp	r3, #7
 800b51e:	d8ee      	bhi.n	800b4fe <prvSingleStepTCPHeaderOptions+0x182>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b524:	6a3a      	ldr	r2, [r7, #32]
 800b526:	4413      	add	r3, r2
 800b528:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 800b52a:	6a3b      	ldr	r3, [r7, #32]
    }
 800b52c:	4618      	mov	r0, r3
 800b52e:	3728      	adds	r7, #40	; 0x28
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	4413      	add	r3, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fa05 	bl	800a956 <ulChar2u32>
 800b54c:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3304      	adds	r3, #4
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff f9fd 	bl	800a956 <ulChar2u32>
 800b55c:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	33d8      	adds	r3, #216	; 0xd8
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	69f9      	ldr	r1, [r7, #28]
 800b566:	4618      	mov	r0, r3
 800b568:	f002 fd52 	bl	800e010 <ulTCPWindowTxSack>
 800b56c:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01d      	beq.n	800b5b2 <prvReadSackOption+0x7e>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01a      	beq.n	800b5b2 <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b580:	2300      	movs	r3, #0
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	f7ff f86d 	bl	800a668 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f043 0202 	orr.w	r2, r3, #2
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800b5b2:	bf00      	nop
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
 800b5d2:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800b5d8:	e005      	b.n	800b5e6 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	085b      	lsrs	r3, r3, #1
 800b5de:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800b5e0:	7afb      	ldrb	r3, [r7, #11]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ec:	d2f5      	bcs.n	800b5da <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
        }
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b60c:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2202      	movs	r2, #2
 800b612:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2204      	movs	r2, #4
 800b618:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800b61a:	89fb      	ldrh	r3, [r7, #14]
 800b61c:	0a1b      	lsrs	r3, r3, #8
 800b61e:	b29b      	uxth	r3, r3
 800b620:	b2da      	uxtb	r2, r3
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800b626:	89fb      	ldrh	r3, [r7, #14]
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff ffc3 	bl	800b5ba <prvWinScaleFactor>
 800b634:	4603      	mov	r3, r0
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2201      	movs	r2, #1
 800b642:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2203      	movs	r2, #3
 800b648:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2203      	movs	r2, #3
 800b64e:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800b65a:	2308      	movs	r3, #8
 800b65c:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	4413      	add	r3, r2
 800b664:	3314      	adds	r3, #20
 800b666:	2201      	movs	r2, #1
 800b668:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3301      	adds	r3, #1
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	4413      	add	r3, r2
 800b672:	2201      	movs	r2, #1
 800b674:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	3302      	adds	r3, #2
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	4413      	add	r3, r2
 800b67e:	2204      	movs	r2, #4
 800b680:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	3303      	adds	r3, #3
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	4413      	add	r3, r2
 800b68a:	2202      	movs	r2, #2
 800b68c:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	3304      	adds	r3, #4
 800b692:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800b694:	68bb      	ldr	r3, [r7, #8]
    }
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800b6a6:	f7f9 fd99 	bl	80051dc <xTaskGetTickCount>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b6b6:	f36f 0382 	bfc	r3, #2, #1
 800b6ba:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b6c4:	f36f 0341 	bfc	r3, #1, #1
 800b6c8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800b6d4:	f7f9 fd82 	bl	80051dc <xTaskGetTickCount>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b086      	sub	sp, #24
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b6fc:	2b04      	cmp	r3, #4
 800b6fe:	d906      	bls.n	800b70e <vTCPStateChange+0x28>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b706:	2b08      	cmp	r3, #8
 800b708:	d001      	beq.n	800b70e <vTCPStateChange+0x28>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e000      	b.n	800b710 <vTCPStateChange+0x2a>
 800b70e:	2300      	movs	r3, #0
 800b710:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	2b04      	cmp	r3, #4
 800b716:	d904      	bls.n	800b722 <vTCPStateChange+0x3c>
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	2b08      	cmp	r3, #8
 800b71c:	d001      	beq.n	800b722 <vTCPStateChange+0x3c>
 800b71e:	2301      	movs	r3, #1
 800b720:	e000      	b.n	800b724 <vTCPStateChange+0x3e>
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	f000 8089 	beq.w	800b842 <vTCPStateChange+0x15c>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d065      	beq.n	800b802 <vTCPStateChange+0x11c>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d04a      	beq.n	800b7dc <vTCPStateChange+0xf6>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <vTCPStateChange+0x76>
                    {
                        xParent = pxSocket;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	e011      	b.n	800b780 <vTCPStateChange+0x9a>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b760:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10b      	bne.n	800b780 <vTCPStateChange+0x9a>
 800b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76c:	b672      	cpsid	i
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	b662      	cpsie	i
 800b77c:	60bb      	str	r3, [r7, #8]
 800b77e:	e7fe      	b.n	800b77e <vTCPStateChange+0x98>
                    }

                    if( xParent != NULL )
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d018      	beq.n	800b7b8 <vTCPStateChange+0xd2>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d102      	bne.n	800b794 <vTCPStateChange+0xae>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f043 0204 	orr.w	r2, r3, #4
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <vTCPStateChange+0xd2>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7c4:	f36f 0382 	bfc	r3, #2, #1
 800b7c8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7d2:	f043 0302 	orr.w	r3, r3, #2
 800b7d6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b7da:	e024      	b.n	800b826 <vTCPStateChange+0x140>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f043 0208 	orr.w	r2, r3, #8
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ec:	f003 0302 	and.w	r3, r3, #2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d018      	beq.n	800b826 <vTCPStateChange+0x140>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	e011      	b.n	800b826 <vTCPStateChange+0x140>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f043 0220 	orr.w	r2, r3, #32
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b812:	f003 0304 	and.w	r3, r3, #4
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <vTCPStateChange+0x140>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff f8c3 	bl	800a9b8 <prvTCPSocketIsActive>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d122      	bne.n	800b87e <vTCPStateChange+0x198>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b840:	e01d      	b.n	800b87e <vTCPStateChange+0x198>
            }
        }
        else
        {
            if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 800b842:	78fb      	ldrb	r3, [r7, #3]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d11a      	bne.n	800b87e <vTCPStateChange+0x198>
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b84e:	f003 0304 	and.w	r3, r3, #4
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d107      	bne.n	800b868 <vTCPStateChange+0x182>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <vTCPStateChange+0x198>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b86e:	f003 0308 	and.w	r3, r3, #8
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d102      	bne.n	800b87e <vTCPStateChange+0x198>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7fd fe99 	bl	80095b0 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff ff09 	bl	800b69e <prvTCPTouchSocket>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <vTCPStateChange+0x1b2>
        {
            vSocketWakeUpUser( xParent );
 800b892:	6978      	ldr	r0, [r7, #20]
 800b894:	f7fe f9e2 	bl	8009c5c <vSocketWakeUpUser>
        }
    }
 800b898:	bf00      	nop
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800b8ae:	4b35      	ldr	r3, [pc, #212]	; (800b984 <prvTCPBufferResize+0xe4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00b      	beq.n	800b8ce <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800b8b6:	f240 43c6 	movw	r3, #1222	; 0x4c6
 800b8ba:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e019      	b.n	800b8fc <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	e016      	b.n	800b8fc <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3336      	adds	r3, #54	; 0x36
 800b8d6:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b45      	cmp	r3, #69	; 0x45
 800b8dc:	d801      	bhi.n	800b8e2 <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800b8de:	2346      	movs	r3, #70	; 0x46
 800b8e0:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <prvTCPBufferResize+0x52>
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	69ba      	ldr	r2, [r7, #24]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d902      	bls.n	800b8f8 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	e001      	b.n	800b8fc <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d023      	beq.n	800b94a <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800b902:	2100      	movs	r1, #0
 800b904:	69b8      	ldr	r0, [r7, #24]
 800b906:	f002 fd97 	bl	800e438 <pxGetNetworkBufferWithDescriptor>
 800b90a:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d033      	beq.n	800b97a <prvTCPBufferResize+0xda>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00c      	beq.n	800b938 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	6998      	ldr	r0, [r3, #24]
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	6999      	ldr	r1, [r3, #24]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	69db      	ldr	r3, [r3, #28]
 800b92a:	461a      	mov	r2, r3
 800b92c:	f004 fd51 	bl	80103d2 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b930:	68b8      	ldr	r0, [r7, #8]
 800b932:	f002 fdff 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
 800b936:	e020      	b.n	800b97a <prvTCPBufferResize+0xda>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	6998      	ldr	r0, [r3, #24]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	3382      	adds	r3, #130	; 0x82
 800b940:	2246      	movs	r2, #70	; 0x46
 800b942:	4619      	mov	r1, r3
 800b944:	f004 fd45 	bl	80103d2 <memcpy>
 800b948:	e017      	b.n	800b97a <prvTCPBufferResize+0xda>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10b      	bne.n	800b968 <prvTCPBufferResize+0xc8>
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	b672      	cpsid	i
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	b662      	cpsie	i
 800b964:	613b      	str	r3, [r7, #16]
 800b966:	e7fe      	b.n	800b966 <prvTCPBufferResize+0xc6>
            pxReturn = pxNetworkBuffer;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	4413      	add	r3, r2
 800b972:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800b97a:	69fb      	ldr	r3, [r7, #28]
    }
 800b97c:	4618      	mov	r0, r3
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	08010e28 	.word	0x08010e28

0800b988 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800b988:	b580      	push	{r7, lr}
 800b98a:	b094      	sub	sp, #80	; 0x50
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	637b      	str	r3, [r7, #52]	; 0x34

        if( ( *ppxNetworkBuffer ) != NULL )
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d004      	beq.n	800b9aa <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9a8:	e002      	b.n	800b9b0 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3382      	adds	r3, #130	; 0x82
 800b9ae:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800b9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b2:	3322      	adds	r3, #34	; 0x22
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fe ffad 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800b9ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	33d8      	adds	r3, #216	; 0xd8
 800b9c0:	633b      	str	r3, [r7, #48]	; 0x30
        lDataLen = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	647b      	str	r3, [r7, #68]	; 0x44
        lStreamPos = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	617b      	str	r3, [r7, #20]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800b9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9cc:	7b5b      	ldrb	r3, [r3, #13]
 800b9ce:	f043 0310 	orr.w	r3, r3, #16
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d6:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d07a      	beq.n	800bad6 <prvTCPPrepareSend+0x14e>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d90a      	bls.n	800ba00 <prvTCPPrepareSend+0x78>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b9f0:	f107 0214 	add.w	r2, r7, #20
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9f8:	f002 f8f6 	bl	800dbe8 <ulTCPWindowTxGet>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	647b      	str	r3, [r7, #68]	; 0x44
            }

            if( lDataLen > 0 )
 800ba00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	dd67      	ble.n	800bad6 <prvTCPPrepareSend+0x14e>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6819      	ldr	r1, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7ff ff46 	bl	800b8a0 <prvTCPBufferResize>
 800ba14:	62f8      	str	r0, [r7, #44]	; 0x2c

                if( pxNewBuffer != NULL )
 800ba16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d059      	beq.n	800bad0 <prvTCPPrepareSend+0x148>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba20:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800ba28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba2a:	3322      	adds	r3, #34	; 0x22
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe ff71 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800ba32:	63f8      	str	r0, [r7, #60]	; 0x3c

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3336      	adds	r3, #54	; 0x36
 800ba38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba3a:	4413      	add	r3, r2
 800ba3c:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	f7fe febf 	bl	800a7ce <uxStreamBufferDistance>
 800ba50:	6278      	str	r0, [r7, #36]	; 0x24

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba58:	2301      	movs	r3, #1
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba62:	f7fe fe01 	bl	800a668 <uxStreamBufferGet>
 800ba66:	6238      	str	r0, [r7, #32]
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d02e      	beq.n	800bad6 <prvTCPPrepareSend+0x14e>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d126      	bne.n	800bad6 <prvTCPPrepareSend+0x14e>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f7fe fe99 	bl	800a7ce <uxStreamBufferDistance>
 800ba9c:	61f8      	str	r0, [r7, #28]

                        if( ulDistance == ulDataGot )
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d117      	bne.n	800bad6 <prvTCPPrepareSend+0x14e>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800baa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa8:	7b5b      	ldrb	r3, [r3, #13]
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab2:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baba:	441a      	add	r2, r3
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baca:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800bace:	e002      	b.n	800bad6 <prvTCPPrepareSend+0x14e>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295
 800bad4:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800bad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bad8:	2b00      	cmp	r3, #0
 800bada:	db7c      	blt.n	800bbd6 <prvTCPPrepareSend+0x24e>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d177      	bne.n	800bbd6 <prvTCPPrepareSend+0x24e>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baec:	f003 0320 	and.w	r3, r3, #32
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d029      	beq.n	800bb4a <prvTCPPrepareSend+0x1c2>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800baf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf8:	f001 ffbe 	bl	800da78 <xTCPWindowTxDone>
 800bafc:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d023      	beq.n	800bb4a <prvTCPPrepareSend+0x1c2>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800bb08:	f36f 1345 	bfc	r3, #5, #1
 800bb0c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800bb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb12:	7b5b      	ldrb	r3, [r3, #13]
 800bb14:	f043 0301 	orr.w	r3, r3, #1
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb28:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	6a1a      	ldr	r2, [r3, #32]
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800bb42:	2106      	movs	r1, #6
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff fdce 	bl	800b6e6 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d906      	bls.n	800bb62 <prvTCPPrepareSend+0x1da>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bb54:	2108      	movs	r1, #8
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f7ff fdc5 	bl	800b6e6 <vTCPStateChange>
                        lDataLen = -1;
 800bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb60:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d136      	bne.n	800bbd6 <prvTCPPrepareSend+0x24e>
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d12e      	bne.n	800bbd6 <prvTCPPrepareSend+0x24e>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800bb78:	f7f9 fb30 	bl	80051dc <xTaskGetTickCount>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	61bb      	str	r3, [r7, #24]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800bb86:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bb8a:	63bb      	str	r3, [r7, #56]	; 0x38

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <prvTCPPrepareSend+0x214>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800bb96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38
                        }

                        if( xAge > xMax )
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d918      	bls.n	800bbd6 <prvTCPPrepareSend+0x24e>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800bba4:	f7f9 fb1a 	bl	80051dc <xTaskGetTickCount>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	65da      	str	r2, [r3, #92]	; 0x5c
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bbb4:	f043 0302 	orr.w	r3, r3, #2
 800bbb8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800bbc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bbcc:	3301      	adds	r3, #1
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 800bbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc0f      	bgt.n	800bbfc <prvTCPPrepareSend+0x274>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d107      	bne.n	800bbfc <prvTCPPrepareSend+0x274>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d026      	beq.n	800bc4a <prvTCPPrepareSend+0x2c2>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800bbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfe:	7b5b      	ldrb	r3, [r3, #13]
 800bc00:	f023 0308 	bic.w	r3, r3, #8
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc08:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	3314      	adds	r3, #20
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc18:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1c:	7b5b      	ldrb	r3, [r3, #13]
 800bc1e:	f043 0310 	orr.w	r3, r3, #16
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc26:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 800bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d006      	beq.n	800bc3c <prvTCPPrepareSend+0x2b4>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	7b5b      	ldrb	r3, [r3, #13]
 800bc32:	f043 0308 	orr.w	r3, r3, #8
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3a:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3328      	adds	r3, #40	; 0x28
 800bc40:	637b      	str	r3, [r7, #52]	; 0x34
            lDataLen += ( int32_t ) uxIntermediateResult;
 800bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc46:	4413      	add	r3, r2
 800bc48:	647b      	str	r3, [r7, #68]	; 0x44
        }

        return lDataLen;
 800bc4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3748      	adds	r7, #72	; 0x48
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800bc5c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bc60:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d135      	bne.n	800bcd8 <prvTCPNextTimeout+0x84>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc72:	f003 0308 	and.w	r3, r3, #8
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d012      	beq.n	800bca2 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d809      	bhi.n	800bc9a <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bc92:	fa02 f303 	lsl.w	r3, r2, r3
 800bc96:	60bb      	str	r3, [r7, #8]
 800bc98:	e006      	b.n	800bca8 <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800bc9a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800bc9e:	60bb      	str	r3, [r7, #8]
 800bca0:	e002      	b.n	800bca8 <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800bca2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bca6:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcb6:	d30a      	bcc.n	800bcce <prvTCPNextTimeout+0x7a>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcbe:	fb02 f303 	mul.w	r3, r2, r3
 800bcc2:	4a23      	ldr	r2, [pc, #140]	; (800bd50 <prvTCPNextTimeout+0xfc>)
 800bcc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc8:	099b      	lsrs	r3, r3, #6
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	e000      	b.n	800bcd0 <prvTCPNextTimeout+0x7c>
 800bcce:	2201      	movs	r2, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bcd6:	e033      	b.n	800bd40 <prvTCPNextTimeout+0xec>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d12e      	bne.n	800bd40 <prvTCPNextTimeout+0xec>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bcee:	f107 0208 	add.w	r2, r7, #8
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f001 ff18 	bl	800db28 <xTCPWindowTxHasData>
 800bcf8:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <prvTCPNextTimeout+0xbe>
            {
                if( xResult != ( BaseType_t ) 0 )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <prvTCPNextTimeout+0xb8>
                {
                    ulDelayMs = 1UL;
 800bd06:	2301      	movs	r3, #1
 800bd08:	60bb      	str	r3, [r7, #8]
 800bd0a:	e002      	b.n	800bd12 <prvTCPNextTimeout+0xbe>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800bd0c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bd10:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd18:	fb02 f303 	mul.w	r3, r2, r3
 800bd1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd20:	d30a      	bcc.n	800bd38 <prvTCPNextTimeout+0xe4>
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd28:	fb02 f303 	mul.w	r3, r2, r3
 800bd2c:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <prvTCPNextTimeout+0xfc>)
 800bd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd32:	099b      	lsrs	r3, r3, #6
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	e000      	b.n	800bd3a <prvTCPNextTimeout+0xe6>
 800bd38:	2201      	movs	r2, #1
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	10624dd3 	.word	0x10624dd3

0800bd54 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fd7a 	bl	800a85a <uxStreamBufferMidSpace>
 800bd66:	4603      	mov	r3, r0
 800bd68:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	dd17      	ble.n	800bda0 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800bd76:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd7c:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800bd7e:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd84:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800bd86:	f001 fdc1 	bl	800d90c <lTCPWindowTxAdd>
 800bd8a:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd06      	ble.n	800bda0 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fd71 	bl	800a882 <vStreamBufferMoveMid>
            }
        }
    }
 800bda0:	bf00      	nop
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	3322      	adds	r3, #34	; 0x22
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fe fdab 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800bdbe:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	74fb      	strb	r3, [r7, #19]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	7b5b      	ldrb	r3, [r3, #13]
 800bdcc:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	33d8      	adds	r3, #216	; 0xd8
 800bdd2:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	061a      	lsls	r2, r3, #24
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bde8:	431a      	orrs	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	0e1b      	lsrs	r3, r3, #24
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800be00:	7cbb      	ldrb	r3, [r7, #18]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10b      	bne.n	800be3c <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1a      	ldr	r2, [r3, #32]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800be32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be36:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800be3a:	e00c      	b.n	800be56 <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	3301      	adds	r3, #1
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	429a      	cmp	r2, r3
 800be46:	d106      	bne.n	800be56 <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10b      	bne.n	800be7e <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2211      	movs	r2, #17
 800be72:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800be74:	210a      	movs	r1, #10
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fc35 	bl	800b6e6 <vTCPStateChange>
 800be7c:	e023      	b.n	800bec6 <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d103      	bne.n	800bea0 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2200      	movs	r2, #0
 800be9c:	735a      	strb	r2, [r3, #13]
 800be9e:	e012      	b.n	800bec6 <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2210      	movs	r2, #16
 800beb4:	735a      	strb	r2, [r3, #13]
 800beb6:	e002      	b.n	800bebe <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2200      	movs	r2, #0
 800bebc:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bebe:	2108      	movs	r1, #8
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff fc10 	bl	800b6e6 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a1a      	ldr	r2, [r3, #32]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	7b5b      	ldrb	r3, [r3, #13]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bedc:	3328      	adds	r3, #40	; 0x28
 800bede:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800bee0:	7cfb      	ldrb	r3, [r7, #19]
 800bee2:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beea:	3314      	adds	r3, #20
 800beec:	b2db      	uxtb	r3, r3
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	731a      	strb	r2, [r3, #12]
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800bef6:	69fb      	ldr	r3, [r7, #28]
    }
 800bef8:	4618      	mov	r0, r3
 800befa:	3720      	adds	r7, #32
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08c      	sub	sp, #48	; 0x30
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	3322      	adds	r3, #34	; 0x22
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe fcff 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800bf16:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	330e      	adds	r3, #14
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe fcd5 	bl	800a8d2 <vCastConstPointerTo_IPHeader_t>
 800bf28:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800bf2a:	2314      	movs	r3, #20
 800bf2c:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	7b1b      	ldrb	r3, [r3, #12]
 800bf36:	089b      	lsrs	r3, r3, #2
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800bf3e:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800bf40:	7efb      	ldrb	r3, [r7, #27]
 800bf42:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	699a      	ldr	r2, [r3, #24]
 800bf48:	6979      	ldr	r1, [r7, #20]
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	440b      	add	r3, r1
 800bf4e:	330e      	adds	r3, #14
 800bf50:	441a      	add	r2, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	3b0e      	subs	r3, #14
 800bf5c:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	021b      	lsls	r3, r3, #8
 800bf66:	b21a      	sxth	r2, r3
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	885b      	ldrh	r3, [r3, #2]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	b21b      	sxth	r3, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800bf7a:	8a7b      	ldrh	r3, [r7, #18]
 800bf7c:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800bf7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	dd01      	ble.n	800bf8a <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4413      	add	r3, r2
 800bf90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf92:	429a      	cmp	r2, r3
 800bf94:	dd06      	ble.n	800bfa4 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa2:	e001      	b.n	800bfa8 <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	7b5b      	ldrb	r3, [r3, #13]
 800bfac:	f003 0320 	and.w	r3, r3, #32
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d01c      	beq.n	800bfee <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	8a5b      	ldrh	r3, [r3, #18]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	b21a      	sxth	r2, r3
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	8a5b      	ldrh	r3, [r3, #18]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	0a1b      	lsrs	r3, r3, #8
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	b21b      	sxth	r3, r3
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	b21b      	sxth	r3, r3
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	441a      	add	r2, r3
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe2:	f7fe fbb5 	bl	800a750 <FreeRTOS_min_int32>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	1a9b      	subs	r3, r3, r2
 800bfec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800bfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800bff0:	4618      	mov	r0, r3
 800bff2:	3730      	adds	r7, #48	; 0x30
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08c      	sub	sp, #48	; 0x30
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
 800c004:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	3322      	adds	r3, #34	; 0x22
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe fc8c 	bl	800a92a <vCastConstPointerTo_ProtocolHeaders_t>
 800c012:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	33d8      	adds	r3, #216	; 0xd8
 800c01c:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	061a      	lsls	r2, r3, #24
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c032:	431a      	orrs	r2, r3
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	0a1b      	lsrs	r3, r3, #8
 800c03a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c03e:	431a      	orrs	r2, r3
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	0e1b      	lsrs	r3, r3, #24
 800c046:	4313      	orrs	r3, r2
 800c048:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d03f      	beq.n	800c0d0 <prvStoreRxData+0xd8>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c056:	2b03      	cmp	r3, #3
 800c058:	d93a      	bls.n	800c0d0 <prvStoreRxData+0xd8>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe fbcf 	bl	800a80a <uxStreamBufferGetSpace>
 800c06c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c06e:	e002      	b.n	800c076 <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c074:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	69b9      	ldr	r1, [r7, #24]
 800c07c:	69f8      	ldr	r0, [r7, #28]
 800c07e:	f001 fb47 	bl	800d710 <lTCPWindowRxCheck>
 800c082:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	db10      	blt.n	800c0ac <prvStoreRxData+0xb4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800c08a:	6979      	ldr	r1, [r7, #20]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7fd ff4f 	bl	8009f34 <lTCPAddRxdata>
 800c096:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d005      	beq.n	800c0ac <prvStoreRxData+0xb4>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc6d 	bl	800c980 <prvTCPSendReset>
                    xResult = -1;
 800c0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d113      	bne.n	800c0da <prvStoreRxData+0xe2>
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00f      	beq.n	800c0da <prvStoreRxData+0xe2>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7fd ff36 	bl	8009f34 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800c0ce:	e004      	b.n	800c0da <prvStoreRxData+0xe2>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c0d8:	e000      	b.n	800c0dc <prvStoreRxData+0xe4>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800c0da:	bf00      	nop
        }

        return xResult;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3730      	adds	r7, #48	; 0x30
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b088      	sub	sp, #32
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	3322      	adds	r3, #34	; 0x22
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fc0c 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c0fc:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	33d8      	adds	r3, #216	; 0xd8
 800c106:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c10e:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d013      	beq.n	800c13e <prvSetOptions+0x58>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	3380      	adds	r3, #128	; 0x80
 800c11a:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	3314      	adds	r3, #20
 800c120:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	68f9      	ldr	r1, [r7, #12]
 800c126:	68b8      	ldr	r0, [r7, #8]
 800c128:	f004 f953 	bl	80103d2 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	3314      	adds	r3, #20
 800c132:	b2db      	uxtb	r3, r3
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	b2da      	uxtb	r2, r3
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	731a      	strb	r2, [r3, #12]
 800c13c:	e031      	b.n	800c1a2 <prvSetOptions+0xbc>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c144:	2b04      	cmp	r3, #4
 800c146:	d92c      	bls.n	800c1a2 <prvSetOptions+0xbc>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d024      	beq.n	800c1a2 <prvSetOptions+0xbc>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c15e:	f36f 0300 	bfc	r3, #0, #1
 800c162:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2202      	movs	r2, #2
 800c16a:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2204      	movs	r2, #4
 800c170:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c178:	0a1b      	lsrs	r3, r3, #8
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800c18e:	2304      	movs	r3, #4
 800c190:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	3314      	adds	r3, #20
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
    }
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08e      	sub	sp, #56	; 0x38
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	3322      	adds	r3, #34	; 0x22
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe fba7 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	33d8      	adds	r3, #216	; 0xd8
 800c1d0:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	7b5b      	ldrb	r3, [r3, #13]
 800c1d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	061a      	lsls	r2, r3, #24
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c1ea:	431a      	orrs	r2, r3
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	0a1b      	lsrs	r3, r3, #8
 800c1f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	0e1b      	lsrs	r3, r3, #24
 800c1fe:	4313      	orrs	r3, r2
 800c200:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800c20a:	2310      	movs	r3, #16
 800c20c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c216:	2b02      	cmp	r3, #2
 800c218:	d105      	bne.n	800c226 <prvHandleSynReceived+0x7a>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800c21a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c21e:	f043 0302 	orr.w	r3, r3, #2
 800c222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800c226:	2317      	movs	r3, #23
 800c228:	75fb      	strb	r3, [r7, #23]

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800c22a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	4013      	ands	r3, r2
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c238:	429a      	cmp	r2, r3
 800c23a:	d030      	beq.n	800c29e <prvHandleSynReceived+0xf2>
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c23c:	2108      	movs	r1, #8
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7ff fa51 	bl	800b6e6 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	061a      	lsls	r2, r3, #24
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	021b      	lsls	r3, r3, #8
 800c250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c254:	431a      	orrs	r2, r3
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	0a1b      	lsrs	r3, r3, #8
 800c25c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c260:	431a      	orrs	r2, r3
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	0e1b      	lsrs	r3, r3, #24
 800c268:	431a      	orrs	r2, r3
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	69fa      	ldr	r2, [r7, #28]
 800c272:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	7b5b      	ldrb	r3, [r3, #13]
 800c278:	f043 0304 	orr.w	r3, r3, #4
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	3328      	adds	r3, #40	; 0x28
 800c286:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	3314      	adds	r3, #20
 800c292:	b2db      	uxtb	r3, r3
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	b2da      	uxtb	r2, r3
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	731a      	strb	r2, [r3, #12]
 800c29c:	e070      	b.n	800c380 <prvHandleSynReceived+0x1d4>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d12a      	bne.n	800c312 <prvHandleSynReceived+0x166>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	33a4      	adds	r3, #164	; 0xa4
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fb27 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c2c6:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2210      	movs	r2, #16
 800c2cc:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	2210      	movs	r2, #16
 800c2d2:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800c2e6:	69f9      	ldr	r1, [r7, #28]
 800c2e8:	f001 f968 	bl	800d5bc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	635a      	str	r2, [r3, #52]	; 0x34
 800c310:	e005      	b.n	800c31e <prvHandleSynReceived+0x172>
            }
            else if( ulReceiveLength == 0U )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <prvHandleSynReceived+0x172>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	69db      	ldr	r3, [r3, #28]
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	62da      	str	r2, [r3, #44]	; 0x2c
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d002      	beq.n	800c338 <prvHandleSynReceived+0x18c>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00f      	beq.n	800c358 <prvHandleSynReceived+0x1ac>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	2210      	movs	r2, #16
 800c33c:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	3328      	adds	r3, #40	; 0x28
 800c342:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	3314      	adds	r3, #20
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	b2da      	uxtb	r2, r3
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c35e:	f003 0310 	and.w	r3, r3, #16
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d107      	bne.n	800c378 <prvHandleSynReceived+0x1cc>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800c378:	2105      	movs	r1, #5
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff f9b3 	bl	800b6e6 <vTCPStateChange>
        }

        return xSendLength;
 800c380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800c382:	4618      	mov	r0, r3
 800c384:	3738      	adds	r7, #56	; 0x38
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b096      	sub	sp, #88	; 0x58
 800c38e:	af02      	add	r7, sp, #8
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	3322      	adds	r3, #34	; 0x22
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe fab7 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c3a6:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800c3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3aa:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	33d8      	adds	r3, #216	; 0xd8
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800c3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b4:	7b5b      	ldrb	r3, [r3, #13]
 800c3b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800c3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	061a      	lsls	r2, r3, #24
 800c3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	021b      	lsls	r3, r3, #8
 800c3c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	0a1b      	lsrs	r3, r3, #8
 800c3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	0e1b      	lsrs	r3, r3, #24
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800c3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f4:	89db      	ldrh	r3, [r3, #14]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	b21a      	sxth	r2, r3
 800c3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3fe:	89db      	ldrh	r3, [r3, #14]
 800c400:	b29b      	uxth	r3, r3
 800c402:	0a1b      	lsrs	r3, r3, #8
 800c404:	b29b      	uxth	r3, r3
 800c406:	b21b      	sxth	r3, r3
 800c408:	4313      	orrs	r3, r2
 800c40a:	b21b      	sxth	r3, r3
 800c40c:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800c40e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800c422:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800c42c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c430:	f003 0310 	and.w	r3, r3, #16
 800c434:	2b00      	cmp	r3, #0
 800c436:	d03c      	beq.n	800c4b2 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800c438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	061a      	lsls	r2, r3, #24
 800c43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c448:	431a      	orrs	r2, r3
 800c44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	0a1b      	lsrs	r3, r3, #8
 800c450:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c454:	431a      	orrs	r2, r3
 800c456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	0e1b      	lsrs	r3, r3, #24
 800c45c:	4313      	orrs	r3, r2
 800c45e:	4619      	mov	r1, r3
 800c460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c462:	f001 fdb7 	bl	800dfd4 <ulTCPWindowTxAck>
 800c466:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d020      	beq.n	800c4b2 <prvHandleEstablished+0x128>
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	d01d      	beq.n	800c4b2 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c47a:	2300      	movs	r3, #0
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	f7fe f8f0 	bl	800a668 <uxStreamBufferGet>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d011      	beq.n	800c4b2 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f043 0202 	orr.w	r2, r3, #2
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49e:	f003 0302 	and.w	r3, r3, #2
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff fc4a 	bl	800bd54 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c2:	6a1a      	ldr	r2, [r3, #32]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4d0:	f003 0320 	and.w	r3, r3, #32
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <prvHandleEstablished+0x15c>
 800c4da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d039      	beq.n	800c55a <prvHandleEstablished+0x1d0>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d11e      	bne.n	800c538 <prvHandleEstablished+0x1ae>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800c4fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4fc:	f000 ff74 	bl	800d3e8 <xTCPWindowRxEmpty>
 800c500:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800c502:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c504:	f001 fab8 	bl	800da78 <xTCPWindowTxDone>
 800c508:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <prvHandleEstablished+0x18c>
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <prvHandleEstablished+0x192>
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800c516:	2300      	movs	r3, #0
 800c518:	64bb      	str	r3, [r7, #72]	; 0x48
 800c51a:	e00d      	b.n	800c538 <prvHandleEstablished+0x1ae>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800c51c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	441a      	add	r2, r3
 800c522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2b01      	cmp	r3, #1
 800c532:	dd01      	ble.n	800c538 <prvHandleEstablished+0x1ae>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	64bb      	str	r3, [r7, #72]	; 0x48
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800c538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00d      	beq.n	800c55a <prvHandleEstablished+0x1d0>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c544:	f043 0320 	orr.w	r3, r3, #32
 800c548:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4619      	mov	r1, r3
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7ff fc28 	bl	800bda8 <prvTCPHandleFin>
 800c558:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800c55a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d12c      	bne.n	800c5ba <prvHandleEstablished+0x230>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800c560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c562:	2210      	movs	r2, #16
 800c564:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d018      	beq.n	800c59e <prvHandleEstablished+0x214>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	3328      	adds	r3, #40	; 0x28
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	3314      	adds	r3, #20
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	b2da      	uxtb	r2, r3
 800c582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c584:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <prvHandleEstablished+0x214>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800c596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59c:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <prvHandleEstablished+0x230>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f7ff f9ed 	bl	800b988 <prvTCPPrepareSend>
 800c5ae:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dd01      	ble.n	800c5ba <prvHandleEstablished+0x230>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800c5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3750      	adds	r7, #80	; 0x50
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08c      	sub	sp, #48	; 0x30
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	3322      	adds	r3, #34	; 0x22
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe f99a 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c5e0:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	33d8      	adds	r3, #216	; 0xd8
 800c5ea:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d04b      	beq.n	800c6a8 <prvSendData+0xe4>
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	429a      	cmp	r2, r3
 800c616:	db47      	blt.n	800c6a8 <prvSendData+0xe4>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c622:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800c624:	2b00      	cmp	r3, #0
 800c626:	d13f      	bne.n	800c6a8 <prvSendData+0xe4>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	2b28      	cmp	r3, #40	; 0x28
 800c62c:	d13c      	bne.n	800c6a8 <prvSendData+0xe4>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800c634:	2b05      	cmp	r3, #5
 800c636:	d137      	bne.n	800c6a8 <prvSendData+0xe4>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800c63c:	2b10      	cmp	r3, #16
 800c63e:	d133      	bne.n	800c6a8 <prvSendData+0xe4>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d00c      	beq.n	800c666 <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 ff6b 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c66c:	461a      	mov	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4293      	cmp	r3, r2
 800c672:	d307      	bcc.n	800c684 <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c67a:	005b      	lsls	r3, r3, #1
 800c67c:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	4293      	cmp	r3, r2
 800c682:	da04      	bge.n	800c68e <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2202      	movs	r2, #2
 800c688:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c68c:	e003      	b.n	800c696 <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2214      	movs	r2, #20
 800c692:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800c696:	4b16      	ldr	r3, [pc, #88]	; (800c6f0 <prvSendData+0x12c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b01      	cmp	r3, #1
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a6:	e011      	b.n	800c6cc <prvSendData+0x108>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00d      	beq.n	800c6cc <prvSendData+0x108>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d004      	beq.n	800c6c6 <prvSendData+0x102>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 ff37 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <prvSendData+0x122>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800c6d2:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <prvSendData+0x12c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b01      	cmp	r3, #1
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6819      	ldr	r1, [r3, #0]
 800c6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6de:	2300      	movs	r3, #0
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7fe faeb 	bl	800acbc <prvTCPReturnPacket>
                    *ppxNetworkBuffer = NULL;
                }
            #endif
        }

        return xSendLength;
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3730      	adds	r7, #48	; 0x30
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	2001a9fc 	.word	0x2001a9fc

0800c6f4 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08c      	sub	sp, #48	; 0x30
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	3322      	adds	r3, #34	; 0x22
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe f904 	bl	800a914 <vCastPointerTo_ProtocolHeaders_t>
 800c70c:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	061a      	lsls	r2, r3, #24
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c726:	431a      	orrs	r2, r3
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	0a1b      	lsrs	r3, r3, #8
 800c72e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c732:	431a      	orrs	r2, r3
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	0e1b      	lsrs	r3, r3, #24
 800c73a:	4313      	orrs	r3, r2
 800c73c:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800c73e:	2300      	movs	r3, #0
 800c740:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	7b5b      	ldrb	r3, [r3, #13]
 800c746:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	33d8      	adds	r3, #216	; 0xd8
 800c74c:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f107 0208 	add.w	r2, r7, #8
 800c75a:	4611      	mov	r1, r2
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fbcf 	bl	800bf00 <prvCheckRxData>
 800c762:	4603      	mov	r3, r0
 800c764:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d90c      	bls.n	800c78a <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	691a      	ldr	r2, [r3, #16]
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	3301      	adds	r3, #1
 800c778:	429a      	cmp	r2, r3
 800c77a:	d106      	bne.n	800c78a <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ulSequenceNumber + ulReceiveLength ) > pxTCPWindow->rx.ulHighestSequenceNumber )
 800c78a:	6a3a      	ldr	r2, [r7, #32]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	441a      	add	r2, r3
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	429a      	cmp	r2, r3
 800c796:	d904      	bls.n	800c7a2 <prvTCPHandleState+0xae>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800c798:	6a3a      	ldr	r2, [r7, #32]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	441a      	add	r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff fc24 	bl	800bff8 <prvStoreRxData>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	da03      	bge.n	800c7be <prvTCPHandleState+0xca>
        {
            xSendLength = -1;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7bc:	e0a2      	b.n	800c904 <prvTCPHandleState+0x210>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fc8e 	bl	800c0e6 <prvSetOptions>
 800c7ca:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d108      	bne.n	800c7e8 <prvTCPHandleState+0xf4>
 800c7d6:	7efb      	ldrb	r3, [r7, #27]
 800c7d8:	f003 031f 	and.w	r3, r3, #31
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d103      	bne.n	800c7e8 <prvTCPHandleState+0xf4>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800c7e0:	2103      	movs	r1, #3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7fe ff7f 	bl	800b6e6 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800c7e8:	7efb      	ldrb	r3, [r7, #27]
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d022      	beq.n	800c838 <prvTCPHandleState+0x144>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d11a      	bne.n	800c838 <prvTCPHandleState+0x144>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800c802:	6a3a      	ldr	r2, [r7, #32]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	441a      	add	r2, r3
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c816:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <prvTCPHandleState+0x144>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c83e:	2b0b      	cmp	r3, #11
 800c840:	d85f      	bhi.n	800c902 <prvTCPHandleState+0x20e>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <prvTCPHandleState+0x154>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c903 	.word	0x0800c903
 800c84c:	0800c903 	.word	0x0800c903
 800c850:	0800c8d1 	.word	0x0800c8d1
 800c854:	0800c879 	.word	0x0800c879
 800c858:	0800c8d1 	.word	0x0800c8d1
 800c85c:	0800c8e3 	.word	0x0800c8e3
 800c860:	0800c8f3 	.word	0x0800c8f3
 800c864:	0800c8f3 	.word	0x0800c8f3
 800c868:	0800c903 	.word	0x0800c903
 800c86c:	0800c903 	.word	0x0800c903
 800c870:	0800c8f3 	.word	0x0800c8f3
 800c874:	0800c903 	.word	0x0800c903
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800c878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7fe febe 	bl	800b5fc <prvSetSynAckOptions>
 800c880:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c884:	2212      	movs	r2, #18
 800c886:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	3328      	adds	r3, #40	; 0x28
 800c88c:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	3314      	adds	r3, #20
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800c8a2:	2104      	movs	r1, #4
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fe ff1e 	bl	800b6e6 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	69db      	ldr	r3, [r3, #28]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	621a      	str	r2, [r3, #32]
                    break;
 800c8ce:	e019      	b.n	800c904 <prvTCPHandleState+0x210>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	6819      	ldr	r1, [r3, #0]
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff fc67 	bl	800c1ac <prvHandleSynReceived>
 800c8de:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800c8e0:	e010      	b.n	800c904 <prvTCPHandleState+0x210>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff fd4e 	bl	800c38a <prvHandleEstablished>
 800c8ee:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800c8f0:	e008      	b.n	800c904 <prvTCPHandleState+0x210>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fa55 	bl	800bda8 <prvTCPHandleFin>
 800c8fe:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800c900:	e000      	b.n	800c904 <prvTCPHandleState+0x210>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800c902:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c906:	2b00      	cmp	r3, #0
 800c908:	dd06      	ble.n	800c918 <prvTCPHandleState+0x224>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff fe57 	bl	800c5c4 <prvSendData>
 800c916:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800c91a:	4618      	mov	r0, r3
 800c91c:	3730      	adds	r7, #48	; 0x30
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop

0800c924 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	4618      	mov	r0, r3
 800c936:	f7fd ffd7 	bl	800a8e8 <vCastPointerTo_TCPPacket_t>
 800c93a:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800c93c:	2328      	movs	r3, #40	; 0x28
 800c93e:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2250      	movs	r2, #80	; 0x50
 800c94c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800c950:	2300      	movs	r3, #0
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	2000      	movs	r0, #0
 800c958:	f7fe f9b0 	bl	800acbc <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800c95c:	2300      	movs	r3, #0
    }
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800c96e:	2110      	movs	r1, #16
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff ffd7 	bl	800c924 <prvTCPSendSpecialPacketHelper>
 800c976:	4603      	mov	r3, r0
    }
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800c988:	2114      	movs	r1, #20
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff ffca 	bl	800c924 <prvTCPSendSpecialPacketHelper>
 800c990:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800c992:	4618      	mov	r0, r3
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
	...

0800c99c <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800c9a4:	f44f 6391 	mov.w	r3, #1160	; 0x488
 800c9a8:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	061a      	lsls	r2, r3, #24
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	021b      	lsls	r3, r3, #8
 800c9b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	0e1b      	lsrs	r3, r3, #24
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <prvSocketSetMSS+0x6c>)
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	405a      	eors	r2, r3
 800c9d6:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <prvSocketSetMSS+0x70>)
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	4013      	ands	r3, r2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800c9e0:	68f9      	ldr	r1, [r7, #12]
 800c9e2:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800c9e6:	f7fd fec3 	bl	800a770 <FreeRTOS_min_uint32>
 800c9ea:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800ca00:	bf00      	nop
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20000010 	.word	0x20000010
 800ca0c:	2001a970 	.word	0x2001a970

0800ca10 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b092      	sub	sp, #72	; 0x48
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	60bb      	str	r3, [r7, #8]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	3322      	adds	r3, #34	; 0x22
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd ff81 	bl	800a92a <vCastConstPointerTo_ProtocolHeaders_t>
 800ca28:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800ca2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2c:	7b5b      	ldrb	r3, [r3, #13]
 800ca2e:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca32:	885b      	ldrh	r3, [r3, #2]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	021b      	lsls	r3, r3, #8
 800ca38:	b21a      	sxth	r2, r3
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	0a1b      	lsrs	r3, r3, #8
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	b21b      	sxth	r3, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	b21b      	sxth	r3, r3
 800ca4a:	873b      	strh	r3, [r7, #56]	; 0x38
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	b21a      	sxth	r2, r3
 800ca56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	0a1b      	lsrs	r3, r3, #8
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	4313      	orrs	r3, r2
 800ca64:	b21b      	sxth	r3, r3
 800ca66:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ca68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	061a      	lsls	r2, r3, #24
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	0a1b      	lsrs	r3, r3, #8
 800ca80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca84:	431a      	orrs	r2, r3
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	0e1b      	lsrs	r3, r3, #24
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	633b      	str	r3, [r7, #48]	; 0x30
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800ca90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	061a      	lsls	r2, r3, #24
 800ca96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	021b      	lsls	r3, r3, #8
 800ca9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caa0:	431a      	orrs	r2, r3
 800caa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	0a1b      	lsrs	r3, r3, #8
 800caa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800caac:	431a      	orrs	r2, r3
 800caae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	0e1b      	lsrs	r3, r3, #24
 800cab4:	4313      	orrs	r3, r2
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xResult = pdPASS;
 800cab8:	2301      	movs	r3, #1
 800caba:	643b      	str	r3, [r7, #64]	; 0x40

        configASSERT( pxNetworkBuffer != NULL );
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10b      	bne.n	800cada <xProcessReceivedTCPPacket+0xca>
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	b672      	cpsid	i
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	b662      	cpsie	i
 800cad6:	617b      	str	r3, [r7, #20]
 800cad8:	e7fe      	b.n	800cad8 <xProcessReceivedTCPPacket+0xc8>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10b      	bne.n	800cafa <xProcessReceivedTCPPacket+0xea>
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	b672      	cpsid	i
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	b662      	cpsie	i
 800caf6:	613b      	str	r3, [r7, #16]
 800caf8:	e7fe      	b.n	800caf8 <xProcessReceivedTCPPacket+0xe8>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	2b35      	cmp	r3, #53	; 0x35
 800cb00:	d802      	bhi.n	800cb08 <xProcessReceivedTCPPacket+0xf8>
        {
            xResult = pdFAIL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	643b      	str	r3, [r7, #64]	; 0x40
 800cb06:	e12b      	b.n	800cd60 <xProcessReceivedTCPPacket+0x350>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	330e      	adds	r3, #14
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fd fedf 	bl	800a8d2 <vCastConstPointerTo_IPHeader_t>
 800cb14:	62b8      	str	r0, [r7, #40]	; 0x28
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	061a      	lsls	r2, r3, #24
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	021b      	lsls	r3, r3, #8
 800cb22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb26:	431a      	orrs	r2, r3
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	0a1b      	lsrs	r3, r3, #8
 800cb2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb32:	431a      	orrs	r2, r3
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	0e1b      	lsrs	r3, r3, #24
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	061a      	lsls	r2, r3, #24
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	021b      	lsls	r3, r3, #8
 800cb4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	0a1b      	lsrs	r3, r3, #8
 800cb56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	0e1b      	lsrs	r3, r3, #24
 800cb62:	4313      	orrs	r3, r2
 800cb64:	623b      	str	r3, [r7, #32]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800cb66:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800cb68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb6a:	6a3a      	ldr	r2, [r7, #32]
 800cb6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb6e:	f7fd f92f 	bl	8009dd0 <pxTCPSocketLookup>
 800cb72:	6478      	str	r0, [r7, #68]	; 0x44

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800cb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d008      	beq.n	800cb8c <xProcessReceivedTCPPacket+0x17c>
 800cb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fd ff19 	bl	800a9b8 <prvTCPSocketIsActive>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d110      	bne.n	800cbae <xProcessReceivedTCPPacket+0x19e>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800cb8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	2b10      	cmp	r3, #16
 800cb94:	d008      	beq.n	800cba8 <xProcessReceivedTCPPacket+0x198>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800cb96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb98:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d103      	bne.n	800cba8 <xProcessReceivedTCPPacket+0x198>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff feec 	bl	800c980 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	643b      	str	r3, [r7, #64]	; 0x40
 800cbac:	e079      	b.n	800cca2 <xProcessReceivedTCPPacket+0x292>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800cbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800cbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d11c      	bne.n	800cbfa <xProcessReceivedTCPPacket+0x1ea>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800cbc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbc2:	f003 031f 	and.w	r3, r3, #31
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d00b      	beq.n	800cbe2 <xProcessReceivedTCPPacket+0x1d2>
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800cbca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbcc:	f003 0304 	and.w	r3, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d103      	bne.n	800cbdc <xProcessReceivedTCPPacket+0x1cc>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff fed2 	bl	800c980 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	643b      	str	r3, [r7, #64]	; 0x40
 800cbe0:	e05f      	b.n	800cca2 <xProcessReceivedTCPPacket+0x292>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbe8:	f000 f8c0 	bl	800cd6c <prvHandleListen>
 800cbec:	6478      	str	r0, [r7, #68]	; 0x44

                        if( pxSocket == NULL )
 800cbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d156      	bne.n	800cca2 <xProcessReceivedTCPPacket+0x292>
                        {
                            xResult = pdFAIL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbf8:	e053      	b.n	800cca2 <xProcessReceivedTCPPacket+0x292>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800cbfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d032      	beq.n	800cc6a <xProcessReceivedTCPPacket+0x25a>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800cc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc06:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d10b      	bne.n	800cc26 <xProcessReceivedTCPPacket+0x216>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800cc0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc10:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cc14:	3301      	adds	r3, #1
 800cc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d123      	bne.n	800cc64 <xProcessReceivedTCPPacket+0x254>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc20:	f7fe fd61 	bl	800b6e6 <vTCPStateChange>
 800cc24:	e01e      	b.n	800cc64 <xProcessReceivedTCPPacket+0x254>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800cc26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d104      	bne.n	800cc3c <xProcessReceivedTCPPacket+0x22c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800cc32:	2100      	movs	r1, #0
 800cc34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc36:	f7fe fd56 	bl	800b6e6 <vTCPStateChange>
 800cc3a:	e013      	b.n	800cc64 <xProcessReceivedTCPPacket+0x254>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800cc3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d90d      	bls.n	800cc64 <xProcessReceivedTCPPacket+0x254>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800cc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800cc54:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800cc56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d203      	bcs.n	800cc64 <xProcessReceivedTCPPacket+0x254>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fe81 	bl	800c966 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800cc64:	2300      	movs	r3, #0
 800cc66:	643b      	str	r3, [r7, #64]	; 0x40
 800cc68:	e01b      	b.n	800cca2 <xProcessReceivedTCPPacket+0x292>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800cc6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc6c:	f003 031f 	and.w	r3, r3, #31
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d107      	bne.n	800cc84 <xProcessReceivedTCPPacket+0x274>
 800cc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc76:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc7a:	2b04      	cmp	r3, #4
 800cc7c:	d902      	bls.n	800cc84 <xProcessReceivedTCPPacket+0x274>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	643b      	str	r3, [r7, #64]	; 0x40
 800cc82:	e00e      	b.n	800cca2 <xProcessReceivedTCPPacket+0x292>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t lOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800cc84:	2322      	movs	r3, #34	; 0x22
 800cc86:	61fb      	str	r3, [r7, #28]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	3380      	adds	r3, #128	; 0x80
 800cc8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc8e:	4413      	add	r3, r2
 800cc90:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	699a      	ldr	r2, [r3, #24]
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800cc9a:	2214      	movs	r2, #20
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f003 fb98 	bl	80103d2 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 800cca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d05b      	beq.n	800cd60 <xProcessReceivedTCPPacket+0x350>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800cca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10b      	bne.n	800ccc6 <xProcessReceivedTCPPacket+0x2b6>
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	b672      	cpsid	i
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	b662      	cpsie	i
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	e7fe      	b.n	800ccc4 <xProcessReceivedTCPPacket+0x2b4>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800ccc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ccc8:	f7fe fce9 	bl	800b69e <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800cccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccce:	7b1b      	ldrb	r3, [r3, #12]
 800ccd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccd4:	2b50      	cmp	r3, #80	; 0x50
 800ccd6:	d904      	bls.n	800cce2 <xProcessReceivedTCPPacket+0x2d2>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ccde:	f7fe faef 	bl	800b2c0 <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800cce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce4:	89db      	ldrh	r3, [r3, #14]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	b21a      	sxth	r2, r3
 800ccec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccee:	89db      	ldrh	r3, [r3, #14]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	0a1b      	lsrs	r3, r3, #8
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	837b      	strh	r3, [r7, #26]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800ccfe:	8b7a      	ldrh	r2, [r7, #26]
 800cd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd02:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800cd06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xProcessReceivedTCPPacket+0x316>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800cd10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cd16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd18:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800cd1c:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800cd20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800cd26:	f107 0308 	add.w	r3, r7, #8
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd2e:	f7ff fce1 	bl	800c6f4 <prvTCPHandleState>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dd05      	ble.n	800cd44 <xProcessReceivedTCPPacket+0x334>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd40:	f7fd ff8e 	bl	800ac60 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d005      	beq.n	800cd56 <xProcessReceivedTCPPacket+0x346>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f001 fbf1 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	60bb      	str	r3, [r7, #8]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800cd56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd58:	f7fe ff7c 	bl	800bc54 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	643b      	str	r3, [r7, #64]	; 0x40
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800cd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    }
 800cd62:	4618      	mov	r0, r3
 800cd64:	3748      	adds	r7, #72	; 0x48
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fd fdbf 	bl	800a8fe <vCastConstPointerTo_TCPPacket_t>
 800cd80:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800cd86:	4b5a      	ldr	r3, [pc, #360]	; (800cef0 <prvHandleListen+0x184>)
 800cd88:	6958      	ldr	r0, [r3, #20]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	f7f3 fe67 	bl	8000a6c <ulApplicationGetNextSequenceNumber>
 800cd9e:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d03c      	beq.n	800ce20 <prvHandleListen+0xb4>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdac:	f003 0308 	and.w	r3, r3, #8
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00c      	beq.n	800cdd0 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cdc0:	f043 0304 	orr.w	r3, r3, #4
 800cdc4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	655a      	str	r2, [r3, #84]	; 0x54
 800cdce:	e027      	b.n	800ce20 <prvHandleListen+0xb4>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d303      	bcc.n	800cdec <prvHandleListen+0x80>
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800cde4:	6838      	ldr	r0, [r7, #0]
 800cde6:	f7ff fdcb 	bl	800c980 <prvTCPSendReset>
 800cdea:	e019      	b.n	800ce20 <prvHandleListen+0xb4>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
 800cdec:	2206      	movs	r2, #6
 800cdee:	2101      	movs	r1, #1
 800cdf0:	2002      	movs	r0, #2
 800cdf2:	f7fc f8e5 	bl	8008fc0 <FreeRTOS_socket>
 800cdf6:	6138      	str	r0, [r7, #16]
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <prvHandleListen+0x9a>
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce04:	d103      	bne.n	800ce0e <prvHandleListen+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f7ff fdba 	bl	800c980 <prvTCPSendReset>
 800ce0c:	e008      	b.n	800ce20 <prvHandleListen+0xb4>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	6938      	ldr	r0, [r7, #16]
 800ce12:	f000 f86f 	bl	800cef4 <prvTCPSocketCopy>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <prvHandleListen+0xb4>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d05f      	beq.n	800cee6 <prvHandleListen+0x17a>
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d05c      	beq.n	800cee6 <prvHandleListen+0x17a>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	3322      	adds	r3, #34	; 0x22
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd fd79 	bl	800a92a <vCastConstPointerTo_ProtocolHeaders_t>
 800ce38:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	021b      	lsls	r3, r3, #8
 800ce42:	b21a      	sxth	r2, r3
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	0a1b      	lsrs	r3, r3, #8
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	b21b      	sxth	r3, r3
 800ce50:	4313      	orrs	r3, r2
 800ce52:	b21b      	sxth	r3, r3
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ce60:	061a      	lsls	r2, r3, #24
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ce84:	0e1b      	lsrs	r3, r3, #24
 800ce86:	431a      	orrs	r2, r3
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	061a      	lsls	r2, r3, #24
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	021b      	lsls	r3, r3, #8
 800cea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cea4:	431a      	orrs	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	0a1b      	lsrs	r3, r3, #8
 800ceac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	0e1b      	lsrs	r3, r3, #24
 800ceb8:	431a      	orrs	r2, r3
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800cec0:	69f8      	ldr	r0, [r7, #28]
 800cec2:	f7ff fd6b 	bl	800c99c <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800cec6:	69f8      	ldr	r0, [r7, #28]
 800cec8:	f7fe f8e4 	bl	800b094 <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800cecc:	2103      	movs	r1, #3
 800cece:	69f8      	ldr	r0, [r7, #28]
 800ced0:	f7fe fc09 	bl	800b6e6 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	2246      	movs	r2, #70	; 0x46
 800cee0:	4619      	mov	r1, r3
 800cee2:	f003 fa76 	bl	80103d2 <memcpy>
        }

        return pxReturn;
 800cee6:	69fb      	ldr	r3, [r7, #28]
    }
 800cee8:	4618      	mov	r0, r3
 800ceea:	3720      	adds	r7, #32
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20000010 	.word	0x20000010

0800cef4 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	69da      	ldr	r2, [r3, #28]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	6a1a      	ldr	r2, [r3, #32]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d009      	beq.n	800cf6e <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	62da      	str	r2, [r3, #44]	; 0x2c
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf66:	f043 0205 	orr.w	r2, r3, #5
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	631a      	str	r2, [r3, #48]	; 0x30
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800cf6e:	4b1c      	ldr	r3, [pc, #112]	; (800cfe0 <prvTCPSocketCopy+0xec>)
 800cf70:	695b      	ldr	r3, [r3, #20]
 800cf72:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	b21a      	sxth	r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf80:	0a1b      	lsrs	r3, r3, #8
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	b21b      	sxth	r3, r3
 800cf86:	4313      	orrs	r3, r2
 800cf88:	b21b      	sxth	r3, r3
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cf94:	f043 0304 	orr.w	r3, r3, #4
 800cf98:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800cfb2:	f107 010c 	add.w	r1, r7, #12
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	2208      	movs	r2, #8
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fc fa5e 	bl	800947c <vSocketBind>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <prvTCPSocketCopy+0xde>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) vSocketClose( pxNewSocket );
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7fc fb18 	bl	80095fc <vSocketClose>
            xResult = pdFALSE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	e001      	b.n	800cfd6 <prvTCPSocketCopy+0xe2>
        }
        else
        {
            xResult = pdTRUE;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800cfd6:	697b      	ldr	r3, [r7, #20]
    }
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	20000010 	.word	0x20000010

0800cfe4 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	b21a      	sxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cff8:	0a1b      	lsrs	r3, r3, #8
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	b21b      	sxth	r3, r3
 800cffe:	4313      	orrs	r3, r2
 800d000:	b21b      	sxth	r3, r3
 800d002:	b29b      	uxth	r3, r3
 800d004:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800d006:	2300      	movs	r3, #0
 800d008:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800d00a:	4b18      	ldr	r3, [pc, #96]	; (800d06c <xTCPCheckNewClient+0x88>)
 800d00c:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800d00e:	4b18      	ldr	r3, [pc, #96]	; (800d070 <xTCPCheckNewClient+0x8c>)
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	e020      	b.n	800d058 <xTCPCheckNewClient+0x74>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d118      	bne.n	800d052 <xTCPCheckNewClient+0x6e>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	4618      	mov	r0, r3
 800d026:	f7fd fc8b 	bl	800a940 <vCastPointerTo_FreeRTOS_Socket_t>
 800d02a:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d032:	2b06      	cmp	r3, #6
 800d034:	d10d      	bne.n	800d052 <xTCPCheckNewClient+0x6e>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d03c:	f003 0302 	and.w	r3, r3, #2
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <xTCPCheckNewClient+0x6e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	61bb      	str	r3, [r7, #24]
                    break;
 800d050:	e006      	b.n	800d060 <xTCPCheckNewClient+0x7c>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d1da      	bne.n	800d016 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800d060:	69bb      	ldr	r3, [r7, #24]
    }
 800d062:	4618      	mov	r0, r3
 800d064:	3720      	adds	r7, #32
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	2001b8b8 	.word	0x2001b8b8
 800d070:	2001b8b0 	.word	0x2001b8b0

0800d074 <FreeRTOS_min_int32>:
        {
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	4293      	cmp	r3, r2
 800d084:	bfa8      	it	ge
 800d086:	4613      	movge	r3, r2
        }
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <FreeRTOS_min_uint32>:
        {
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	bf28      	it	cs
 800d0a6:	4613      	movcs	r3, r2
        }
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800d0bc:	687b      	ldr	r3, [r7, #4]
    }
 800d0be:	4618      	mov	r0, r3
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800d0ca:	b480      	push	{r7}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	db02      	blt.n	800d0e4 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	e001      	b.n	800d0e8 <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
        }
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 800d0f6:	b480      	push	{r7}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	3b01      	subs	r3, #1
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db02      	blt.n	800d112 <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 800d10c:	2301      	movs	r3, #1
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	e001      	b.n	800d116 <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800d116:	68fb      	ldr	r3, [r7, #12]
        }
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	3b01      	subs	r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	db02      	blt.n	800d140 <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]
 800d13e:	e001      	b.n	800d144 <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800d144:	68fb      	ldr	r3, [r7, #12]
        }
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800d152:	b480      	push	{r7}
 800d154:	b085      	sub	sp, #20
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	db02      	blt.n	800d16c <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800d166:	2301      	movs	r3, #1
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	e001      	b.n	800d170 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800d170:	68fb      	ldr	r3, [r7, #12]
    }
 800d172:	4618      	mov	r0, r3
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800d17e:	b580      	push	{r7, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3308      	adds	r3, #8
 800d18c:	461a      	mov	r2, r3
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f81f 	bl	800d1d4 <vListInsertGeneric>
        }
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800d1a6:	f7f8 f819 	bl	80051dc <xTaskGetTickCount>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	601a      	str	r2, [r3, #0]
    }
 800d1b0:	bf00      	nop
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800d1c0:	f7f8 f80c 	bl	80051dc <xTaskGetTickCount>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	1ad3      	subs	r3, r2, r3
    }
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689a      	ldr	r2, [r3, #8]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	601a      	str	r2, [r3, #0]
    }
 800d20c:	bf00      	nop
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800d21e:	4826      	ldr	r0, [pc, #152]	; (800d2b8 <prvCreateSectors+0xa0>)
 800d220:	f7f6 fe99 	bl	8003f56 <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800d224:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800d228:	f7f9 f918 	bl	800645c <pvPortMalloc>
 800d22c:	4603      	mov	r3, r0
 800d22e:	4618      	mov	r0, r3
 800d230:	f7ff ff40 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d234:	4602      	mov	r2, r0
 800d236:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <prvCreateSectors+0xa4>)
 800d238:	601a      	str	r2, [r3, #0]

            if( xTCPSegments == NULL )
 800d23a:	4b20      	ldr	r3, [pc, #128]	; (800d2bc <prvCreateSectors+0xa4>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d102      	bne.n	800d248 <prvCreateSectors+0x30>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800d242:	2300      	movs	r3, #0
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	e032      	b.n	800d2ae <prvCreateSectors+0x96>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800d248:	4b1c      	ldr	r3, [pc, #112]	; (800d2bc <prvCreateSectors+0xa4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800d250:	2100      	movs	r1, #0
 800d252:	4618      	mov	r0, r3
 800d254:	f003 f8e1 	bl	801041a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800d258:	2300      	movs	r3, #0
 800d25a:	607b      	str	r3, [r7, #4]
 800d25c:	e022      	b.n	800d2a4 <prvCreateSectors+0x8c>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800d25e:	4b17      	ldr	r3, [pc, #92]	; (800d2bc <prvCreateSectors+0xa4>)
 800d260:	6819      	ldr	r1, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	019a      	lsls	r2, r3, #6
 800d266:	4b15      	ldr	r3, [pc, #84]	; (800d2bc <prvCreateSectors+0xa4>)
 800d268:	6818      	ldr	r0, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	019b      	lsls	r3, r3, #6
 800d26e:	4403      	add	r3, r0
 800d270:	440a      	add	r2, r1
 800d272:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800d274:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <prvCreateSectors+0xa4>)
 800d276:	6819      	ldr	r1, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	019a      	lsls	r2, r3, #6
 800d27c:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <prvCreateSectors+0xa4>)
 800d27e:	6818      	ldr	r0, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	019b      	lsls	r3, r3, #6
 800d284:	4403      	add	r3, r0
 800d286:	440a      	add	r2, r1
 800d288:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800d28a:	4b0c      	ldr	r3, [pc, #48]	; (800d2bc <prvCreateSectors+0xa4>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	019b      	lsls	r3, r3, #6
 800d292:	4413      	add	r3, r2
 800d294:	332c      	adds	r3, #44	; 0x2c
 800d296:	4619      	mov	r1, r3
 800d298:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <prvCreateSectors+0xa0>)
 800d29a:	f7ff ff70 	bl	800d17e <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	607b      	str	r3, [r7, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2bef      	cmp	r3, #239	; 0xef
 800d2a8:	ddd9      	ble.n	800d25e <prvCreateSectors+0x46>
                }

                xReturn = pdPASS;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800d2ae:	683b      	ldr	r3, [r7, #0]
        }
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	2001b8d8 	.word	0x2001b8d8
 800d2bc:	2001a9f8 	.word	0x2001a9f8

0800d2c0 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	33ac      	adds	r3, #172	; 0xac
 800d2d2:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	617b      	str	r3, [r7, #20]
 800d2da:	e010      	b.n	800d2fe <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fee7 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d2e6:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d102      	bne.n	800d2f8 <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	613b      	str	r3, [r7, #16]
                    break;
 800d2f6:	e006      	b.n	800d306 <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	429a      	cmp	r2, r3
 800d304:	d1ea      	bne.n	800d2dc <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800d306:	693b      	ldr	r3, [r7, #16]
        }
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800d31e:	4b31      	ldr	r3, [pc, #196]	; (800d3e4 <xTCPWindowNew+0xd4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d102      	bne.n	800d32c <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 800d326:	2300      	movs	r3, #0
 800d328:	61fb      	str	r3, [r7, #28]
 800d32a:	e055      	b.n	800d3d8 <xTCPWindowNew+0xc8>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800d32c:	4b2d      	ldr	r3, [pc, #180]	; (800d3e4 <xTCPWindowNew+0xd4>)
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff febc 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d33c:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10b      	bne.n	800d35c <xTCPWindowNew+0x4c>
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	b672      	cpsid	i
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	b662      	cpsie	i
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	e7fe      	b.n	800d35a <xTCPWindowNew+0x4a>
                configASSERT( pxSegment != NULL );
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10b      	bne.n	800d37a <xTCPWindowNew+0x6a>
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	b672      	cpsid	i
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	b662      	cpsie	i
 800d376:	613b      	str	r3, [r7, #16]
 800d378:	e7fe      	b.n	800d378 <xTCPWindowNew+0x68>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800d37a:	69b8      	ldr	r0, [r7, #24]
 800d37c:	f7f6 fe75 	bl	800406a <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d006      	beq.n	800d394 <xTCPWindowNew+0x84>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	33a4      	adds	r3, #164	; 0xa4
 800d38a:	69b9      	ldr	r1, [r7, #24]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff fef6 	bl	800d17e <vListInsertFifo>
 800d392:	e005      	b.n	800d3a0 <xTCPWindowNew+0x90>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3390      	adds	r3, #144	; 0x90
 800d398:	69b9      	ldr	r1, [r7, #24]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff feef 	bl	800d17e <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fefa 	bl	800d19e <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <xTCPWindowNew+0xaa>
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	e000      	b.n	800d3bc <xTCPWindowNew+0xac>
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	7d93      	ldrb	r3, [r2, #22]
 800d3c0:	f361 0382 	bfi	r3, r1, #2, #1
 800d3c4:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	601a      	str	r2, [r3, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800d3d8:	69fb      	ldr	r3, [r7, #28]
        }
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3720      	adds	r7, #32
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	2001b8d8 	.word	0x2001b8d8

0800d3e8 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	e00f      	b.n	800d420 <xTCPWindowRxEmpty+0x38>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7ff fea1 	bl	800d152 <xSequenceGreaterThanOrEqual>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800d416:	2301      	movs	r3, #1
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	e001      	b.n	800d420 <xTCPWindowRxEmpty+0x38>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800d420:	68fb      	ldr	r3, [r7, #12]
        }
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d102      	bne.n	800d440 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	e00b      	b.n	800d458 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fe32 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d450:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800d452:	68b8      	ldr	r0, [r7, #8]
 800d454:	f7f6 fe09 	bl	800406a <uxListRemove>
            }

            return pxSegment;
 800d458:	68fb      	ldr	r3, [r7, #12]
        }
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d102      	bne.n	800d478 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	e008      	b.n	800d48a <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fe16 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d488:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800d48a:	68fb      	ldr	r3, [r7, #12]
        }
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3318      	adds	r3, #24
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f6 fdde 	bl	800406a <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	332c      	adds	r3, #44	; 0x2c
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7f6 fdcc 	bl	800406a <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	332c      	adds	r3, #44	; 0x2c
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4803      	ldr	r0, [pc, #12]	; (800d4e8 <vTCPWindowFree+0x54>)
 800d4da:	f7ff fe50 	bl	800d17e <vListInsertFifo>
        }
 800d4de:	bf00      	nop
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	2001b8d8 	.word	0x2001b8d8

0800d4ec <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	e020      	b.n	800d53c <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d003      	beq.n	800d508 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	33a4      	adds	r3, #164	; 0xa4
 800d504:	617b      	str	r3, [r7, #20]
 800d506:	e002      	b.n	800d50e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3390      	adds	r3, #144	; 0x90
 800d50c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d10e      	bne.n	800d536 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800d518:	e009      	b.n	800d52e <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff fdc7 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d526:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff ffb3 	bl	800d494 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1f1      	bne.n	800d51a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	3301      	adds	r3, #1
 800d53a:	613b      	str	r3, [r7, #16]
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	dddb      	ble.n	800d4fa <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800d542:	bf00      	nop
 800d544:	3718      	adds	r7, #24
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800d55a:	4b17      	ldr	r3, [pc, #92]	; (800d5b8 <vTCPWindowCreate+0x6c>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800d562:	f7ff fe59 	bl	800d218 <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	3390      	adds	r3, #144	; 0x90
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f6 fcf3 	bl	8003f56 <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	33a4      	adds	r3, #164	; 0xa4
 800d574:	4618      	mov	r0, r3
 800d576:	f7f6 fcee 	bl	8003f56 <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3340      	adds	r3, #64	; 0x40
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f6 fce9 	bl	8003f56 <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3354      	adds	r3, #84	; 0x54
 800d588:	4618      	mov	r0, r3
 800d58a:	f7f6 fce4 	bl	8003f56 <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3368      	adds	r3, #104	; 0x68
 800d592:	4618      	mov	r0, r3
 800d594:	f7f6 fcdf 	bl	8003f56 <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f000 f806 	bl	800d5bc <vTCPWindowInit>
    }
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	2001a9f8 	.word	0x2001a9f8

0800d5bc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800d5ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d5ce:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	7813      	ldrb	r3, [r2, #0]
 800d5da:	f043 0301 	orr.w	r3, r3, #1
 800d5de:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d024      	beq.n	800d630 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800d600:	461a      	mov	r2, r3
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	4293      	cmp	r3, r2
 800d606:	d304      	bcc.n	800d612 <vTCPWindowInit+0x56>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10e      	bne.n	800d630 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	fbb2 f3f3 	udiv	r3, r2, r3
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	fb02 f203 	mul.w	r2, r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800d666:	bf00      	nop
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800d672:	b580      	push	{r7, lr}
 800d674:	b08a      	sub	sp, #40	; 0x28
 800d676:	af00      	add	r7, sp, #0
 800d678:	60f8      	str	r0, [r7, #12]
 800d67a:	60b9      	str	r1, [r7, #8]
 800d67c:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4413      	add	r3, r2
 800d688:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	33ac      	adds	r3, #172	; 0xac
 800d68e:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	623b      	str	r3, [r7, #32]
 800d696:	e02a      	b.n	800d6ee <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7ff fd09 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800d6a2:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68b9      	ldr	r1, [r7, #8]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fd51 	bl	800d152 <xSequenceGreaterThanOrEqual>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d018      	beq.n	800d6e8 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69f9      	ldr	r1, [r7, #28]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fd1a 	bl	800d0f6 <xSequenceLessThan>
 800d6c2:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00f      	beq.n	800d6e8 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00a      	beq.n	800d6e4 <xTCPWindowRxConfirm+0x72>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	4610      	mov	r0, r2
 800d6da:	f7ff fd0c 	bl	800d0f6 <xSequenceLessThan>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800d6e8:	6a3b      	ldr	r3, [r7, #32]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800d6ee:	6a3a      	ldr	r2, [r7, #32]
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1d0      	bne.n	800d698 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <xTCPWindowRxConfirm+0x92>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	429a      	cmp	r2, r3
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800d706:	4618      	mov	r0, r3
 800d708:	3728      	adds	r7, #40	; 0x28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800d710:	b580      	push	{r7, lr}
 800d712:	b08c      	sub	sp, #48	; 0x30
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800d736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d143      	bne.n	800d7c6 <lTCPWindowRxCheck+0xb6>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d903      	bls.n	800d74e <lTCPWindowRxCheck+0x3e>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
                    lReturn = -1;
 800d746:	f04f 33ff 	mov.w	r3, #4294967295
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
 800d74c:	e0bd      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800d74e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d02c      	beq.n	800d7ba <lTCPWindowRxCheck+0xaa>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7ff ff82 	bl	800d672 <xTCPWindowRxConfirm>
 800d76e:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <lTCPWindowRxCheck+0x6c>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800d776:	69b8      	ldr	r0, [r7, #24]
 800d778:	f7ff fe8c 	bl	800d494 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1f0      	bne.n	800d764 <lTCPWindowRxCheck+0x54>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800d782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f7ff fd9b 	bl	800d2c0 <xTCPWindowRxFind>
 800d78a:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d009      	beq.n	800d7a6 <lTCPWindowRxCheck+0x96>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	461a      	mov	r2, r3
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	4413      	add	r3, r2
 800d79c:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800d79e:	69b8      	ldr	r0, [r7, #24]
 800d7a0:	f7ff fe78 	bl	800d494 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800d7a4:	e7ed      	b.n	800d782 <lTCPWindowRxCheck+0x72>
                                break;
 800d7a6:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d004      	beq.n	800d7ba <lTCPWindowRxCheck+0xaa>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800d7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	1ad2      	subs	r2, r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	631a      	str	r2, [r3, #48]	; 0x30
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7be:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7c4:	e081      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d103      	bne.n	800d7d8 <lTCPWindowRxCheck+0xc8>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800d7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d6:	e078      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4413      	add	r3, r2
 800d7de:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800d7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dc03      	bgt.n	800d7fa <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f8:	e067      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	69fa      	ldr	r2, [r7, #28]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	dd03      	ble.n	800d80a <lTCPWindowRxCheck+0xfa>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
                    lReturn = -1;
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
 800d808:	e05f      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800d80a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f7ff fd57 	bl	800d2c0 <xTCPWindowRxFind>
 800d812:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d006      	beq.n	800d828 <lTCPWindowRxCheck+0x118>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	461a      	mov	r2, r3
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	4413      	add	r3, r2
 800d824:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800d826:	e7f0      	b.n	800d80a <lTCPWindowRxCheck+0xfa>
                            break;
 800d828:	bf00      	nop
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	4a29      	ldr	r2, [pc, #164]	; (800d8d4 <lTCPWindowRxCheck+0x1c4>)
 800d82e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	061a      	lsls	r2, r3, #24
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d83e:	431a      	orrs	r2, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d848:	431a      	orrs	r2, r3
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	0e1b      	lsrs	r3, r3, #24
 800d84e:	431a      	orrs	r2, r3
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	061a      	lsls	r2, r3, #24
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	021b      	lsls	r3, r3, #8
 800d85e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d862:	431a      	orrs	r2, r3
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	0a1b      	lsrs	r3, r3, #8
 800d868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d86c:	431a      	orrs	r2, r3
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	0e1b      	lsrs	r3, r3, #24
 800d872:	431a      	orrs	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	220c      	movs	r2, #12
 800d87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7ff fd1b 	bl	800d2c0 <xTCPWindowRxFind>
 800d88a:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <lTCPWindowRxCheck+0x18a>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800d892:	f04f 33ff 	mov.w	r3, #4294967295
 800d896:	627b      	str	r3, [r7, #36]	; 0x24
 800d898:	e017      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	2301      	movs	r3, #1
 800d89e:	68b9      	ldr	r1, [r7, #8]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff fd35 	bl	800d310 <xTCPWindowNew>
 800d8a6:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d107      	bne.n	800d8be <lTCPWindowRxCheck+0x1ae>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800d8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ba:	627b      	str	r3, [r7, #36]	; 0x24
 800d8bc:	e005      	b.n	800d8ca <lTCPWindowRxCheck+0x1ba>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3730      	adds	r7, #48	; 0x30
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	0a050101 	.word	0x0a050101

0800d8d8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	db03      	blt.n	800d8fc <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800d8f4:	697a      	ldr	r2, [r7, #20]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800d8fc:	697b      	ldr	r3, [r7, #20]
        }
 800d8fe:	4618      	mov	r0, r3
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
	...

0800d90c <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d92a:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 8096 	beq.w	800da60 <lTCPWindowTxAdd+0x154>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	f280 808f 	bge.w	800da60 <lTCPWindowTxAdd+0x154>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	7d9b      	ldrb	r3, [r3, #22]
 800d946:	f003 0301 	and.w	r3, r3, #1
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 8087 	bne.w	800da60 <lTCPWindowTxAdd+0x154>
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8082 	beq.w	800da60 <lTCPWindowTxAdd+0x154>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	4619      	mov	r1, r3
 800d968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d96a:	f7ff fb83 	bl	800d074 <FreeRTOS_min_int32>
 800d96e:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	441a      	add	r2, r3
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	689a      	ldr	r2, [r3, #8]
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	429a      	cmp	r2, r3
 800d986:	db02      	blt.n	800d98e <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800d98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	441a      	add	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800d9a2:	6a3a      	ldr	r2, [r7, #32]
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800d9aa:	4b32      	ldr	r3, [pc, #200]	; (800da74 <lTCPWindowTxAdd+0x168>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b01      	cmp	r3, #1
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	69f8      	ldr	r0, [r7, #28]
 800d9b6:	f7ff ff8f 	bl	800d8d8 <lTCPIncrementTxPosition>
 800d9ba:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800d9bc:	e050      	b.n	800da60 <lTCPWindowTxAdd+0x154>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff fc9f 	bl	800d310 <xTCPWindowNew>
 800d9d2:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d046      	beq.n	800da68 <lTCPWindowTxAdd+0x15c>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9e2:	f7ff fb47 	bl	800d074 <FreeRTOS_min_int32>
 800d9e6:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	69fa      	ldr	r2, [r7, #28]
 800d9f2:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800d9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	1ad3      	subs	r3, r2, r3
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800d9fc:	697a      	ldr	r2, [r7, #20]
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	69f8      	ldr	r0, [r7, #28]
 800da02:	f7ff ff69 	bl	800d8d8 <lTCPIncrementTxPosition>
 800da06:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	441a      	add	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800da14:	6a3a      	ldr	r2, [r7, #32]
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	4413      	add	r3, r2
 800da1a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	3318      	adds	r3, #24
 800da26:	4619      	mov	r1, r3
 800da28:	4610      	mov	r0, r2
 800da2a:	f7ff fba8 	bl	800d17e <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	689a      	ldr	r2, [r3, #8]
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	429a      	cmp	r2, r3
 800da38:	da03      	bge.n	800da42 <lTCPWindowTxAdd+0x136>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	69ba      	ldr	r2, [r7, #24]
 800da3e:	67da      	str	r2, [r3, #124]	; 0x7c
 800da40:	e002      	b.n	800da48 <lTCPWindowTxAdd+0x13c>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800da4e:	2b17      	cmp	r3, #23
 800da50:	d006      	beq.n	800da60 <lTCPWindowTxAdd+0x154>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800da52:	4b08      	ldr	r3, [pc, #32]	; (800da74 <lTCPWindowTxAdd+0x168>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b02      	cmp	r3, #2
 800da58:	dc02      	bgt.n	800da60 <lTCPWindowTxAdd+0x154>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800da5a:	4b06      	ldr	r3, [pc, #24]	; (800da74 <lTCPWindowTxAdd+0x168>)
 800da5c:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800da5e:	2b01      	cmp	r3, #1
            while( lBytesLeft > 0 )
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	2b00      	cmp	r3, #0
 800da64:	dcab      	bgt.n	800d9be <lTCPWindowTxAdd+0xb2>
 800da66:	e000      	b.n	800da6a <lTCPWindowTxAdd+0x15e>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
                    }

                    break;
 800da68:	bf00      	nop
                }
            }

            return lDone;
 800da6a:	6a3b      	ldr	r3, [r7, #32]
        }
 800da6c:	4618      	mov	r0, r3
 800da6e:	3728      	adds	r7, #40	; 0x28
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	2001a9fc 	.word	0x2001a9fc

0800da78 <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <xTCPWindowTxDone+0x16>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e000      	b.n	800da90 <xTCPWindowTxDone+0x18>
 800da8e:	2300      	movs	r3, #0
        }
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3354      	adds	r3, #84	; 0x54
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fcd9 	bl	800d462 <xTCPWindowPeekHead>
 800dab0:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800dab8:	2300      	movs	r3, #0
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	e02f      	b.n	800db1e <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d306      	bcc.n	800dad8 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	617b      	str	r3, [r7, #20]
 800dad6:	e001      	b.n	800dadc <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800dad8:	2300      	movs	r3, #0
 800dada:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800dadc:	6979      	ldr	r1, [r7, #20]
 800dade:	6838      	ldr	r0, [r7, #0]
 800dae0:	f7ff fad8 	bl	800d094 <FreeRTOS_min_uint32>
 800dae4:	4602      	mov	r2, r0
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	1a9b      	subs	r3, r3, r2
 800daea:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	461a      	mov	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d302      	bcc.n	800dafe <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800daf8:	2301      	movs	r3, #1
 800dafa:	613b      	str	r3, [r7, #16]
 800dafc:	e001      	b.n	800db02 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800dafe:	2300      	movs	r3, #0
 800db00:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00a      	beq.n	800db1e <prvTCPWindowTxHasSpace+0x82>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	689a      	ldr	r2, [r3, #8]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	4619      	mov	r1, r3
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	440b      	add	r3, r1
 800db16:	429a      	cmp	r2, r3
 800db18:	d201      	bcs.n	800db1e <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800db1a:	2300      	movs	r3, #0
 800db1c:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800db1e:	693b      	ldr	r3, [r7, #16]
        }
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800db28:	b580      	push	{r7, lr}
 800db2a:	b088      	sub	sp, #32
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d002      	beq.n	800db48 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800db42:	2301      	movs	r3, #1
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	e04a      	b.n	800dbde <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3368      	adds	r3, #104	; 0x68
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff fc88 	bl	800d462 <xTCPWindowPeekHead>
 800db52:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d019      	beq.n	800db8e <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	3310      	adds	r3, #16
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fb2a 	bl	800d1b8 <ulTimerGetAge>
 800db64:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	461a      	mov	r2, r3
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	7d1b      	ldrb	r3, [r3, #20]
 800db70:	fa02 f303 	lsl.w	r3, r2, r3
 800db74:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d904      	bls.n	800db88 <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	1ad2      	subs	r2, r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	e027      	b.n	800dbde <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3354      	adds	r3, #84	; 0x54
 800db92:	4618      	mov	r0, r3
 800db94:	f7ff fc65 	bl	800d462 <xTCPWindowPeekHead>
 800db98:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800dba0:	2300      	movs	r3, #0
 800dba2:	61fb      	str	r3, [r7, #28]
 800dba4:	e01b      	b.n	800dbde <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800dba6:	68b9      	ldr	r1, [r7, #8]
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff ff77 	bl	800da9c <prvTCPWindowTxHasSpace>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61fb      	str	r3, [r7, #28]
 800dbb8:	e011      	b.n	800dbde <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d008      	beq.n	800dbda <xTCPWindowTxHasData+0xb2>
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	689a      	ldr	r2, [r3, #8]
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	da02      	bge.n	800dbda <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	61fb      	str	r3, [r7, #28]
 800dbd8:	e001      	b.n	800dbde <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800dbde:	69fb      	ldr	r3, [r7, #28]
        }
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3720      	adds	r7, #32
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08a      	sub	sp, #40	; 0x28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf8:	623b      	str	r3, [r7, #32]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	3340      	adds	r3, #64	; 0x40
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fc13 	bl	800d42a <xTCPWindowGetHead>
 800dc04:	6278      	str	r0, [r7, #36]	; 0x24
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d169      	bne.n	800dce8 <ulTCPWindowTxGet+0x100>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3368      	adds	r3, #104	; 0x68
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fc22 	bl	800d462 <xTCPWindowPeekHead>
 800dc1e:	6278      	str	r0, [r7, #36]	; 0x24

                if( pxSegment != NULL )
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d01f      	beq.n	800dc66 <ulTCPWindowTxGet+0x7e>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	fa02 f303 	lsl.w	r3, r2, r3
 800dc34:	61fb      	str	r3, [r7, #28]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	3310      	adds	r3, #16
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fabc 	bl	800d1b8 <ulTimerGetAge>
 800dc40:	4602      	mov	r2, r0
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d20c      	bcs.n	800dc62 <ulTCPWindowTxGet+0x7a>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3368      	adds	r3, #104	; 0x68
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fbec 	bl	800d42a <xTCPWindowGetHead>
 800dc52:	6278      	str	r0, [r7, #36]	; 0x24
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	2200      	movs	r2, #0
 800dc58:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800dc5a:	4b52      	ldr	r3, [pc, #328]	; (800dda4 <ulTCPWindowTxGet+0x1bc>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	e001      	b.n	800dc66 <ulTCPWindowTxGet+0x7e>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800dc62:	2300      	movs	r3, #0
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }

                if( pxSegment == NULL )
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d13d      	bne.n	800dce8 <ulTCPWindowTxGet+0x100>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3354      	adds	r3, #84	; 0x54
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff fbf6 	bl	800d462 <xTCPWindowPeekHead>
 800dc76:	6278      	str	r0, [r7, #36]	; 0x24

                    if( pxSegment == NULL )
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d102      	bne.n	800dc84 <ulTCPWindowTxGet+0x9c>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	623b      	str	r3, [r7, #32]
 800dc82:	e031      	b.n	800dce8 <ulTCPWindowTxGet+0x100>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d008      	beq.n	800dca4 <ulTCPWindowTxGet+0xbc>
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	da02      	bge.n	800dca4 <ulTCPWindowTxGet+0xbc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	623b      	str	r3, [r7, #32]
 800dca2:	e021      	b.n	800dce8 <ulTCPWindowTxGet+0x100>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800dca4:	68b9      	ldr	r1, [r7, #8]
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f7ff fef8 	bl	800da9c <prvTCPWindowTxHasSpace>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <ulTCPWindowTxGet+0xd0>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	e017      	b.n	800dce8 <ulTCPWindowTxGet+0x100>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	3354      	adds	r3, #84	; 0x54
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff fbb4 	bl	800d42a <xTCPWindowGetHead>
 800dcc2:	6278      	str	r0, [r7, #36]	; 0x24

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d102      	bne.n	800dcd4 <ulTCPWindowTxGet+0xec>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcda:	6892      	ldr	r2, [r2, #8]
 800dcdc:	441a      	add	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800dce2:	4b30      	ldr	r3, [pc, #192]	; (800dda4 <ulTCPWindowTxGet+0x1bc>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b01      	cmp	r3, #1
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d054      	beq.n	800dd98 <ulTCPWindowTxGet+0x1b0>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10b      	bne.n	800dd0c <ulTCPWindowTxGet+0x124>
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	b672      	cpsid	i
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	b662      	cpsie	i
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	e7fe      	b.n	800dd0a <ulTCPWindowTxGet+0x122>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00b      	beq.n	800dd2c <ulTCPWindowTxGet+0x144>
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	b672      	cpsid	i
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	b662      	cpsie	i
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	e7fe      	b.n	800dd2a <ulTCPWindowTxGet+0x142>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	3318      	adds	r3, #24
 800dd36:	4619      	mov	r1, r3
 800dd38:	4610      	mov	r0, r2
 800dd3a:	f7ff fa20 	bl	800d17e <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800dd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd40:	7d93      	ldrb	r3, [r2, #22]
 800dd42:	f043 0301 	orr.w	r3, r3, #1
 800dd46:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	7d1b      	ldrb	r3, [r3, #20]
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	d10d      	bne.n	800dd78 <ulTCPWindowTxGet+0x190>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	689a      	ldr	r2, [r3, #8]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800dd66:	005b      	lsls	r3, r3, #1
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d905      	bls.n	800dd78 <ulTCPWindowTxGet+0x190>
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800dd72:	005a      	lsls	r2, r3, #1
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	3310      	adds	r3, #16
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff fa0e 	bl	800d19e <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	68da      	ldr	r2, [r3, #12]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	623b      	str	r3, [r7, #32]
            }

            return ulReturn;
 800dd98:	6a3b      	ldr	r3, [r7, #32]
        }
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3728      	adds	r7, #40	; 0x28
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	2001a9fc 	.word	0x2001a9fc

0800dda8 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08c      	sub	sp, #48	; 0x30
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	62bb      	str	r3, [r7, #40]	; 0x28
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	3398      	adds	r3, #152	; 0x98
 800ddc0:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800ddc8:	e099      	b.n	800defe <prvTCPWindowTxCheckAck+0x156>
            {
                xDoUnlink = pdFALSE;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	623b      	str	r3, [r7, #32]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff f96e 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800ddd8:	61b8      	str	r0, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4619      	mov	r1, r3
 800dde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde8:	f7ff f99c 	bl	800d124 <xSequenceGreaterThan>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d000      	beq.n	800ddf4 <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800ddf2:	e084      	b.n	800defe <prvTCPWindowTxCheckAck+0x156>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	f040 808c 	bne.w	800df18 <prvTCPWindowTxCheckAck+0x170>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	7d9b      	ldrb	r3, [r3, #22]
 800de0a:	f003 0302 	and.w	r3, r3, #2
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d14d      	bne.n	800deb0 <prvTCPWindowTxCheckAck+0x108>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	4413      	add	r3, r2
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff f980 	bl	800d124 <xSequenceGreaterThan>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d178      	bne.n	800df1c <prvTCPWindowTxCheckAck+0x174>
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800de2a:	69ba      	ldr	r2, [r7, #24]
 800de2c:	7d93      	ldrb	r3, [r2, #22]
 800de2e:	f043 0302 	orr.w	r3, r3, #2
 800de32:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	7d1b      	ldrb	r3, [r3, #20]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d137      	bne.n	800deac <prvTCPWindowTxCheckAck+0x104>
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	4413      	add	r3, r2
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	429a      	cmp	r2, r3
 800de48:	d130      	bne.n	800deac <prvTCPWindowTxCheckAck+0x104>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	3310      	adds	r3, #16
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff f9b2 	bl	800d1b8 <ulTimerGetAge>
 800de54:	4603      	mov	r3, r0
 800de56:	613b      	str	r3, [r7, #16]

                        if( pxWindow->lSRTT >= mS )
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	429a      	cmp	r2, r3
 800de60:	dc0e      	bgt.n	800de80 <prvTCPWindowTxCheckAck+0xd8>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de66:	4613      	mov	r3, r2
 800de68:	00db      	lsls	r3, r3, #3
 800de6a:	1a9a      	subs	r2, r3, r2
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	4413      	add	r3, r2
 800de70:	2b00      	cmp	r3, #0
 800de72:	da00      	bge.n	800de76 <prvTCPWindowTxCheckAck+0xce>
 800de74:	3307      	adds	r3, #7
 800de76:	10db      	asrs	r3, r3, #3
 800de78:	461a      	mov	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38
 800de7e:	e00e      	b.n	800de9e <prvTCPWindowTxCheckAck+0xf6>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de84:	4613      	mov	r3, r2
 800de86:	005b      	lsls	r3, r3, #1
 800de88:	441a      	add	r2, r3
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	4413      	add	r3, r2
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	da00      	bge.n	800de96 <prvTCPWindowTxCheckAck+0xee>
 800de94:	3307      	adds	r3, #7
 800de96:	10db      	asrs	r3, r3, #3
 800de98:	461a      	mov	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea2:	2b31      	cmp	r3, #49	; 0x31
 800dea4:	dc02      	bgt.n	800deac <prvTCPWindowTxCheckAck+0x104>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2232      	movs	r2, #50	; 0x32
 800deaa:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 800deac:	2301      	movs	r3, #1
 800deae:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d111      	bne.n	800dede <prvTCPWindowTxCheckAck+0x136>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800deba:	4b1b      	ldr	r3, [pc, #108]	; (800df28 <prvTCPWindowTxCheckAck+0x180>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b01      	cmp	r3, #1
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6a1a      	ldr	r2, [r3, #32]
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	441a      	add	r2, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 800decc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	4413      	add	r3, r2
 800ded2:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 800ded4:	69b8      	ldr	r0, [r7, #24]
 800ded6:	f7ff fadd 	bl	800d494 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d008      	beq.n	800def6 <prvTCPWindowTxCheckAck+0x14e>
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <prvTCPWindowTxCheckAck+0x14e>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	3318      	adds	r3, #24
 800def0:	4618      	mov	r0, r3
 800def2:	f7f6 f8ba 	bl	800406a <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 800def6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	4413      	add	r3, r2
 800defc:	62bb      	str	r3, [r7, #40]	; 0x28
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	429a      	cmp	r2, r3
 800df04:	d00b      	beq.n	800df1e <prvTCPWindowTxCheckAck+0x176>
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0a:	f7ff f8f4 	bl	800d0f6 <xSequenceLessThan>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	f47f af5a 	bne.w	800ddca <prvTCPWindowTxCheckAck+0x22>
 800df16:	e002      	b.n	800df1e <prvTCPWindowTxCheckAck+0x176>
                    break;
 800df18:	bf00      	nop
 800df1a:	e000      	b.n	800df1e <prvTCPWindowTxCheckAck+0x176>
                        break;
 800df1c:	bf00      	nop
            }

            return ulBytesConfirmed;
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        }
 800df20:	4618      	mov	r0, r3
 800df22:	3730      	adds	r7, #48	; 0x30
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	2001a9fc 	.word	0x2001a9fc

0800df2c <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 800df36:	2300      	movs	r3, #0
 800df38:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	3370      	adds	r3, #112	; 0x70
 800df3e:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800df46:	e039      	b.n	800dfbc <prvTCPWindowFastRetransmit+0x90>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7ff f8b1 	bl	800d0b4 <vCastPointerTo_TCPSegment_t>
 800df52:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	7d9b      	ldrb	r3, [r3, #22]
 800df5e:	f003 0302 	and.w	r3, r3, #2
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b00      	cmp	r3, #0
 800df66:	d129      	bne.n	800dfbc <prvTCPWindowFastRetransmit+0x90>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff f8c1 	bl	800d0f6 <xSequenceLessThan>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d020      	beq.n	800dfbc <prvTCPWindowFastRetransmit+0x90>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	7d5b      	ldrb	r3, [r3, #21]
 800df7e:	3301      	adds	r3, #1
 800df80:	b2da      	uxtb	r2, r3
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	7d5b      	ldrb	r3, [r3, #21]
 800df8a:	2b03      	cmp	r3, #3
 800df8c:	d116      	bne.n	800dfbc <prvTCPWindowFastRetransmit+0x90>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	2200      	movs	r2, #0
 800df92:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800df94:	4b0e      	ldr	r3, [pc, #56]	; (800dfd0 <prvTCPWindowFastRetransmit+0xa4>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	3318      	adds	r3, #24
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7f6 f863 	bl	800406a <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	3318      	adds	r3, #24
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	f7ff f8e4 	bl	800d17e <vListInsertFifo>
                            ulCount++;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d1c1      	bne.n	800df48 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 800dfc4:	693b      	ldr	r3, [r7, #16]
        }
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	2001a9fc 	.word	0x2001a9fc

0800dfd4 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800dfe4:	68b9      	ldr	r1, [r7, #8]
 800dfe6:	6838      	ldr	r0, [r7, #0]
 800dfe8:	f7ff f86f 	bl	800d0ca <xSequenceLessThanOrEqual>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d002      	beq.n	800dff8 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	e005      	b.n	800e004 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	68b9      	ldr	r1, [r7, #8]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff fed3 	bl	800dda8 <prvTCPWindowTxCheckAck>
 800e002:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 800e004:	68fb      	ldr	r3, [r7, #12]
        }
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6a1b      	ldr	r3, [r3, #32]
 800e020:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f7ff febe 	bl	800dda8 <prvTCPWindowTxCheckAck>
 800e02c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff ff7b 	bl	800df2c <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800e036:	4b06      	ldr	r3, [pc, #24]	; (800e050 <ulTCPWindowTxSack+0x40>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	dd03      	ble.n	800e046 <ulTCPWindowTxSack+0x36>
 800e03e:	6979      	ldr	r1, [r7, #20]
 800e040:	68b8      	ldr	r0, [r7, #8]
 800e042:	f7ff f86f 	bl	800d124 <xSequenceGreaterThan>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 800e046:	693b      	ldr	r3, [r7, #16]
        }
 800e048:	4618      	mov	r0, r3
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	2001a9fc 	.word	0x2001a9fc

0800e054 <vCastPointerTo_UDPPacket_t>:
    {
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 800e05c:	687b      	ldr	r3, [r7, #4]
    }
 800e05e:	4618      	mov	r0, r3
 800e060:	370c      	adds	r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <vCastConstPointerTo_UDPPacket_t>:
    {
 800e06a:	b480      	push	{r7}
 800e06c:	b083      	sub	sp, #12
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 800e072:	687b      	ldr	r3, [r7, #4]
    }
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b08c      	sub	sp, #48	; 0x30
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	699b      	ldr	r3, [r3, #24]
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff ffde 	bl	800e054 <vCastPointerTo_UDPPacket_t>
 800e098:	62b8      	str	r0, [r7, #40]	; 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	3b2a      	subs	r3, #42	; 0x2a
 800e0a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800e0a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f8 fd4c 	bl	8006b48 <eARPGetCacheEntry>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 800e0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	f000 80a0 	beq.w	800e200 <vProcessGeneratedUDPPacket+0x180>
    {
        if( eReturned == eARPCacheHit )
 800e0c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	f040 8088 	bne.w	800e1da <vProcessGeneratedUDPPacket+0x15a>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 800e0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0cc:	330e      	adds	r3, #14
 800e0ce:	623b      	str	r3, [r7, #32]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d2:	3322      	adds	r3, #34	; 0x22
 800e0d4:	61fb      	str	r3, [r7, #28]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	8c1a      	ldrh	r2, [r3, #32]
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	3308      	adds	r3, #8
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	889b      	ldrh	r3, [r3, #4]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	021b      	lsls	r3, r3, #8
 800e0fa:	b21a      	sxth	r2, r3
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	889b      	ldrh	r3, [r3, #4]
 800e100:	b29b      	uxth	r3, r3
 800e102:	0a1b      	lsrs	r3, r3, #8
 800e104:	b29b      	uxth	r3, r3
 800e106:	b21b      	sxth	r3, r3
 800e108:	4313      	orrs	r3, r2
 800e10a:	b21b      	sxth	r3, r3
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	2200      	movs	r2, #0
 800e116:	719a      	strb	r2, [r3, #6]
 800e118:	2200      	movs	r2, #0
 800e11a:	71da      	strb	r2, [r3, #7]
             */

            /* Save options now, as they will be overwritten by memcpy */
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	799b      	ldrb	r3, [r3, #6]
 800e122:	76fb      	strb	r3, [r7, #27]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 800e124:	4b3e      	ldr	r3, [pc, #248]	; (800e220 <vProcessGeneratedUDPPacket+0x1a0>)
 800e126:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	3306      	adds	r3, #6
 800e12e:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800e130:	2218      	movs	r2, #24
 800e132:	6979      	ldr	r1, [r7, #20]
 800e134:	6938      	ldr	r0, [r7, #16]
 800e136:	f002 f94c 	bl	80103d2 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	331c      	adds	r3, #28
 800e140:	b29a      	uxth	r2, r3
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	885b      	ldrh	r3, [r3, #2]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	021b      	lsls	r3, r3, #8
 800e14e:	b21a      	sxth	r2, r3
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	885b      	ldrh	r3, [r3, #2]
 800e154:	b29b      	uxth	r3, r3
 800e156:	0a1b      	lsrs	r3, r3, #8
 800e158:	b29b      	uxth	r3, r3
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	4313      	orrs	r3, r2
 800e15e:	b21b      	sxth	r3, r3
 800e160:	b29a      	uxth	r2, r3
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	695a      	ldr	r2, [r3, #20]
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	611a      	str	r2, [r3, #16]
                }
            #endif

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    pxIPHeader->usHeaderChecksum = 0U;
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	2200      	movs	r2, #0
 800e172:	729a      	strb	r2, [r3, #10]
 800e174:	2200      	movs	r2, #0
 800e176:	72da      	strb	r2, [r3, #11]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2214      	movs	r2, #20
 800e17c:	4619      	mov	r1, r3
 800e17e:	2000      	movs	r0, #0
 800e180:	f7fa fc28 	bl	80089d4 <usGenerateChecksum>
 800e184:	4603      	mov	r3, r0
 800e186:	461a      	mov	r2, r3
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	895b      	ldrh	r3, [r3, #10]
 800e190:	b29b      	uxth	r3, r3
 800e192:	021b      	lsls	r3, r3, #8
 800e194:	b21a      	sxth	r2, r3
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	895b      	ldrh	r3, [r3, #10]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	0a1b      	lsrs	r3, r3, #8
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	b21b      	sxth	r3, r3
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	43db      	mvns	r3, r3
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	815a      	strh	r2, [r3, #10]

                    if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0U )
 800e1b0:	7efb      	ldrb	r3, [r7, #27]
 800e1b2:	f003 0302 	and.w	r3, r3, #2
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <vProcessGeneratedUDPPacket+0x14a>
                    {
                        ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	69db      	ldr	r3, [r3, #28]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1c4:	f7fa fae8 	bl	8008798 <usGenerateProtocolChecksum>
 800e1c8:	e01a      	b.n	800e200 <vProcessGeneratedUDPPacket+0x180>
                    }
                    else
                    {
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800e1d8:	e012      	b.n	800e200 <vProcessGeneratedUDPPacket+0x180>
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 800e1da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10b      	bne.n	800e1fa <vProcessGeneratedUDPPacket+0x17a>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f7f8 fbb6 	bl	8006958 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7f8 fe1c 	bl	8006e30 <vARPGenerateRequestPacket>
 800e1f8:	e002      	b.n	800e200 <vProcessGeneratedUDPPacket+0x180>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 800e200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e204:	2b02      	cmp	r3, #2
 800e206:	d004      	beq.n	800e212 <vProcessGeneratedUDPPacket+0x192>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800e208:	2101      	movs	r1, #1
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fbae 	bl	800e96c <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 800e210:	e002      	b.n	800e218 <vProcessGeneratedUDPPacket+0x198>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f98e 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
}
 800e218:	bf00      	nop
 800e21a:	3730      	adds	r7, #48	; 0x30
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	20000010 	.word	0x20000010

0800e224 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 800e230:	2301      	movs	r3, #1
 800e232:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10b      	bne.n	800e252 <xProcessReceivedUDPPacket+0x2e>
 800e23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23e:	b672      	cpsid	i
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	b662      	cpsie	i
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	e7fe      	b.n	800e250 <xProcessReceivedUDPPacket+0x2c>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10b      	bne.n	800e272 <xProcessReceivedUDPPacket+0x4e>
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	b672      	cpsid	i
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	b662      	cpsie	i
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	e7fe      	b.n	800e270 <xProcessReceivedUDPPacket+0x4c>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	699b      	ldr	r3, [r3, #24]
 800e276:	4618      	mov	r0, r3
 800e278:	f7ff fef7 	bl	800e06a <vCastConstPointerTo_UDPPacket_t>
 800e27c:	61b8      	str	r0, [r7, #24]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 800e27e:	887b      	ldrh	r3, [r7, #2]
 800e280:	4618      	mov	r0, r3
 800e282:	f7fb fcc1 	bl	8009c08 <pxUDPSocketLookup>
 800e286:	6178      	str	r0, [r7, #20]

    if( pxSocket != NULL )
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d03c      	beq.n	800e308 <xProcessReceivedUDPPacket+0xe4>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	1d9a      	adds	r2, r3, #6
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7f8 fb5c 	bl	8006958 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 800e2a0:	f7f6 fef0 	bl	8005084 <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 800e2a4:	f7f7 ffb8 	bl	8006218 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	3338      	adds	r3, #56	; 0x38
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f5 fe7d 	bl	8003fb0 <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 800e2b6:	f7f7 ffe1 	bl	800627c <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 800e2ba:	f7f6 fef1 	bl	80050a0 <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d005      	beq.n	800e2d2 <xProcessReceivedUDPPacket+0xae>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f5 fd5d 	bl	8003d8c <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00c      	beq.n	800e2f4 <xProcessReceivedUDPPacket+0xd0>
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d006      	beq.n	800e2f4 <xProcessReceivedUDPPacket+0xd0>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7f5 fd4c 	bl	8003d8c <xEventGroupSetBits>
                }
            #endif

            #if ( ipconfigUSE_DHCP == 1 )
                {
                    if( xIsDHCPSocket( pxSocket ) != 0 )
 800e2f4:	6978      	ldr	r0, [r7, #20]
 800e2f6:	f7f8 fe1f 	bl	8006f38 <xIsDHCPSocket>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <xProcessReceivedUDPPacket+0xe8>
                    {
                        ( void ) xSendEventToIPTask( eDHCPEvent );
 800e300:	2005      	movs	r0, #5
 800e302:	f7f9 fe6b 	bl	8007fdc <xSendEventToIPTask>
 800e306:	e001      	b.n	800e30c <xProcessReceivedUDPPacket+0xe8>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 800e308:	2300      	movs	r3, #0
 800e30a:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800e30c:	69fb      	ldr	r3, [r7, #28]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3720      	adds	r7, #32
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 800e31e:	4b38      	ldr	r3, [pc, #224]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d15e      	bne.n	800e3e4 <xNetworkBuffersInitialise+0xcc>
    {
        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800e326:	213c      	movs	r1, #60	; 0x3c
 800e328:	203c      	movs	r0, #60	; 0x3c
 800e32a:	f7f5 ff93 	bl	8004254 <xQueueCreateCountingSemaphore>
 800e32e:	4602      	mov	r2, r0
 800e330:	4b33      	ldr	r3, [pc, #204]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e332:	601a      	str	r2, [r3, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 800e334:	4b32      	ldr	r3, [pc, #200]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10b      	bne.n	800e354 <xNetworkBuffersInitialise+0x3c>
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	b672      	cpsid	i
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	b662      	cpsie	i
 800e350:	607b      	str	r3, [r7, #4]
 800e352:	e7fe      	b.n	800e352 <xNetworkBuffersInitialise+0x3a>

        if( xNetworkBufferSemaphore != NULL )
 800e354:	4b2a      	ldr	r3, [pc, #168]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d043      	beq.n	800e3e4 <xNetworkBuffersInitialise+0xcc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800e35c:	4b28      	ldr	r3, [pc, #160]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4928      	ldr	r1, [pc, #160]	; (800e404 <xNetworkBuffersInitialise+0xec>)
 800e362:	4618      	mov	r0, r3
 800e364:	f7f6 fc0c 	bl	8004b80 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 800e368:	4827      	ldr	r0, [pc, #156]	; (800e408 <xNetworkBuffersInitialise+0xf0>)
 800e36a:	f7f5 fdf4 	bl	8003f56 <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800e36e:	2300      	movs	r3, #0
 800e370:	60bb      	str	r3, [r7, #8]
 800e372:	e031      	b.n	800e3d8 <xNetworkBuffersInitialise+0xc0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800e374:	4925      	ldr	r1, [pc, #148]	; (800e40c <xNetworkBuffersInitialise+0xf4>)
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	4613      	mov	r3, r2
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	4413      	add	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	440b      	add	r3, r1
 800e382:	3318      	adds	r3, #24
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	4613      	mov	r3, r2
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a1e      	ldr	r2, [pc, #120]	; (800e40c <xNetworkBuffersInitialise+0xf4>)
 800e394:	4413      	add	r3, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f7f5 fdfd 	bl	8003f96 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	4413      	add	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4a19      	ldr	r2, [pc, #100]	; (800e40c <xNetworkBuffersInitialise+0xf4>)
 800e3a8:	1899      	adds	r1, r3, r2
 800e3aa:	4818      	ldr	r0, [pc, #96]	; (800e40c <xNetworkBuffersInitialise+0xf4>)
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	00db      	lsls	r3, r3, #3
 800e3b2:	4413      	add	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4403      	add	r3, r0
 800e3b8:	330c      	adds	r3, #12
 800e3ba:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	00db      	lsls	r3, r3, #3
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4a11      	ldr	r2, [pc, #68]	; (800e40c <xNetworkBuffersInitialise+0xf4>)
 800e3c8:	4413      	add	r3, r2
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	480e      	ldr	r0, [pc, #56]	; (800e408 <xNetworkBuffersInitialise+0xf0>)
 800e3ce:	f7f5 fe13 	bl	8003ff8 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	60bb      	str	r3, [r7, #8]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b3b      	cmp	r3, #59	; 0x3b
 800e3dc:	d9ca      	bls.n	800e374 <xNetworkBuffersInitialise+0x5c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800e3de:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <xNetworkBuffersInitialise+0xf8>)
 800e3e0:	223c      	movs	r2, #60	; 0x3c
 800e3e2:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 800e3e4:	4b06      	ldr	r3, [pc, #24]	; (800e400 <xNetworkBuffersInitialise+0xe8>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d102      	bne.n	800e3f2 <xNetworkBuffersInitialise+0xda>
    {
        xReturn = pdFAIL;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	e001      	b.n	800e3f6 <xNetworkBuffersInitialise+0xde>
    }
    else
    {
        xReturn = pdPASS;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	2001b288 	.word	0x2001b288
 800e404:	08010d7c 	.word	0x08010d7c
 800e408:	2001aa00 	.word	0x2001aa00
 800e40c:	2001aa18 	.word	0x2001aa18
 800e410:	2001aa14 	.word	0x2001aa14

0800e414 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d005      	beq.n	800e42e <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	3b0a      	subs	r3, #10
 800e426:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7f8 f8df 	bl	80065ec <vPortFree>
    }
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	617b      	str	r3, [r7, #20]
    size_t uxCount;

    if( xNetworkBufferSemaphore != NULL )
 800e446:	4b38      	ldr	r3, [pc, #224]	; (800e528 <pxGetNetworkBufferWithDescriptor+0xf0>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d066      	beq.n	800e51c <pxGetNetworkBufferWithDescriptor+0xe4>
    {
        if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <pxGetNetworkBufferWithDescriptor+0x26>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b45      	cmp	r3, #69	; 0x45
 800e458:	d801      	bhi.n	800e45e <pxGetNetworkBufferWithDescriptor+0x26>
        {
            /* ARP packets can replace application packets, so the storage must be
             * at least large enough to hold an ARP. */
            xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800e45a:	2346      	movs	r3, #70	; 0x46
 800e45c:	607b      	str	r3, [r7, #4]
        }

        /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
         * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
        xRequestedSizeBytes += 2U;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3302      	adds	r3, #2
 800e462:	607b      	str	r3, [r7, #4]

        if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f003 0303 	and.w	r3, r3, #3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <pxGetNetworkBufferWithDescriptor+0x40>
        {
            xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f043 0303 	orr.w	r3, r3, #3
 800e474:	3301      	adds	r3, #1
 800e476:	607b      	str	r3, [r7, #4]
        }

        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800e478:	4b2b      	ldr	r3, [pc, #172]	; (800e528 <pxGetNetworkBufferWithDescriptor+0xf0>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f6 f902 	bl	8004688 <xQueueSemaphoreTake>
 800e484:	4603      	mov	r3, r0
 800e486:	2b01      	cmp	r3, #1
 800e488:	d148      	bne.n	800e51c <pxGetNetworkBufferWithDescriptor+0xe4>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 800e48a:	f7f7 fec5 	bl	8006218 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800e48e:	4b27      	ldr	r3, [pc, #156]	; (800e52c <pxGetNetworkBufferWithDescriptor+0xf4>)
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	617b      	str	r3, [r7, #20]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f5 fde6 	bl	800406a <uxListRemove>
            }
            taskEXIT_CRITICAL();
 800e49e:	f7f7 feed 	bl	800627c <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800e4a2:	4b22      	ldr	r3, [pc, #136]	; (800e52c <pxGetNetworkBufferWithDescriptor+0xf4>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	613b      	str	r3, [r7, #16]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 800e4a8:	4b21      	ldr	r3, [pc, #132]	; (800e530 <pxGetNetworkBufferWithDescriptor+0xf8>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	693a      	ldr	r2, [r7, #16]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d202      	bcs.n	800e4b8 <pxGetNetworkBufferWithDescriptor+0x80>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 800e4b2:	4a1f      	ldr	r2, [pc, #124]	; (800e530 <pxGetNetworkBufferWithDescriptor+0xf8>)
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <pxGetNetworkBufferWithDescriptor+0xa0>
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	b672      	cpsid	i
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	b662      	cpsie	i
 800e4d4:	60fb      	str	r3, [r7, #12]
 800e4d6:	e7fe      	b.n	800e4d6 <pxGetNetworkBufferWithDescriptor+0x9e>

            if( xRequestedSizeBytes > 0U )
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d01e      	beq.n	800e51c <pxGetNetworkBufferWithDescriptor+0xe4>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	330a      	adds	r3, #10
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7f7 ffba 	bl	800645c <pvPortMalloc>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	699b      	ldr	r3, [r3, #24]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d105      	bne.n	800e502 <pxGetNetworkBufferWithDescriptor+0xca>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 800e4f6:	6978      	ldr	r0, [r7, #20]
 800e4f8:	f000 f81c 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e00c      	b.n	800e51c <pxGetNetworkBufferWithDescriptor+0xe4>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	699b      	ldr	r3, [r3, #24]
 800e50e:	f103 020a 	add.w	r2, r3, #10
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	61da      	str	r2, [r3, #28]
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 800e51c:	697b      	ldr	r3, [r7, #20]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	2001b288 	.word	0x2001b288
 800e52c:	2001aa00 	.word	0x2001aa00
 800e530:	2001aa14 	.word	0x2001aa14

0800e534 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff ff67 	bl	800e414 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	619a      	str	r2, [r3, #24]

    taskENTER_CRITICAL();
 800e54c:	f7f7 fe64 	bl	8006218 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	4a0f      	ldr	r2, [pc, #60]	; (800e594 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d101      	bne.n	800e55e <vReleaseNetworkBufferAndDescriptor+0x2a>
 800e55a:	2301      	movs	r3, #1
 800e55c:	e000      	b.n	800e560 <vReleaseNetworkBufferAndDescriptor+0x2c>
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d104      	bne.n	800e572 <vReleaseNetworkBufferAndDescriptor+0x3e>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4619      	mov	r1, r3
 800e56c:	4809      	ldr	r0, [pc, #36]	; (800e594 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800e56e:	f7f5 fd1f 	bl	8003fb0 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 800e572:	f7f7 fe83 	bl	800627c <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d106      	bne.n	800e58a <vReleaseNetworkBufferAndDescriptor+0x56>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 800e57c:	4b06      	ldr	r3, [pc, #24]	; (800e598 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800e57e:	6818      	ldr	r0, [r3, #0]
 800e580:	2300      	movs	r3, #0
 800e582:	2200      	movs	r2, #0
 800e584:	2100      	movs	r1, #0
 800e586:	f7f5 fe9b 	bl	80042c0 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	2001aa00 	.word	0x2001aa00
 800e598:	2001b288 	.word	0x2001b288

0800e59c <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 800e59c:	b480      	push	{r7}
 800e59e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800e5a0:	4b03      	ldr	r3, [pc, #12]	; (800e5b0 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	2001aa00 	.word	0x2001aa00

0800e5b4 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 800e5b8:	4b03      	ldr	r3, [pc, #12]	; (800e5c8 <uxGetMinimumFreeNetworkBuffers+0x14>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop
 800e5c8:	2001aa14 	.word	0x2001aa14

0800e5cc <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 800e5d8:	4b10      	ldr	r3, [pc, #64]	; (800e61c <HAL_ETH_RxCpltCallback+0x50>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f043 0301 	orr.w	r3, r3, #1
 800e5e0:	4a0e      	ldr	r2, [pc, #56]	; (800e61c <HAL_ETH_RxCpltCallback+0x50>)
 800e5e2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <HAL_ETH_RxCpltCallback+0x54>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d012      	beq.n	800e612 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 800e5ec:	4b0c      	ldr	r3, [pc, #48]	; (800e620 <HAL_ETH_RxCpltCallback+0x54>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f107 020c 	add.w	r2, r7, #12
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7f7 fc0a 	bl	8005e10 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d007      	beq.n	800e612 <HAL_ETH_RxCpltCallback+0x46>
 800e602:	4b08      	ldr	r3, [pc, #32]	; (800e624 <HAL_ETH_RxCpltCallback+0x58>)
 800e604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	f3bf 8f6f 	isb	sy
    }
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	2001b290 	.word	0x2001b290
 800e620:	2001b324 	.word	0x2001b324
 800e624:	e000ed04 	.word	0xe000ed04

0800e628 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 800e634:	4b10      	ldr	r3, [pc, #64]	; (800e678 <HAL_ETH_TxCpltCallback+0x50>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f043 0302 	orr.w	r3, r3, #2
 800e63c:	4a0e      	ldr	r2, [pc, #56]	; (800e678 <HAL_ETH_TxCpltCallback+0x50>)
 800e63e:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800e640:	4b0e      	ldr	r3, [pc, #56]	; (800e67c <HAL_ETH_TxCpltCallback+0x54>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d012      	beq.n	800e66e <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <HAL_ETH_TxCpltCallback+0x54>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f107 020c 	add.w	r2, r7, #12
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f7f7 fbdc 	bl	8005e10 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d007      	beq.n	800e66e <HAL_ETH_TxCpltCallback+0x46>
 800e65e:	4b08      	ldr	r3, [pc, #32]	; (800e680 <HAL_ETH_TxCpltCallback+0x58>)
 800e660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	f3bf 8f6f 	isb	sy
    }
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	2001b290 	.word	0x2001b290
 800e67c:	2001b324 	.word	0x2001b324
 800e680:	e000ed04 	.word	0xe000ed04

0800e684 <vClearTXBuffers>:
/*-----------------------------------------------------------*/

static void vClearTXBuffers()
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 800e68a:	4b19      	ldr	r3, [pc, #100]	; (800e6f0 <vClearTXBuffers+0x6c>)
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	603b      	str	r3, [r7, #0]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800e690:	4b18      	ldr	r3, [pc, #96]	; (800e6f4 <vClearTXBuffers+0x70>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4618      	mov	r0, r3
 800e696:	f7f6 f907 	bl	80048a8 <uxQueueMessagesWaiting>
 800e69a:	4603      	mov	r3, r0
 800e69c:	f1c3 0304 	rsb	r3, r3, #4
 800e6a0:	607b      	str	r3, [r7, #4]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 800e6a2:	e017      	b.n	800e6d4 <vClearTXBuffers+0x50>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 800e6a4:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <vClearTXBuffers+0x74>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d102      	bne.n	800e6b4 <vClearTXBuffers+0x30>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b04      	cmp	r3, #4
 800e6b2:	d118      	bne.n	800e6e6 <vClearTXBuffers+0x62>
                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 800e6b4:	4b10      	ldr	r3, [pc, #64]	; (800e6f8 <vClearTXBuffers+0x74>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	; (800e6f8 <vClearTXBuffers+0x74>)
 800e6be:	601a      	str	r2, [r3, #0]

        uxCount--;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	607b      	str	r3, [r7, #4]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 800e6c6:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <vClearTXBuffers+0x70>)
 800e6c8:	6818      	ldr	r0, [r3, #0]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	f7f5 fdf6 	bl	80042c0 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d006      	beq.n	800e6e8 <vClearTXBuffers+0x64>
 800e6da:	4b07      	ldr	r3, [pc, #28]	; (800e6f8 <vClearTXBuffers+0x74>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	dadf      	bge.n	800e6a4 <vClearTXBuffers+0x20>
    }
}
 800e6e4:	e000      	b.n	800e6e8 <vClearTXBuffers+0x64>
            break;
 800e6e6:	bf00      	nop
}
 800e6e8:	bf00      	nop
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	2001b2d4 	.word	0x2001b2d4
 800e6f4:	2001b31c 	.word	0x2001b31c
 800e6f8:	2001b320 	.word	0x2001b320

0800e6fc <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 800e702:	4b45      	ldr	r3, [pc, #276]	; (800e818 <xNetworkInterfaceInitialise+0x11c>)
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d162      	bne.n	800e7d0 <xNetworkInterfaceInitialise+0xd4>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 800e70a:	2104      	movs	r1, #4
 800e70c:	2004      	movs	r0, #4
 800e70e:	f7f5 fda1 	bl	8004254 <xQueueCreateCountingSemaphore>
 800e712:	4602      	mov	r2, r0
 800e714:	4b41      	ldr	r3, [pc, #260]	; (800e81c <xNetworkInterfaceInitialise+0x120>)
 800e716:	601a      	str	r2, [r3, #0]

        if( xTXDescriptorSemaphore == NULL )
 800e718:	4b40      	ldr	r3, [pc, #256]	; (800e81c <xNetworkInterfaceInitialise+0x120>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d103      	bne.n	800e728 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 800e720:	4b3d      	ldr	r3, [pc, #244]	; (800e818 <xNetworkInterfaceInitialise+0x11c>)
 800e722:	2202      	movs	r2, #2
 800e724:	701a      	strb	r2, [r3, #0]
 800e726:	e053      	b.n	800e7d0 <xNetworkInterfaceInitialise+0xd4>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 800e728:	4b3d      	ldr	r3, [pc, #244]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e72a:	4a3e      	ldr	r2, [pc, #248]	; (800e824 <xNetworkInterfaceInitialise+0x128>)
 800e72c:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e72e:	4b3c      	ldr	r3, [pc, #240]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e730:	2201      	movs	r2, #1
 800e732:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 800e734:	4b3a      	ldr	r3, [pc, #232]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e73a:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e73c:	4b38      	ldr	r3, [pc, #224]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e73e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e742:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 800e744:	4b36      	ldr	r3, [pc, #216]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e746:	2200      	movs	r2, #0
 800e748:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 800e74a:	f7fa fa53 	bl	8008bf4 <FreeRTOS_GetMACAddress>
 800e74e:	4602      	mov	r2, r0
 800e750:	4b33      	ldr	r3, [pc, #204]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e752:	615a      	str	r2, [r3, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800e754:	4b32      	ldr	r3, [pc, #200]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e756:	2201      	movs	r2, #1
 800e758:	619a      	str	r2, [r3, #24]
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
                }
            #else
                {
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 800e75a:	4b31      	ldr	r3, [pc, #196]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e75c:	2201      	movs	r2, #1
 800e75e:	61da      	str	r2, [r3, #28]
                }
            #endif

            #if ( ipconfigUSE_RMII != 0 )
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e760:	4b2f      	ldr	r3, [pc, #188]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e762:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e766:	621a      	str	r2, [r3, #32]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init( &xETH );
 800e768:	482d      	ldr	r0, [pc, #180]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e76a:	f001 f803 	bl	800f774 <HAL_ETH_Init>
 800e76e:	4603      	mov	r3, r0
 800e770:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 800e772:	4b2b      	ldr	r3, [pc, #172]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e774:	4a2c      	ldr	r2, [pc, #176]	; (800e828 <xNetworkInterfaceInitialise+0x12c>)
 800e776:	62da      	str	r2, [r3, #44]	; 0x2c
            xETH.RxDesc = DMARxDscrTab;
 800e778:	4b29      	ldr	r3, [pc, #164]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e77a:	4a2c      	ldr	r2, [pc, #176]	; (800e82c <xNetworkInterfaceInitialise+0x130>)
 800e77c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 800e77e:	2280      	movs	r2, #128	; 0x80
 800e780:	2100      	movs	r1, #0
 800e782:	4829      	ldr	r0, [pc, #164]	; (800e828 <xNetworkInterfaceInitialise+0x12c>)
 800e784:	f001 fe49 	bl	801041a <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 800e788:	2280      	movs	r2, #128	; 0x80
 800e78a:	2100      	movs	r1, #0
 800e78c:	4827      	ldr	r0, [pc, #156]	; (800e82c <xNetworkInterfaceInitialise+0x130>)
 800e78e:	f001 fe44 	bl	801041a <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 800e792:	4b27      	ldr	r3, [pc, #156]	; (800e830 <xNetworkInterfaceInitialise+0x134>)
 800e794:	4a24      	ldr	r2, [pc, #144]	; (800e828 <xNetworkInterfaceInitialise+0x12c>)
 800e796:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 800e798:	f000 f856 	bl	800e848 <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 800e79c:	f000 f8a4 	bl	800e8e8 <prvDMARxDescListInit>
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 800e7a0:	2001      	movs	r0, #1
 800e7a2:	f000 fa97 	bl	800ecd4 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 800e7a6:	4b23      	ldr	r3, [pc, #140]	; (800e834 <xNetworkInterfaceInitialise+0x138>)
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	2306      	movs	r3, #6
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7b4:	4920      	ldr	r1, [pc, #128]	; (800e838 <xNetworkInterfaceInitialise+0x13c>)
 800e7b6:	4821      	ldr	r0, [pc, #132]	; (800e83c <xNetworkInterfaceInitialise+0x140>)
 800e7b8:	f7f6 fa94 	bl	8004ce4 <xTaskCreate>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d103      	bne.n	800e7ca <xNetworkInterfaceInitialise+0xce>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 800e7c2:	4b15      	ldr	r3, [pc, #84]	; (800e818 <xNetworkInterfaceInitialise+0x11c>)
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	e002      	b.n	800e7d0 <xNetworkInterfaceInitialise+0xd4>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 800e7ca:	4b13      	ldr	r3, [pc, #76]	; (800e818 <xNetworkInterfaceInitialise+0x11c>)
 800e7cc:	2202      	movs	r2, #2
 800e7ce:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 800e7d0:	4b11      	ldr	r3, [pc, #68]	; (800e818 <xNetworkInterfaceInitialise+0x11c>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d002      	beq.n	800e7de <xNetworkInterfaceInitialise+0xe2>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	607b      	str	r3, [r7, #4]
 800e7dc:	e016      	b.n	800e80c <xNetworkInterfaceInitialise+0x110>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 800e7de:	4b18      	ldr	r3, [pc, #96]	; (800e840 <xNetworkInterfaceInitialise+0x144>)
 800e7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d010      	beq.n	800e808 <xNetworkInterfaceInitialise+0x10c>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 800e7e6:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	f241 031c 	movw	r3, #4124	; 0x101c
 800e7ee:	4413      	add	r3, r2
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a0b      	ldr	r2, [pc, #44]	; (800e820 <xNetworkInterfaceInitialise+0x124>)
 800e7f4:	6811      	ldr	r1, [r2, #0]
 800e7f6:	4a13      	ldr	r2, [pc, #76]	; (800e844 <xNetworkInterfaceInitialise+0x148>)
 800e7f8:	431a      	orrs	r2, r3
 800e7fa:	f241 031c 	movw	r3, #4124	; 0x101c
 800e7fe:	440b      	add	r3, r1
 800e800:	601a      	str	r2, [r3, #0]
            xResult = pdPASS;
 800e802:	2301      	movs	r3, #1
 800e804:	607b      	str	r3, [r7, #4]
 800e806:	e001      	b.n	800e80c <xNetworkInterfaceInitialise+0x110>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 800e808:	2300      	movs	r3, #0
 800e80a:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 800e80c:	687b      	ldr	r3, [r7, #4]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	2001b28c 	.word	0x2001b28c
 800e81c:	2001b31c 	.word	0x2001b31c
 800e820:	2001b2d4 	.word	0x2001b2d4
 800e824:	40028000 	.word	0x40028000
 800e828:	20000120 	.word	0x20000120
 800e82c:	200000a0 	.word	0x200000a0
 800e830:	2001b320 	.word	0x2001b320
 800e834:	2001b324 	.word	0x2001b324
 800e838:	08010d88 	.word	0x08010d88
 800e83c:	0800edb5 	.word	0x0800edb5
 800e840:	2001b294 	.word	0x2001b294
 800e844:	380163fb 	.word	0x380163fb

0800e848 <prvDMATxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMATxDescListInit()
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 800e84e:	4b23      	ldr	r3, [pc, #140]	; (800e8dc <prvDMATxDescListInit+0x94>)
 800e850:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 800e852:	2300      	movs	r3, #0
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	e030      	b.n	800e8ba <prvDMATxDescListInit+0x72>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e85e:	601a      	str	r2, [r3, #0]

        #if ( ipconfigZERO_COPY_TX_DRIVER == 0 )
            {
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
 800e860:	683a      	ldr	r2, [r7, #0]
 800e862:	4613      	mov	r3, r2
 800e864:	005b      	lsls	r3, r3, #1
 800e866:	4413      	add	r3, r2
 800e868:	025b      	lsls	r3, r3, #9
 800e86a:	4a1d      	ldr	r2, [pc, #116]	; (800e8e0 <prvDMATxDescListInit+0x98>)
 800e86c:	4413      	add	r3, r2
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	609a      	str	r2, [r3, #8]
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 800e874:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <prvDMATxDescListInit+0x9c>)
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d106      	bne.n	800e88a <prvDMATxDescListInit+0x42>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e005      	b.n	800e896 <prvDMATxDescListInit+0x4e>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d805      	bhi.n	800e8a8 <prvDMATxDescListInit+0x60>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	3320      	adds	r3, #32
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	60da      	str	r2, [r3, #12]
 800e8a6:	e002      	b.n	800e8ae <prvDMATxDescListInit+0x66>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 800e8a8:	4a0c      	ldr	r2, [pc, #48]	; (800e8dc <prvDMATxDescListInit+0x94>)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	603b      	str	r3, [r7, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3320      	adds	r3, #32
 800e8b8:	607b      	str	r3, [r7, #4]
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d9cb      	bls.n	800e858 <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 800e8c0:	4b08      	ldr	r3, [pc, #32]	; (800e8e4 <prvDMATxDescListInit+0x9c>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	4905      	ldr	r1, [pc, #20]	; (800e8dc <prvDMATxDescListInit+0x94>)
 800e8c6:	f241 0310 	movw	r3, #4112	; 0x1010
 800e8ca:	4413      	add	r3, r2
 800e8cc:	6019      	str	r1, [r3, #0]
}
 800e8ce:	bf00      	nop
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	20000120 	.word	0x20000120
 800e8e0:	2001d0ec 	.word	0x2001d0ec
 800e8e4:	2001b2d4 	.word	0x2001b2d4

0800e8e8 <prvDMARxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMARxDescListInit()
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 800e8ee:	4b1c      	ldr	r3, [pc, #112]	; (800e960 <prvDMARxDescListInit+0x78>)
 800e8f0:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	603b      	str	r3, [r7, #0]
 800e8f6:	e023      	b.n	800e940 <prvDMARxDescListInit+0x58>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800e8fe:	605a      	str	r2, [r3, #4]
                }
            }
        #else /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */
            {
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Rx_Buff[ xIndex ] );
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	4613      	mov	r3, r2
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	4413      	add	r3, r2
 800e908:	025b      	lsls	r3, r3, #9
 800e90a:	4a16      	ldr	r2, [pc, #88]	; (800e964 <prvDMARxDescListInit+0x7c>)
 800e90c:	4413      	add	r3, r2
 800e90e:	461a      	mov	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	609a      	str	r2, [r3, #8]
                /* Set Own bit of the Rx descriptor Status */
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e91a:	601a      	str	r2, [r3, #0]
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d805      	bhi.n	800e92e <prvDMARxDescListInit+0x46>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3320      	adds	r3, #32
 800e926:	461a      	mov	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60da      	str	r2, [r3, #12]
 800e92c:	e002      	b.n	800e934 <prvDMARxDescListInit+0x4c>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 800e92e:	4a0c      	ldr	r2, [pc, #48]	; (800e960 <prvDMARxDescListInit+0x78>)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	3301      	adds	r3, #1
 800e938:	603b      	str	r3, [r7, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	3320      	adds	r3, #32
 800e93e:	607b      	str	r3, [r7, #4]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b03      	cmp	r3, #3
 800e944:	d9d8      	bls.n	800e8f8 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 800e946:	4b08      	ldr	r3, [pc, #32]	; (800e968 <prvDMARxDescListInit+0x80>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	4905      	ldr	r1, [pc, #20]	; (800e960 <prvDMARxDescListInit+0x78>)
 800e94c:	f241 030c 	movw	r3, #4108	; 0x100c
 800e950:	4413      	add	r3, r2
 800e952:	6019      	str	r1, [r3, #0]
}
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	200000a0 	.word	0x200000a0
 800e964:	2001b8ec 	.word	0x2001b8ec
 800e968:	2001b2d4 	.word	0x2001b2d4

0800e96c <xNetworkInterfaceOutput>:
}
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800e976:	2300      	movs	r3, #0
 800e978:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 800e97e:	2332      	movs	r3, #50	; 0x32
 800e980:	617b      	str	r3, [r7, #20]
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 800e982:	4b37      	ldr	r3, [pc, #220]	; (800ea60 <xNetworkInterfaceOutput+0xf4>)
 800e984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e986:	2b00      	cmp	r3, #0
 800e988:	d05e      	beq.n	800ea48 <xNetworkInterfaceOutput+0xdc>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 800e98a:	4b36      	ldr	r3, [pc, #216]	; (800ea64 <xNetworkInterfaceOutput+0xf8>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6979      	ldr	r1, [r7, #20]
 800e990:	4618      	mov	r0, r3
 800e992:	f7f5 fe79 	bl	8004688 <xQueueSemaphoreTake>
 800e996:	4603      	mov	r3, r0
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d154      	bne.n	800ea46 <xNetworkInterfaceOutput+0xda>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 800e99c:	4b32      	ldr	r3, [pc, #200]	; (800ea68 <xNetworkInterfaceOutput+0xfc>)
 800e99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a0:	613b      	str	r3, [r7, #16]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	da0b      	bge.n	800e9c2 <xNetworkInterfaceOutput+0x56>
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	b672      	cpsid	i
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	b662      	cpsie	i
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	e7fe      	b.n	800e9c0 <xNetworkInterfaceOutput+0x54>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	69db      	ldr	r3, [r3, #28]
 800e9c6:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e9ce:	d902      	bls.n	800e9d6 <xNetworkInterfaceOutput+0x6a>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 800e9d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e9d4:	61bb      	str	r3, [r7, #24]
                }

                #if ( ipconfigZERO_COPY_TX_DRIVER == 0 )
                    {
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	69ba      	ldr	r2, [r7, #24]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	f001 fcf5 	bl	80103d2 <memcpy>
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
                    }
                #else
                    {
                        pxDmaTxDesc->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CIC );
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	601a      	str	r2, [r3, #0]
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_IC;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	601a      	str	r2, [r3, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 800ea22:	4b11      	ldr	r3, [pc, #68]	; (800ea68 <xNetworkInterfaceOutput+0xfc>)
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	4b0f      	ldr	r3, [pc, #60]	; (800ea68 <xNetworkInterfaceOutput+0xfc>)
 800ea2c:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ea2e:	f3bf 8f4f 	dsb	sy
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <xNetworkInterfaceOutput+0xfc>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	f241 0304 	movw	r3, #4100	; 0x1004
 800ea3a:	4413      	add	r3, r2
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 800ea40:	2301      	movs	r3, #1
 800ea42:	61fb      	str	r3, [r7, #28]
 800ea44:	e000      	b.n	800ea48 <xNetworkInterfaceOutput+0xdc>
                break;
 800ea46:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <xNetworkInterfaceOutput+0xe8>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7ff fd70 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 800ea54:	69fb      	ldr	r3, [r7, #28]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	2001b294 	.word	0x2001b294
 800ea64:	2001b31c 	.word	0x2001b31c
 800ea68:	2001b2d4 	.word	0x2001b2d4

0800ea6c <xMayAcceptPacket>:
/*-----------------------------------------------------------*/

static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	899b      	ldrh	r3, [r3, #12]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	d006      	beq.n	800ea90 <xMayAcceptPacket+0x24>
 800ea82:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ea86:	d101      	bne.n	800ea8c <xMayAcceptPacket+0x20>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e003      	b.n	800ea94 <xMayAcceptPacket+0x28>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e001      	b.n	800ea94 <xMayAcceptPacket+0x28>
            break;
 800ea90:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 800ea92:	2301      	movs	r3, #1
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <prvPassEthMessages>:
/*-----------------------------------------------------------*/

static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	723b      	strb	r3, [r7, #8]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	60fb      	str	r3, [r7, #12]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 800eab0:	f107 0308 	add.w	r3, r7, #8
 800eab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7f9 faa5 	bl	8008008 <xSendEventStructToIPTask>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d002      	beq.n	800eaca <prvPassEthMessages+0x2a>
                    pxDescriptor = pxNext;
                } while( pxDescriptor != NULL );
            }
        #else
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fd35 	bl	800e534 <vReleaseNetworkBufferAndDescriptor>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
	...

0800ead4 <prvNetworkInterfaceInput>:

static BaseType_t prvNetworkInterfaceInput( void )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
    #endif
    BaseType_t xReceivedLength = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 800eae2:	23fa      	movs	r3, #250	; 0xfa
 800eae4:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 800eae6:	4b44      	ldr	r3, [pc, #272]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800eae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaea:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 800eaec:	e075      	b.n	800ebda <prvNetworkInterfaceInput+0x106>
    {
        BaseType_t xAccepted = pdTRUE;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	0c1b      	lsrs	r3, r3, #16
 800eaf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eafc:	3b04      	subs	r3, #4
 800eafe:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	4b3a      	ldr	r3, [pc, #232]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800eb0e:	629a      	str	r2, [r3, #40]	; 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eb16:	d90b      	bls.n	800eb30 <prvNetworkInterfaceInput+0x5c>
 800eb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1c:	b672      	cpsid	i
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	b662      	cpsie	i
 800eb2c:	603b      	str	r3, [r7, #0]
 800eb2e:	e7fe      	b.n	800eb2e <prvNetworkInterfaceInput+0x5a>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f003 03a2 	and.w	r3, r3, #162	; 0xa2
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	d002      	beq.n	800eb42 <prvNetworkInterfaceInput+0x6e>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	613b      	str	r3, [r7, #16]
 800eb40:	e003      	b.n	800eb4a <prvNetworkInterfaceInput+0x76>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 800eb42:	68b8      	ldr	r0, [r7, #8]
 800eb44:	f7ff ff92 	bl	800ea6c <xMayAcceptPacket>
 800eb48:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00a      	beq.n	800eb66 <prvNetworkInterfaceInput+0x92>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 800eb50:	68f9      	ldr	r1, [r7, #12]
 800eb52:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800eb56:	f7ff fc6f 	bl	800e438 <pxGetNetworkBufferWithDescriptor>
 800eb5a:	61f8      	str	r0, [r7, #28]

            if( pxNewDescriptor == NULL )
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d101      	bne.n	800eb66 <prvNetworkInterfaceInput+0x92>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 800eb62:	2300      	movs	r3, #0
 800eb64:	613b      	str	r3, [r7, #16]
                configASSERT( pxCurDescriptor != NULL );
            }
        #else
            {
                /* In this mode, the two descriptors are the same. */
                pxCurDescriptor = pxNewDescriptor;
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	607b      	str	r3, [r7, #4]

                if( pxNewDescriptor != NULL )
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <prvNetworkInterfaceInput+0xaa>
                {
                    /* The packet is accepted and a new Network Buffer was created,
                     * copy data to the Network Buffer. */
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	68b9      	ldr	r1, [r7, #8]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f001 fc2a 	bl	80103d2 <memcpy>
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d005      	beq.n	800eb90 <prvNetworkInterfaceInput+0xbc>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 800eb84:	69ba      	ldr	r2, [r7, #24]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	61da      	str	r2, [r3, #28]

                    pxLastDescriptor = pxCurDescriptor;
                }
            #else /* if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 ) */
                {
                    prvPassEthMessages( pxCurDescriptor );
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7ff ff88 	bl	800eaa0 <prvPassEthMessages>
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800eb96:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb9e:	601a      	str	r2, [r3, #0]
 800eba0:	f3bf 8f4f 	dsb	sy
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 800eba4:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	f241 0314 	movw	r3, #4116	; 0x1014
 800ebac:	4413      	add	r3, r2
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00d      	beq.n	800ebd4 <prvNetworkInterfaceInput+0x100>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 800ebb8:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	f241 0314 	movw	r3, #4116	; 0x1014
 800ebc0:	4413      	add	r3, r2
 800ebc2:	2280      	movs	r2, #128	; 0x80
 800ebc4:	601a      	str	r2, [r3, #0]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 800ebc6:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	f241 0308 	movw	r3, #4104	; 0x1008
 800ebce:	4413      	add	r3, r2
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	601a      	str	r2, [r3, #0]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 800ebd4:	4b08      	ldr	r3, [pc, #32]	; (800ebf8 <prvNetworkInterfaceInput+0x124>)
 800ebd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd8:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	da85      	bge.n	800eaee <prvNetworkInterfaceInput+0x1a>
                prvPassEthMessages( pxFirstDescriptor );
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bfcc      	ite	gt
 800ebe8:	2301      	movgt	r3, #1
 800ebea:	2300      	movle	r3, #0
 800ebec:	b2db      	uxtb	r3, r3
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3720      	adds	r7, #32
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	2001b2d4 	.word	0x2001b2d4

0800ebfc <xSTM32_PhyRead>:


BaseType_t xSTM32_PhyRead( BaseType_t xAddress,
                           BaseType_t xRegister,
                           uint32_t * pulValue )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 800ec08:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <xSTM32_PhyRead+0x50>)
 800ec0a:	8a1b      	ldrh	r3, [r3, #16]
 800ec0c:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	4b0e      	ldr	r3, [pc, #56]	; (800ec4c <xSTM32_PhyRead+0x50>)
 800ec14:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_ReadPHYRegister( &xETH, ( uint16_t ) xRegister, pulValue );
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	480b      	ldr	r0, [pc, #44]	; (800ec4c <xSTM32_PhyRead+0x50>)
 800ec20:	f000 fe8e 	bl	800f940 <HAL_ETH_ReadPHYRegister>
 800ec24:	4603      	mov	r3, r0
 800ec26:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 800ec28:	4a08      	ldr	r2, [pc, #32]	; (800ec4c <xSTM32_PhyRead+0x50>)
 800ec2a:	8a7b      	ldrh	r3, [r7, #18]
 800ec2c:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 800ec2e:	7c7b      	ldrb	r3, [r7, #17]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d102      	bne.n	800ec3a <xSTM32_PhyRead+0x3e>
    {
        xResult = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]
 800ec38:	e002      	b.n	800ec40 <xSTM32_PhyRead+0x44>
    }
    else
    {
        xResult = -1;
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 800ec40:	697b      	ldr	r3, [r7, #20]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2001b2d4 	.word	0x2001b2d4

0800ec50 <xSTM32_PhyWrite>:
/*-----------------------------------------------------------*/

BaseType_t xSTM32_PhyWrite( BaseType_t xAddress,
                            BaseType_t xRegister,
                            uint32_t ulValue )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 800ec5c:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <xSTM32_PhyWrite+0x50>)
 800ec5e:	8a1b      	ldrh	r3, [r3, #16]
 800ec60:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	4b0e      	ldr	r3, [pc, #56]	; (800eca0 <xSTM32_PhyWrite+0x50>)
 800ec68:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_WritePHYRegister( &xETH, ( uint16_t ) xRegister, ulValue );
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	4619      	mov	r1, r3
 800ec72:	480b      	ldr	r0, [pc, #44]	; (800eca0 <xSTM32_PhyWrite+0x50>)
 800ec74:	f000 fed4 	bl	800fa20 <HAL_ETH_WritePHYRegister>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 800ec7c:	4a08      	ldr	r2, [pc, #32]	; (800eca0 <xSTM32_PhyWrite+0x50>)
 800ec7e:	8a7b      	ldrh	r3, [r7, #18]
 800ec80:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 800ec82:	7c7b      	ldrb	r3, [r7, #17]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d102      	bne.n	800ec8e <xSTM32_PhyWrite+0x3e>
    {
        xResult = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	e002      	b.n	800ec94 <xSTM32_PhyWrite+0x44>
    }
    else
    {
        xResult = -1;
 800ec8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec92:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 800ec94:	697b      	ldr	r3, [r7, #20]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	2001b2d4 	.word	0x2001b2d4

0800eca4 <vMACBProbePhy>:
/*-----------------------------------------------------------*/

void vMACBProbePhy( void )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	af00      	add	r7, sp, #0
    vPhyInitialise( &xPhyObject, xSTM32_PhyRead, xSTM32_PhyWrite );
 800eca8:	4a06      	ldr	r2, [pc, #24]	; (800ecc4 <vMACBProbePhy+0x20>)
 800ecaa:	4907      	ldr	r1, [pc, #28]	; (800ecc8 <vMACBProbePhy+0x24>)
 800ecac:	4807      	ldr	r0, [pc, #28]	; (800eccc <vMACBProbePhy+0x28>)
 800ecae:	f000 f92b 	bl	800ef08 <vPhyInitialise>
    xPhyDiscover( &xPhyObject );
 800ecb2:	4806      	ldr	r0, [pc, #24]	; (800eccc <vMACBProbePhy+0x28>)
 800ecb4:	f000 f93d 	bl	800ef32 <xPhyDiscover>
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 800ecb8:	4905      	ldr	r1, [pc, #20]	; (800ecd0 <vMACBProbePhy+0x2c>)
 800ecba:	4804      	ldr	r0, [pc, #16]	; (800eccc <vMACBProbePhy+0x28>)
 800ecbc:	f000 fa1e 	bl	800f0fc <xPhyConfigure>
}
 800ecc0:	bf00      	nop
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	0800ec51 	.word	0x0800ec51
 800ecc8:	0800ebfd 	.word	0x0800ebfd
 800eccc:	2001b294 	.word	0x2001b294
 800ecd0:	08010e2c 	.word	0x08010e2c

0800ecd4 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d103      	bne.n	800ecea <prvEthernetUpdateConfig+0x16>
 800ece2:	4b32      	ldr	r3, [pc, #200]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ece4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d059      	beq.n	800ed9e <prvEthernetUpdateConfig+0xca>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 800ecea:	4b31      	ldr	r3, [pc, #196]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d024      	beq.n	800ed3c <prvEthernetUpdateConfig+0x68>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 800ecf2:	4b2e      	ldr	r3, [pc, #184]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ecf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	4619      	mov	r1, r3
 800ed00:	482a      	ldr	r0, [pc, #168]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed02:	f000 fb33 	bl	800f36c <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800ed06:	4b29      	ldr	r3, [pc, #164]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d104      	bne.n	800ed1a <prvEthernetUpdateConfig+0x46>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ed10:	4b27      	ldr	r3, [pc, #156]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed16:	60da      	str	r2, [r3, #12]
 800ed18:	e002      	b.n	800ed20 <prvEthernetUpdateConfig+0x4c>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800ed1a:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 800ed20:	4b22      	ldr	r3, [pc, #136]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d103      	bne.n	800ed32 <prvEthernetUpdateConfig+0x5e>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 800ed2a:	4b21      	ldr	r3, [pc, #132]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	609a      	str	r2, [r3, #8]
 800ed30:	e02d      	b.n	800ed8e <prvEthernetUpdateConfig+0xba>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 800ed32:	4b1f      	ldr	r3, [pc, #124]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ed38:	609a      	str	r2, [r3, #8]
 800ed3a:	e028      	b.n	800ed8e <prvEthernetUpdateConfig+0xba>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 800ed3c:	4b1c      	ldr	r3, [pc, #112]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed44:	d104      	bne.n	800ed50 <prvEthernetUpdateConfig+0x7c>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 800ed46:	4b19      	ldr	r3, [pc, #100]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ed4e:	e003      	b.n	800ed58 <prvEthernetUpdateConfig+0x84>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 800ed50:	4b16      	ldr	r3, [pc, #88]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed52:	2202      	movs	r2, #2
 800ed54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 800ed58:	4b15      	ldr	r3, [pc, #84]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d104      	bne.n	800ed6a <prvEthernetUpdateConfig+0x96>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 800ed60:	4b12      	ldr	r3, [pc, #72]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800ed68:	e003      	b.n	800ed72 <prvEthernetUpdateConfig+0x9e>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 800ed6a:	4b10      	ldr	r3, [pc, #64]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 800ed72:	4b0e      	ldr	r3, [pc, #56]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed74:	2203      	movs	r2, #3
 800ed76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7e:	2201      	movs	r2, #1
 800ed80:	fa02 f303 	lsl.w	r3, r2, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	4619      	mov	r1, r3
 800ed88:	4808      	ldr	r0, [pc, #32]	; (800edac <prvEthernetUpdateConfig+0xd8>)
 800ed8a:	f000 faaf 	bl	800f2ec <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 800ed8e:	2100      	movs	r1, #0
 800ed90:	4807      	ldr	r0, [pc, #28]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed92:	f000 ff87 	bl	800fca4 <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 800ed96:	4806      	ldr	r0, [pc, #24]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800ed98:	f000 feb2 	bl	800fb00 <HAL_ETH_Start>
 800ed9c:	e002      	b.n	800eda4 <prvEthernetUpdateConfig+0xd0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 800ed9e:	4804      	ldr	r0, [pc, #16]	; (800edb0 <prvEthernetUpdateConfig+0xdc>)
 800eda0:	f000 fedd 	bl	800fb5e <HAL_ETH_Stop>
    }
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	2001b294 	.word	0x2001b294
 800edb0:	2001b2d4 	.word	0x2001b2d4

0800edb4 <prvEMACHandlerTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxLastMinBufferCount = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	617b      	str	r3, [r7, #20]
    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        UBaseType_t uxLastMinQueueSpace = 0;
    #endif
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 800edc0:	2364      	movs	r3, #100	; 0x64
 800edc2:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	613b      	str	r3, [r7, #16]
        uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 800edc8:	f7ff fbf4 	bl	800e5b4 <uxGetMinimumFreeNetworkBuffers>
 800edcc:	60b8      	str	r0, [r7, #8]

        if( uxLastMinBufferCount != uxCurrentCount )
 800edce:	697a      	ldr	r2, [r7, #20]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d001      	beq.n	800edda <prvEMACHandlerTask+0x26>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentCount;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	617b      	str	r3, [r7, #20]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
                               uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
        }

        if( xTXDescriptorSemaphore != NULL )
 800edda:	4b28      	ldr	r3, [pc, #160]	; (800ee7c <prvEMACHandlerTask+0xc8>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00d      	beq.n	800edfe <prvEMACHandlerTask+0x4a>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800ede2:	4b26      	ldr	r3, [pc, #152]	; (800ee7c <prvEMACHandlerTask+0xc8>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f5 fd5e 	bl	80048a8 <uxQueueMessagesWaiting>
 800edec:	60b8      	str	r0, [r7, #8]

            if( uxLowestSemCount > uxCurrentCount )
 800edee:	4b24      	ldr	r3, [pc, #144]	; (800ee80 <prvEMACHandlerTask+0xcc>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d202      	bcs.n	800edfe <prvEMACHandlerTask+0x4a>
            {
                uxLowestSemCount = uxCurrentCount;
 800edf8:	4a21      	ldr	r2, [pc, #132]	; (800ee80 <prvEMACHandlerTask+0xcc>)
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	6013      	str	r3, [r2, #0]
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 800edfe:	4b21      	ldr	r3, [pc, #132]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f003 0307 	and.w	r3, r3, #7
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <prvEMACHandlerTask+0x5e>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f7f6 ffb7 	bl	8005d80 <ulTaskNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 800ee12:	4b1c      	ldr	r3, [pc, #112]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 0301 	and.w	r3, r3, #1
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d008      	beq.n	800ee30 <prvEMACHandlerTask+0x7c>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 800ee1e:	4b19      	ldr	r3, [pc, #100]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f023 0301 	bic.w	r3, r3, #1
 800ee26:	4a17      	ldr	r2, [pc, #92]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee28:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 800ee2a:	f7ff fe53 	bl	800ead4 <prvNetworkInterfaceInput>
 800ee2e:	6138      	str	r0, [r7, #16]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 800ee30:	4b14      	ldr	r3, [pc, #80]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d007      	beq.n	800ee4c <prvEMACHandlerTask+0x98>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 800ee3c:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f023 0302 	bic.w	r3, r3, #2
 800ee44:	4a0f      	ldr	r2, [pc, #60]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee46:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 800ee48:	f7ff fc1c 	bl	800e684 <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 800ee4c:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <prvEMACHandlerTask+0xb0>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 800ee58:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f023 0304 	bic.w	r3, r3, #4
 800ee60:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <prvEMACHandlerTask+0xd0>)
 800ee62:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 800ee64:	6939      	ldr	r1, [r7, #16]
 800ee66:	4808      	ldr	r0, [pc, #32]	; (800ee88 <prvEMACHandlerTask+0xd4>)
 800ee68:	f000 fbe4 	bl	800f634 <xPhyCheckLinkStatus>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d0a8      	beq.n	800edc4 <prvEMACHandlerTask+0x10>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 800ee72:	2000      	movs	r0, #0
 800ee74:	f7ff ff2e 	bl	800ecd4 <prvEthernetUpdateConfig>
        xResult = 0;
 800ee78:	e7a4      	b.n	800edc4 <prvEMACHandlerTask+0x10>
 800ee7a:	bf00      	nop
 800ee7c:	2001b31c 	.word	0x2001b31c
 800ee80:	20000028 	.word	0x20000028
 800ee84:	2001b290 	.word	0x2001b290
 800ee88:	2001b294 	.word	0x2001b294

0800ee8c <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 800ee90:	4802      	ldr	r0, [pc, #8]	; (800ee9c <ETH_IRQHandler+0x10>)
 800ee92:	f000 fd19 	bl	800f8c8 <HAL_ETH_IRQHandler>
}
 800ee96:	bf00      	nop
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	2001b2d4 	.word	0x2001b2d4

0800eea0 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a08      	ldr	r2, [pc, #32]	; (800eecc <xHas_1F_PHYSPCS+0x2c>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d002      	beq.n	800eeb6 <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	60fb      	str	r3, [r7, #12]
            break;
 800eeb4:	e002      	b.n	800eebc <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60fb      	str	r3, [r7, #12]
            break;
 800eeba:	bf00      	nop
    }

    return xResult;
 800eebc:	68fb      	ldr	r3, [r7, #12]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20005c90 	.word	0x20005c90

0800eed0 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a09      	ldr	r2, [pc, #36]	; (800ef00 <xHas_19_PHYCR+0x30>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d002      	beq.n	800eee6 <xHas_19_PHYCR+0x16>
 800eee0:	4a08      	ldr	r2, [pc, #32]	; (800ef04 <xHas_19_PHYCR+0x34>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d102      	bne.n	800eeec <xHas_19_PHYCR+0x1c>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	60fb      	str	r3, [r7, #12]
            break;
 800eeea:	e002      	b.n	800eef2 <xHas_19_PHYCR+0x22>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
            break;
 800eef0:	bf00      	nop
    }

    return xResult;
 800eef2:	68fb      	ldr	r3, [r7, #12]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	0007c130 	.word	0x0007c130
 800ef04:	20005c90 	.word	0x20005c90

0800ef08 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 800ef14:	2240      	movs	r2, #64	; 0x40
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f001 fa7e 	bl	801041a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	605a      	str	r2, [r3, #4]
}
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b086      	sub	sp, #24
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	629a      	str	r2, [r3, #40]	; 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 800ef40:	2300      	movs	r3, #0
 800ef42:	617b      	str	r3, [r7, #20]
 800ef44:	e038      	b.n	800efb8 <xPhyDiscover+0x86>
    {
        uint32_t ulLowerID;

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f107 020c 	add.w	r2, r7, #12
 800ef4e:	2103      	movs	r1, #3
 800ef50:	6978      	ldr	r0, [r7, #20]
 800ef52:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d029      	beq.n	800efb2 <xPhyDiscover+0x80>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d026      	beq.n	800efb2 <xPhyDiscover+0x80>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f107 0208 	add.w	r2, r7, #8
 800ef6c:	2102      	movs	r1, #2
 800ef6e:	6978      	ldr	r0, [r7, #20]
 800ef70:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	041a      	lsls	r2, r3, #16
 800ef76:	68f9      	ldr	r1, [r7, #12]
 800ef78:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800ef7c:	400b      	ands	r3, r1
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	b2d1      	uxtb	r1, r2
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	460a      	mov	r2, r1
 800ef90:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3202      	adds	r2, #2
 800ef9a:	6939      	ldr	r1, [r7, #16]
 800ef9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa4:	1c5a      	adds	r2, r3, #1
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	629a      	str	r2, [r3, #40]	; 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efae:	2b04      	cmp	r3, #4
 800efb0:	d005      	beq.n	800efbe <xPhyDiscover+0x8c>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	3301      	adds	r3, #1
 800efb6:	617b      	str	r3, [r7, #20]
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b1f      	cmp	r3, #31
 800efbc:	ddc3      	ble.n	800ef46 <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3718      	adds	r7, #24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b08c      	sub	sp, #48	; 0x30
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
 800efd2:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 800efd4:	2300      	movs	r3, #0
 800efd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800efd8:	2300      	movs	r3, #0
 800efda:	62bb      	str	r3, [r7, #40]	; 0x28
 800efdc:	e017      	b.n	800f00e <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	4413      	add	r3, r2
 800efe4:	3318      	adds	r3, #24
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f107 0218 	add.w	r2, r7, #24
 800eff2:	2100      	movs	r1, #0
 800eff4:	69f8      	ldr	r0, [r7, #28]
 800eff6:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	69ba      	ldr	r2, [r7, #24]
 800effe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f002:	2100      	movs	r1, #0
 800f004:	69f8      	ldr	r0, [r7, #28]
 800f006:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	3301      	adds	r3, #1
 800f00c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f014:	429a      	cmp	r2, r3
 800f016:	dbe2      	blt.n	800efde <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 800f018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f01c:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 800f01e:	f107 030c 	add.w	r3, r7, #12
 800f022:	4618      	mov	r0, r3
 800f024:	f7f6 fb2c 	bl	8005680 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f028:	2300      	movs	r3, #0
 800f02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f02c:	e01b      	b.n	800f066 <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f032:	4413      	add	r3, r2
 800f034:	3318      	adds	r3, #24
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f107 0218 	add.w	r2, r7, #24
 800f042:	2100      	movs	r1, #0
 800f044:	6a38      	ldr	r0, [r7, #32]
 800f046:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d106      	bne.n	800f060 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1UL << xPhyIndex );
 800f052:	2201      	movs	r2, #1
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	fa02 f303 	lsl.w	r3, r2, r3
 800f05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f05c:	4313      	orrs	r3, r2
 800f05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f062:	3301      	adds	r3, #1
 800f064:	62bb      	str	r3, [r7, #40]	; 0x28
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f06c:	429a      	cmp	r2, r3
 800f06e:	dbde      	blt.n	800f02e <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 800f070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	d00e      	beq.n	800f096 <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 800f078:	f107 0214 	add.w	r2, r7, #20
 800f07c:	f107 030c 	add.w	r3, r7, #12
 800f080:	4611      	mov	r1, r2
 800f082:	4618      	mov	r0, r3
 800f084:	f7f6 fb3a 	bl	80056fc <xTaskCheckForTimeOut>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d105      	bne.n	800f09a <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f08e:	2032      	movs	r0, #50	; 0x32
 800f090:	f7f5 ff60 	bl	8004f54 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f094:	e7c8      	b.n	800f028 <xPhyReset+0x5e>
            break;
 800f096:	bf00      	nop
 800f098:	e000      	b.n	800f09c <xPhyReset+0xd2>
            break;
 800f09a:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f09c:	2300      	movs	r3, #0
 800f09e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0a0:	e01f      	b.n	800f0e2 <xPhyReset+0x118>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 800f0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d114      	bne.n	800f0dc <xPhyReset+0x112>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	4413      	add	r3, r2
 800f0b8:	3318      	adds	r3, #24
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	627b      	str	r3, [r7, #36]	; 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f107 0218 	add.w	r2, r7, #24
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0ca:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	69ba      	ldr	r2, [r7, #24]
 800f0d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0da:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	3301      	adds	r3, #1
 800f0e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	dbda      	blt.n	800f0a2 <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f0ec:	2032      	movs	r0, #50	; 0x32
 800f0ee:	f7f5 ff31 	bl	8004f54 <vTaskDelay>

    return ulDoneMask;
 800f0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3730      	adds	r7, #48	; 0x30
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	dc02      	bgt.n	800f114 <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 800f10e:	f04f 33ff 	mov.w	r3, #4294967295
 800f112:	e0e7      	b.n	800f2e4 <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d107      	bne.n	800f12c <xPhyConfigure+0x30>
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	789b      	ldrb	r3, [r3, #2]
 800f120:	2b03      	cmp	r3, #3
 800f122:	d103      	bne.n	800f12c <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 800f124:	f240 13e1 	movw	r3, #481	; 0x1e1
 800f128:	61fb      	str	r3, [r7, #28]
 800f12a:	e044      	b.n	800f1b6 <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 800f12c:	2301      	movs	r3, #1
 800f12e:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b03      	cmp	r3, #3
 800f136:	d10d      	bne.n	800f154 <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	789b      	ldrb	r3, [r3, #2]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d104      	bne.n	800f14a <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800f146:	61fb      	str	r3, [r7, #28]
 800f148:	e035      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	e030      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	789b      	ldrb	r3, [r3, #2]
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d10d      	bne.n	800f178 <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d104      	bne.n	800f16e <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f16a:	61fb      	str	r3, [r7, #28]
 800f16c:	e023      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f174:	61fb      	str	r3, [r7, #28]
 800f176:	e01e      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d10d      	bne.n	800f19c <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	789b      	ldrb	r3, [r3, #2]
 800f184:	2b02      	cmp	r3, #2
 800f186:	d104      	bne.n	800f192 <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f18e:	61fb      	str	r3, [r7, #28]
 800f190:	e011      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f198:	61fb      	str	r3, [r7, #28]
 800f19a:	e00c      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	789b      	ldrb	r3, [r3, #2]
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d104      	bne.n	800f1ae <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1aa:	61fb      	str	r3, [r7, #28]
 800f1ac:	e003      	b.n	800f1b6 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	f043 0320 	orr.w	r3, r3, #32
 800f1b4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff ff00 	bl	800efca <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	e07a      	b.n	800f2c6 <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	3318      	adds	r3, #24
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	3202      	adds	r2, #2
 800f1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e6:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	69fa      	ldr	r2, [r7, #28]
 800f1ee:	2104      	movs	r1, #4
 800f1f0:	6978      	ldr	r0, [r7, #20]
 800f1f2:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f107 020c 	add.w	r2, r7, #12
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	6978      	ldr	r0, [r7, #20]
 800f200:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 800f208:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f210:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d003      	beq.n	800f222 <xPhyConfigure+0x126>
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b03      	cmp	r3, #3
 800f220:	d104      	bne.n	800f22c <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f228:	60fb      	str	r3, [r7, #12]
 800f22a:	e007      	b.n	800f23c <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d103      	bne.n	800f23c <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f23a:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	789b      	ldrb	r3, [r3, #2]
 800f240:	2b02      	cmp	r3, #2
 800f242:	d003      	beq.n	800f24c <xPhyConfigure+0x150>
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	789b      	ldrb	r3, [r3, #2]
 800f248:	2b03      	cmp	r3, #3
 800f24a:	d104      	bne.n	800f256 <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f252:	60fb      	str	r3, [r7, #12]
 800f254:	e007      	b.n	800f266 <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	789b      	ldrb	r3, [r3, #2]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d103      	bne.n	800f266 <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f264:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 800f266:	6938      	ldr	r0, [r7, #16]
 800f268:	f7ff fe32 	bl	800eed0 <xHas_19_PHYCR>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d026      	beq.n	800f2c0 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f107 0208 	add.w	r2, r7, #8
 800f27a:	2119      	movs	r1, #25
 800f27c:	6978      	ldr	r0, [r7, #20]
 800f27e:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f286:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	785b      	ldrb	r3, [r3, #1]
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d104      	bne.n	800f29a <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f296:	60bb      	str	r3, [r7, #8]
 800f298:	e00c      	b.n	800f2b4 <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	785b      	ldrb	r3, [r3, #1]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d104      	bne.n	800f2ac <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2a8:	60bb      	str	r3, [r7, #8]
 800f2aa:	e003      	b.n	800f2b4 <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f2b2:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	2119      	movs	r1, #25
 800f2bc:	6978      	ldr	r0, [r7, #20]
 800f2be:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	61bb      	str	r3, [r7, #24]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ca:	69ba      	ldr	r2, [r7, #24]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	f6ff af7f 	blt.w	800f1d0 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	62da      	str	r2, [r3, #44]	; 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	69fa      	ldr	r2, [r7, #28]
 800f2e0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800f2e2:	2300      	movs	r3, #0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3720      	adds	r7, #32
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f304:	2b02      	cmp	r3, #2
 800f306:	d103      	bne.n	800f310 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f30e:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f316:	2b02      	cmp	r3, #2
 800f318:	d103      	bne.n	800f322 <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f320:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f322:	2300      	movs	r3, #0
 800f324:	617b      	str	r3, [r7, #20]
 800f326:	e016      	b.n	800f356 <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 800f328:	683a      	ldr	r2, [r7, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	4013      	ands	r3, r2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	4413      	add	r3, r2
 800f338:	3318      	adds	r3, #24
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	693a      	ldr	r2, [r7, #16]
 800f344:	2100      	movs	r1, #0
 800f346:	68b8      	ldr	r0, [r7, #8]
 800f348:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	3301      	adds	r3, #1
 800f34e:	617b      	str	r3, [r7, #20]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	005b      	lsls	r3, r3, #1
 800f354:	60fb      	str	r3, [r7, #12]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	dbe3      	blt.n	800f328 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3718      	adds	r7, #24
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
	...

0800f36c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b090      	sub	sp, #64	; 0x40
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	e153      	b.n	800f628 <xPhyStartAutoNegotiation+0x2bc>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f380:	2300      	movs	r3, #0
 800f382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f384:	e020      	b.n	800f3c8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	fa22 f303 	lsr.w	r3, r2, r3
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	d015      	beq.n	800f3c2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39a:	4413      	add	r3, r2
 800f39c:	3318      	adds	r3, #24
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f3aa:	2104      	movs	r1, #4
 800f3ac:	6a38      	ldr	r0, [r7, #32]
 800f3ae:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6a38      	ldr	r0, [r7, #32]
 800f3c0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d3d8      	bcc.n	800f386 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 800f3d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f3d8:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 800f3da:	f107 0310 	add.w	r3, r7, #16
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f6 f94e 	bl	8005680 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3f0:	e025      	b.n	800f43e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d01a      	beq.n	800f432 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 800f3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f400:	4013      	ands	r3, r2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d115      	bne.n	800f432 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f40a:	4413      	add	r3, r2
 800f40c:	3318      	adds	r3, #24
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f107 021c 	add.w	r2, r7, #28
 800f41a:	2101      	movs	r1, #1
 800f41c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f41e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	f003 0320 	and.w	r3, r3, #32
 800f426:	2b00      	cmp	r3, #0
 800f428:	d003      	beq.n	800f432 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 800f42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42e:	4313      	orrs	r3, r2
 800f430:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f434:	3301      	adds	r3, #1
 800f436:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	637b      	str	r3, [r7, #52]	; 0x34
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f442:	461a      	mov	r2, r3
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	4293      	cmp	r3, r2
 800f448:	d3d3      	bcc.n	800f3f2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	429a      	cmp	r2, r3
 800f450:	d00e      	beq.n	800f470 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 800f452:	f107 0218 	add.w	r2, r7, #24
 800f456:	f107 0310 	add.w	r3, r7, #16
 800f45a:	4611      	mov	r1, r2
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f6 f94d 	bl	80056fc <xTaskCheckForTimeOut>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d105      	bne.n	800f474 <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800f468:	2032      	movs	r0, #50	; 0x32
 800f46a:	f7f5 fd73 	bl	8004f54 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 800f46e:	e7bb      	b.n	800f3e8 <xPhyStartAutoNegotiation+0x7c>
            break;
 800f470:	bf00      	nop
 800f472:	e000      	b.n	800f476 <xPhyStartAutoNegotiation+0x10a>
            break;
 800f474:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 80d4 	beq.w	800f626 <xPhyStartAutoNegotiation+0x2ba>
    {
        ulBitMask = ( uint32_t ) 1U;
 800f47e:	2301      	movs	r3, #1
 800f480:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	43db      	mvns	r3, r3
 800f48a:	401a      	ands	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f490:	2300      	movs	r3, #0
 800f492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f494:	e0c0      	b.n	800f618 <xPhyStartAutoNegotiation+0x2ac>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49a:	4413      	add	r3, r2
 800f49c:	3318      	adds	r3, #24
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f4a6:	3202      	adds	r2, #2
 800f4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ac:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 800f4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f000 80a8 	beq.w	800f60a <xPhyStartAutoNegotiation+0x29e>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4c6:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f107 021c 	add.w	r2, r7, #28
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4d4:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	f003 0304 	and.w	r3, r3, #4
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00a      	beq.n	800f4f6 <xPhyStartAutoNegotiation+0x18a>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e2:	f043 0304 	orr.w	r3, r3, #4
 800f4e6:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	635a      	str	r2, [r3, #52]	; 0x34
 800f4f4:	e003      	b.n	800f4fe <xPhyStartAutoNegotiation+0x192>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f8:	f023 0304 	bic.w	r3, r3, #4
 800f4fc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	4a4b      	ldr	r2, [pc, #300]	; (800f630 <xPhyStartAutoNegotiation+0x2c4>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d13b      	bne.n	800f57e <xPhyStartAutoNegotiation+0x212>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f107 020c 	add.w	r2, r7, #12
 800f50e:	211e      	movs	r1, #30
 800f510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f512:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b05      	cmp	r3, #5
 800f51e:	d814      	bhi.n	800f54a <xPhyStartAutoNegotiation+0x1de>
 800f520:	a201      	add	r2, pc, #4	; (adr r2, 800f528 <xPhyStartAutoNegotiation+0x1bc>)
 800f522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f526:	bf00      	nop
 800f528:	0800f541 	.word	0x0800f541
 800f52c:	0800f54b 	.word	0x0800f54b
 800f530:	0800f54b 	.word	0x0800f54b
 800f534:	0800f54b 	.word	0x0800f54b
 800f538:	0800f541 	.word	0x0800f541
 800f53c:	0800f54b 	.word	0x0800f54b
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	f043 0302 	orr.w	r3, r3, #2
 800f546:	61fb      	str	r3, [r7, #28]
                        break;
 800f548:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f003 0307 	and.w	r3, r3, #7
 800f550:	3b01      	subs	r3, #1
 800f552:	2b05      	cmp	r3, #5
 800f554:	d83c      	bhi.n	800f5d0 <xPhyStartAutoNegotiation+0x264>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <xPhyStartAutoNegotiation+0x1f0>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f5d1 	.word	0x0800f5d1
 800f560:	0800f5d1 	.word	0x0800f5d1
 800f564:	0800f5d1 	.word	0x0800f5d1
 800f568:	0800f5d1 	.word	0x0800f5d1
 800f56c:	0800f575 	.word	0x0800f575
 800f570:	0800f575 	.word	0x0800f575
                    case 0x05:
                    case 0x06:
/*	[101] = 10BASE-T full-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        /* Full duplex. */
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	f043 0304 	orr.w	r3, r3, #4
 800f57a:	61fb      	str	r3, [r7, #28]
                        break;
 800f57c:	e028      	b.n	800f5d0 <xPhyStartAutoNegotiation+0x264>
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 800f57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f580:	f7ff fc8e 	bl	800eea0 <xHas_1F_PHYSPCS>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d01b      	beq.n	800f5c2 <xPhyStartAutoNegotiation+0x256>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f107 0208 	add.w	r2, r7, #8
 800f592:	211f      	movs	r1, #31
 800f594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f596:	4798      	blx	r3
                ulRegValue = 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f003 0310 	and.w	r3, r3, #16
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d003      	beq.n	800f5ae <xPhyStartAutoNegotiation+0x242>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	f043 0304 	orr.w	r3, r3, #4
 800f5ac:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	f003 030c 	and.w	r3, r3, #12
 800f5b4:	2b04      	cmp	r3, #4
 800f5b6:	d10b      	bne.n	800f5d0 <xPhyStartAutoNegotiation+0x264>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	f043 0302 	orr.w	r3, r3, #2
 800f5be:	61fb      	str	r3, [r7, #28]
 800f5c0:	e006      	b.n	800f5d0 <xPhyStartAutoNegotiation+0x264>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f107 021c 	add.w	r2, r7, #28
 800f5ca:	2110      	movs	r1, #16
 800f5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5ce:	4798      	blx	r3
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	f003 0304 	and.w	r3, r3, #4
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d004      	beq.n	800f5e4 <xPhyStartAutoNegotiation+0x278>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2202      	movs	r2, #2
 800f5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5e2:	e003      	b.n	800f5ec <xPhyStartAutoNegotiation+0x280>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	f003 0302 	and.w	r3, r3, #2
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d004      	beq.n	800f600 <xPhyStartAutoNegotiation+0x294>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f5fe:	e005      	b.n	800f60c <xPhyStartAutoNegotiation+0x2a0>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2202      	movs	r2, #2
 800f604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f608:	e000      	b.n	800f60c <xPhyStartAutoNegotiation+0x2a0>
                continue;
 800f60a:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60e:	3301      	adds	r3, #1
 800f610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f614:	005b      	lsls	r3, r3, #1
 800f616:	637b      	str	r3, [r7, #52]	; 0x34
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f61c:	461a      	mov	r2, r3
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	4293      	cmp	r3, r2
 800f622:	f4ff af38 	bcc.w	800f496 <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3740      	adds	r7, #64	; 0x40
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	00221560 	.word	0x00221560

0800f634 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 800f63e:	2301      	movs	r3, #1
 800f640:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 800f642:	2300      	movs	r3, #0
 800f644:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dd25      	ble.n	800f698 <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	331c      	adds	r3, #28
 800f650:	4618      	mov	r0, r3
 800f652:	f7f6 f815 	bl	8005680 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f643 2298 	movw	r2, #15000	; 0x3a98
 800f65c:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f65e:	2300      	movs	r3, #0
 800f660:	61bb      	str	r3, [r7, #24]
 800f662:	e013      	b.n	800f68c <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4013      	ands	r3, r2
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d107      	bne.n	800f680 <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	431a      	orrs	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 800f67c:	2301      	movs	r3, #1
 800f67e:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	3301      	adds	r3, #1
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	61fb      	str	r3, [r7, #28]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f690:	69ba      	ldr	r2, [r7, #24]
 800f692:	429a      	cmp	r2, r3
 800f694:	dbe6      	blt.n	800f664 <xPhyCheckLinkStatus+0x30>
 800f696:	e068      	b.n	800f76a <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f103 021c 	add.w	r2, r3, #28
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3324      	adds	r3, #36	; 0x24
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	f7f6 f829 	bl	80056fc <xTaskCheckForTimeOut>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d05c      	beq.n	800f76a <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61bb      	str	r3, [r7, #24]
 800f6b4:	e03f      	b.n	800f736 <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3318      	adds	r3, #24
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f107 020c 	add.w	r2, r7, #12
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	6938      	ldr	r0, [r7, #16]
 800f6ce:	4798      	blx	r3
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d129      	bne.n	800f72a <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	4013      	ands	r3, r2
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	bf14      	ite	ne
 800f6e2:	2301      	movne	r3, #1
 800f6e4:	2300      	moveq	r3, #0
 800f6e6:	b2da      	uxtb	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f003 0304 	and.w	r3, r3, #4
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	bf14      	ite	ne
 800f6f2:	2301      	movne	r3, #1
 800f6f4:	2300      	moveq	r3, #0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	4053      	eors	r3, r2
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d014      	beq.n	800f72a <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f003 0304 	and.w	r3, r3, #4
 800f706:	2b00      	cmp	r3, #0
 800f708:	d006      	beq.n	800f718 <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	431a      	orrs	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	635a      	str	r2, [r3, #52]	; 0x34
 800f716:	e006      	b.n	800f726 <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	43db      	mvns	r3, r3
 800f720:	401a      	ands	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 800f726:	2301      	movs	r3, #1
 800f728:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	3301      	adds	r3, #1
 800f72e:	61bb      	str	r3, [r7, #24]
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	005b      	lsls	r3, r3, #1
 800f734:	61fb      	str	r3, [r7, #28]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f73a:	69ba      	ldr	r2, [r7, #24]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	dbba      	blt.n	800f6b6 <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	331c      	adds	r3, #28
 800f744:	4618      	mov	r0, r3
 800f746:	f7f5 ff9b 	bl	8005680 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	085b      	lsrs	r3, r3, #1
 800f752:	4013      	ands	r3, r2
 800f754:	2b00      	cmp	r3, #0
 800f756:	d004      	beq.n	800f762 <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800f75e:	625a      	str	r2, [r3, #36]	; 0x24
 800f760:	e003      	b.n	800f76a <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f768:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 800f76a:	697b      	ldr	r3, [r7, #20]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3720      	adds	r7, #32
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 800f774:	b580      	push	{r7, lr}
 800f776:	b086      	sub	sp, #24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = 0uL;
 800f77c:	2300      	movs	r3, #0
 800f77e:	617b      	str	r3, [r7, #20]
            uint32_t hclk = 60000000uL;
 800f780:	4b49      	ldr	r3, [pc, #292]	; (800f8a8 <HAL_ETH_Init+0x134>)
 800f782:	613b      	str	r3, [r7, #16]
            uint32_t err = ETH_SUCCESS;
 800f784:	2300      	movs	r3, #0
 800f786:	60fb      	str	r3, [r7, #12]

            /* Check the ETH peripheral state */
            if( heth == NULL )
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_ETH_Init+0x1e>
            {
                return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e086      	b.n	800f8a0 <HAL_ETH_Init+0x12c>
            assert_param( IS_ETH_AUTONEGOTIATION( heth->Init.AutoNegotiation ) );
            assert_param( IS_ETH_RX_MODE( heth->Init.RxMode ) );
            assert_param( IS_ETH_CHECKSUM_MODE( heth->Init.ChecksumMode ) );
            assert_param( IS_ETH_MEDIA_INTERFACE( heth->Init.MediaInterface ) );

            if( heth->State == HAL_ETH_STATE_RESET )
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d102      	bne.n	800f7a4 <HAL_ETH_Init+0x30>
            {
                /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                HAL_ETH_MspInit( heth );
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7f1 f9c4 	bl	8000b2c <HAL_ETH_MspInit>
            }

            /* Enable SYSCFG Clock */
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f7a4:	4b41      	ldr	r3, [pc, #260]	; (800f8ac <HAL_ETH_Init+0x138>)
 800f7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a8:	4a40      	ldr	r2, [pc, #256]	; (800f8ac <HAL_ETH_Init+0x138>)
 800f7aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7ae:	6453      	str	r3, [r2, #68]	; 0x44
 800f7b0:	4b3e      	ldr	r3, [pc, #248]	; (800f8ac <HAL_ETH_Init+0x138>)
 800f7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7b8:	60bb      	str	r3, [r7, #8]
 800f7ba:	68bb      	ldr	r3, [r7, #8]

            /* Select MII or RMII Mode*/
            SYSCFG->PMC &= ~( SYSCFG_PMC_MII_RMII_SEL );
 800f7bc:	4b3c      	ldr	r3, [pc, #240]	; (800f8b0 <HAL_ETH_Init+0x13c>)
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4a3b      	ldr	r2, [pc, #236]	; (800f8b0 <HAL_ETH_Init+0x13c>)
 800f7c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f7c6:	6053      	str	r3, [r2, #4]
            SYSCFG->PMC |= ( uint32_t ) heth->Init.MediaInterface;
 800f7c8:	4b39      	ldr	r3, [pc, #228]	; (800f8b0 <HAL_ETH_Init+0x13c>)
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a1b      	ldr	r3, [r3, #32]
 800f7d0:	4937      	ldr	r1, [pc, #220]	; (800f8b0 <HAL_ETH_Init+0x13c>)
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	604b      	str	r3, [r1, #4]

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            /* Also enable EDFE: Enhanced descriptor format enable. */
            heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 800f7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ec:	601a      	str	r2, [r3, #0]

            /* Wait for software reset */
            while( ( heth->Instance->DMABMR & ETH_DMABMR_SR ) != ( uint32_t ) RESET )
 800f7ee:	bf00      	nop
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f003 0301 	and.w	r3, r3, #1
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1f6      	bne.n	800f7f0 <HAL_ETH_Init+0x7c>
                /* If your program hangs here, please check the value of 'ipconfigUSE_RMII'. */
            }

            /*-------------------------------- MAC Initialization ----------------------*/
            /* Get the ETHERNET MACMIIAR value */
            tmpreg = heth->Instance->MACMIIAR;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	617b      	str	r3, [r7, #20]
            /* Clear CSR Clock Range CR[2:0] bits */
            tmpreg &= ETH_MACMIIAR_CR_MASK;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f023 031c 	bic.w	r3, r3, #28
 800f810:	617b      	str	r3, [r7, #20]

            /* Get hclk frequency value (e.g. 168,000,000) */
            hclk = HAL_RCC_GetHCLKFreq();
 800f812:	f7f2 fd1f 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 800f816:	6138      	str	r0, [r7, #16]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000uL ) && ( hclk < 35000000uL ) )
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	4a26      	ldr	r2, [pc, #152]	; (800f8b4 <HAL_ETH_Init+0x140>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d908      	bls.n	800f832 <HAL_ETH_Init+0xbe>
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	4a25      	ldr	r2, [pc, #148]	; (800f8b8 <HAL_ETH_Init+0x144>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d804      	bhi.n	800f832 <HAL_ETH_Init+0xbe>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div16;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f043 0308 	orr.w	r3, r3, #8
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	e027      	b.n	800f882 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 35000000uL ) && ( hclk < 60000000uL ) )
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	4a20      	ldr	r2, [pc, #128]	; (800f8b8 <HAL_ETH_Init+0x144>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d908      	bls.n	800f84c <HAL_ETH_Init+0xd8>
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	4a1f      	ldr	r2, [pc, #124]	; (800f8bc <HAL_ETH_Init+0x148>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d804      	bhi.n	800f84c <HAL_ETH_Init+0xd8>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f043 030c 	orr.w	r3, r3, #12
 800f848:	617b      	str	r3, [r7, #20]
 800f84a:	e01a      	b.n	800f882 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 60000000uL ) && ( hclk < 100000000uL ) )
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <HAL_ETH_Init+0x148>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d903      	bls.n	800f85c <HAL_ETH_Init+0xe8>
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	4a1a      	ldr	r2, [pc, #104]	; (800f8c0 <HAL_ETH_Init+0x14c>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d911      	bls.n	800f880 <HAL_ETH_Init+0x10c>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
            }
            else if( ( hclk >= 100000000uL ) && ( hclk < 150000000uL ) )
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	4a18      	ldr	r2, [pc, #96]	; (800f8c0 <HAL_ETH_Init+0x14c>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d908      	bls.n	800f876 <HAL_ETH_Init+0x102>
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	4a17      	ldr	r2, [pc, #92]	; (800f8c4 <HAL_ETH_Init+0x150>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d804      	bhi.n	800f876 <HAL_ETH_Init+0x102>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div62;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f043 0304 	orr.w	r3, r3, #4
 800f872:	617b      	str	r3, [r7, #20]
 800f874:	e005      	b.n	800f882 <HAL_ETH_Init+0x10e>
            }
            else /* ( ( hclk >= 150000000uL ) && ( hclk <= 183000000uL ) ) */
            {
                /* CSR Clock Range between 150-183 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div102;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	f043 0310 	orr.w	r3, r3, #16
 800f87c:	617b      	str	r3, [r7, #20]
 800f87e:	e000      	b.n	800f882 <HAL_ETH_Init+0x10e>
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
 800f880:	bf00      	nop
            }

            /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
            heth->Instance->MACMIIAR = ( uint32_t ) tmpreg;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	611a      	str	r2, [r3, #16]

            /* Initialise the MACB and set all PHY properties */
            vMACBProbePhy();
 800f88a:	f7ff fa0b 	bl	800eca4 <vMACBProbePhy>

            /* Config MAC and DMA */
            ETH_MACDMAConfig( heth, err );
 800f88e:	68f9      	ldr	r1, [r7, #12]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fadd 	bl	800fe50 <ETH_MACDMAConfig>

            /* Set ETH HAL State to Ready */
            heth->State = HAL_ETH_STATE_READY;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2201      	movs	r2, #1
 800f89a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Return function status */
            return HAL_OK;
 800f89e:	2300      	movs	r3, #0
        }
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3718      	adds	r7, #24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	03938700 	.word	0x03938700
 800f8ac:	40023800 	.word	0x40023800
 800f8b0:	40013800 	.word	0x40013800
 800f8b4:	01312cff 	.word	0x01312cff
 800f8b8:	02160ebf 	.word	0x02160ebf
 800f8bc:	039386ff 	.word	0x039386ff
 800f8c0:	05f5e0ff 	.word	0x05f5e0ff
 800f8c4:	08f0d17f 	.word	0x08f0d17f

0800f8c8 <HAL_ETH_IRQHandler>:

/*#define ETH_DMA_ALL_INTS		ETH_DMA_IT_RBU | ETH_DMA_FLAG_T | ETH_DMA_FLAG_AIS */

        #define INT_MASK    ( ( uint32_t ) ~( ETH_DMA_IT_TBU ) )
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
            uint32_t dmasr;

            dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	f241 0314 	movw	r3, #4116	; 0x1014
 800f8d8:	4413      	add	r3, r2
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	4b12      	ldr	r3, [pc, #72]	; (800f928 <HAL_ETH_IRQHandler+0x60>)
 800f8de:	4013      	ands	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]
            heth->Instance->DMASR = dmasr;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	f241 0314 	movw	r3, #4116	; 0x1014
 800f8ea:	4413      	add	r3, r2
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	601a      	str	r2, [r3, #0]

            /* Frame received */
            if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <HAL_ETH_IRQHandler+0x38>
            {
                /* Receive complete callback */
                HAL_ETH_RxCpltCallback( heth );
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7fe fe66 	bl	800e5cc <HAL_ETH_RxCpltCallback>
            }

            /* Frame transmitted */
            if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	2b00      	cmp	r3, #0
 800f908:	d002      	beq.n	800f910 <HAL_ETH_IRQHandler+0x48>
            {
                /* Transfer complete callback */
                HAL_ETH_TxCpltCallback( heth );
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7fe fe8c 	bl	800e628 <HAL_ETH_TxCpltCallback>
            }

            /* ETH DMA Error */
            if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <HAL_ETH_IRQHandler+0x58>
            {
                /* Ethernet Error callback */
                HAL_ETH_ErrorCallback( heth );
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 f806 	bl	800f92c <HAL_ETH_ErrorCallback>
            }
        }
 800f920:	bf00      	nop
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	3801e7fb 	.word	0x3801e7fb

0800f92c <HAL_ETH_ErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * heth )
        {
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_TxCpltCallback could be implemented in the user file
             */
            ( void ) heth;
        }
 800f934:	bf00      	nop
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <HAL_ETH_ReadPHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint16_t PHYReg,
                                                   uint32_t * RegValue )
        {
 800f940:	b580      	push	{r7, lr}
 800f942:	b088      	sub	sp, #32
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	460b      	mov	r3, r1
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0uL;
 800f94e:	2300      	movs	r3, #0
 800f950:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0uL;
 800f952:	2300      	movs	r3, #0
 800f954:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_RD )
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	2b82      	cmp	r3, #130	; 0x82
 800f960:	d102      	bne.n	800f968 <HAL_ETH_ReadPHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 800f962:	2302      	movs	r3, #2
 800f964:	77fb      	strb	r3, [r7, #31]
 800f966:	e056      	b.n	800fa16 <HAL_ETH_ReadPHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d101      	bne.n	800f976 <HAL_ETH_ReadPHYRegister+0x36>
 800f972:	2302      	movs	r3, #2
 800f974:	e050      	b.n	800fa18 <HAL_ETH_ReadPHYRegister+0xd8>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2201      	movs	r2, #1
 800f97a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_RD */
                heth->State = HAL_ETH_STATE_BUSY_RD;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2282      	movs	r2, #130	; 0x82
 800f982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	f003 031c 	and.w	r3, r3, #28
 800f994:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII address register value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address   */
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	8a1b      	ldrh	r3, [r3, #16]
 800f99a:	02db      	lsls	r3, r3, #11
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	69ba      	ldr	r2, [r7, #24]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 800f9a4:	897b      	ldrh	r3, [r7, #10]
 800f9a6:	019b      	lsls	r3, r3, #6
 800f9a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	61bb      	str	r3, [r7, #24]
                tmpreg &= ~ETH_MACMIIAR_MW;                                                   /* Set the read mode            */
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	f023 0302 	bic.w	r3, r3, #2
 800f9b8:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit         */
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	f043 0301 	orr.w	r3, r3, #1
 800f9c0:	61bb      	str	r3, [r7, #24]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	69ba      	ldr	r2, [r7, #24]
 800f9c8:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 800f9ca:	f7f1 fb0b 	bl	8000fe4 <HAL_GetTick>
 800f9ce:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0uL )
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	f003 0301 	and.w	r3, r3, #1
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d107      	bne.n	800f9f2 <HAL_ETH_ReadPHYRegister+0xb2>
                    {
                        /* Get MACMIIDR value */
                        *RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	695a      	ldr	r2, [r3, #20]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	601a      	str	r2, [r3, #0]
                        xResult = HAL_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	77fb      	strb	r3, [r7, #31]
                        break;
 800f9f0:	e009      	b.n	800fa06 <HAL_ETH_ReadPHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_READ_TO )
 800f9f2:	f7f1 faf7 	bl	8000fe4 <HAL_GetTick>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa00:	d3e6      	bcc.n	800f9d0 <HAL_ETH_ReadPHYRegister+0x90>
                    {
                        xResult = HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 800fa16:	7ffb      	ldrb	r3, [r7, #31]
        }
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3720      	adds	r7, #32
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_ETH_WritePHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint16_t PHYReg,
                                                    uint32_t RegValue )
        {
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b088      	sub	sp, #32
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_WR )
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b42      	cmp	r3, #66	; 0x42
 800fa40:	d102      	bne.n	800fa48 <HAL_ETH_WritePHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 800fa42:	2302      	movs	r3, #2
 800fa44:	77fb      	strb	r3, [r7, #31]
 800fa46:	e056      	b.n	800faf6 <HAL_ETH_WritePHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d101      	bne.n	800fa56 <HAL_ETH_WritePHYRegister+0x36>
 800fa52:	2302      	movs	r3, #2
 800fa54:	e050      	b.n	800faf8 <HAL_ETH_WritePHYRegister+0xd8>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_WR */
                heth->State = HAL_ETH_STATE_BUSY_WR;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2242      	movs	r2, #66	; 0x42
 800fa62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	f003 031c 	and.w	r3, r3, #28
 800fa74:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII register address value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	8a1b      	ldrh	r3, [r3, #16]
 800fa7a:	02db      	lsls	r3, r3, #11
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	69ba      	ldr	r2, [r7, #24]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 800fa84:	897b      	ldrh	r3, [r7, #10]
 800fa86:	019b      	lsls	r3, r3, #6
 800fa88:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800fa8c:	69ba      	ldr	r2, [r7, #24]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MW;                                                    /* Set the write mode */
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	f043 0302 	orr.w	r3, r3, #2
 800fa98:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit */
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	f043 0301 	orr.w	r3, r3, #1
 800faa0:	61bb      	str	r3, [r7, #24]

                /* Give the value to the MII data register */
                heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	615a      	str	r2, [r3, #20]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	69ba      	ldr	r2, [r7, #24]
 800fab2:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 800fab4:	f7f1 fa96 	bl	8000fe4 <HAL_GetTick>
 800fab8:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	691b      	ldr	r3, [r3, #16]
 800fac0:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d102      	bne.n	800fad2 <HAL_ETH_WritePHYRegister+0xb2>
                    {
                        xResult = HAL_OK;
 800facc:	2300      	movs	r3, #0
 800face:	77fb      	strb	r3, [r7, #31]
                        break;
 800fad0:	e009      	b.n	800fae6 <HAL_ETH_WritePHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_WRITE_TO )
 800fad2:	f7f1 fa87 	bl	8000fe4 <HAL_GetTick>
 800fad6:	4602      	mov	r2, r0
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fae0:	d3eb      	bcc.n	800faba <HAL_ETH_WritePHYRegister+0x9a>
                    {
                        xResult = HAL_TIMEOUT;
 800fae2:	2303      	movs	r3, #3
 800fae4:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 800faf6:	7ffb      	ldrb	r3, [r7, #31]
        }
 800faf8:	4618      	mov	r0, r3
 800fafa:	3720      	adds	r7, #32
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start( ETH_HandleTypeDef * heth )
        {
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d101      	bne.n	800fb16 <HAL_ETH_Start+0x16>
 800fb12:	2302      	movs	r3, #2
 800fb14:	e01f      	b.n	800fb56 <HAL_ETH_Start+0x56>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2202      	movs	r2, #2
 800fb22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Enable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionEnable( heth );
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fb62 	bl	80101f0 <ETH_MACTransmissionEnable>

            /* Enable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionEnable( heth );
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fb83 	bl	8010238 <ETH_MACReceptionEnable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fbfe 	bl	8010334 <ETH_FlushTransmitFIFO>

            /* Start DMA transmission */
            ETH_DMATransmissionEnable( heth );
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fba3 	bl	8010284 <ETH_DMATransmissionEnable>

            /* Start DMA reception */
            ETH_DMAReceptionEnable( heth );
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 fbcc 	bl	80102dc <ETH_DMAReceptionEnable>

            /* Set the ETH state to READY*/
            heth->State = HAL_ETH_STATE_READY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800fb54:	2300      	movs	r3, #0
        }
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <HAL_ETH_Stop>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop( ETH_HandleTypeDef * heth )
        {
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d101      	bne.n	800fb74 <HAL_ETH_Stop+0x16>
 800fb70:	2302      	movs	r3, #2
 800fb72:	e01f      	b.n	800fbb4 <HAL_ETH_Stop+0x56>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2202      	movs	r2, #2
 800fb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Stop DMA transmission */
            ETH_DMATransmissionDisable( heth );
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fb93 	bl	80102b0 <ETH_DMATransmissionDisable>

            /* Stop DMA reception */
            ETH_DMAReceptionDisable( heth );
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fbbc 	bl	8010308 <ETH_DMAReceptionDisable>

            /* Disable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionDisable( heth );
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fb64 	bl	801025e <ETH_MACReceptionDisable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fbcc 	bl	8010334 <ETH_FlushTransmitFIFO>

            /* Disable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionDisable( heth );
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fb39 	bl	8010214 <ETH_MACTransmissionDisable>

            /* Set the ETH state*/
            heth->State = HAL_ETH_STATE_READY;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800fbb2:	2300      	movs	r3, #0
        }
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <vRegisterDelay>:

        static void vRegisterDelay()
        {
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
             * 100 Mhz = 160 loops
             *  84 Mhz = 134 loops
             */
        #define WAIT_TIME_NS    1600uL          /* 1.6 microseconds */
        #define CPU_MAX_FREQ    SystemCoreClock /* 84, 100, 168 or 180 MHz */
            uint32_t NOP_COUNT = ( WAIT_TIME_NS * ( CPU_MAX_FREQ / 1000uL ) ) / 1000000uL;
 800fbc2:	4b0f      	ldr	r3, [pc, #60]	; (800fc00 <vRegisterDelay+0x44>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a0f      	ldr	r2, [pc, #60]	; (800fc04 <vRegisterDelay+0x48>)
 800fbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbcc:	099b      	lsrs	r3, r3, #6
 800fbce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fbd2:	fb02 f303 	mul.w	r3, r2, r3
 800fbd6:	4a0c      	ldr	r2, [pc, #48]	; (800fc08 <vRegisterDelay+0x4c>)
 800fbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbdc:	0c9b      	lsrs	r3, r3, #18
 800fbde:	603b      	str	r3, [r7, #0]

            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	607b      	str	r3, [r7, #4]
 800fbe4:	e003      	b.n	800fbee <vRegisterDelay+0x32>
            {
                __NOP();
 800fbe6:	bf00      	nop
            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	3b01      	subs	r3, #1
 800fbec:	607b      	str	r3, [r7, #4]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1f8      	bne.n	800fbe6 <vRegisterDelay+0x2a>
            }
        }
 800fbf4:	bf00      	nop
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20000000 	.word	0x20000000
 800fc04:	10624dd3 	.word	0x10624dd3
 800fc08:	431bde83 	.word	0x431bde83

0800fc0c <prvWriteMACFCR>:

        static void prvWriteMACFCR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACFCR = ulValue;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	619a      	str	r2, [r3, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACFCR;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 800fc24:	f7ff ffca 	bl	800fbbc <vRegisterDelay>

            heth->Instance->MACFCR = ulValue;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	619a      	str	r2, [r3, #24]
        }
 800fc30:	bf00      	nop
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <prvWriteDMAOMR>:

        static void prvWriteDMAOMR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->DMAOMR = ulValue;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	f241 0318 	movw	r3, #4120	; 0x1018
 800fc4a:	4413      	add	r3, r2
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->DMAOMR;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	f241 0318 	movw	r3, #4120	; 0x1018
 800fc58:	4413      	add	r3, r2
 800fc5a:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 800fc5c:	f7ff ffae 	bl	800fbbc <vRegisterDelay>

            heth->Instance->DMAOMR = ulValue;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	f241 0318 	movw	r3, #4120	; 0x1018
 800fc68:	4413      	add	r3, r2
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	601a      	str	r2, [r3, #0]
        }
 800fc6e:	bf00      	nop
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <prvWriteMACCR>:

        static void prvWriteMACCR( ETH_HandleTypeDef * heth,
                                   uint32_t ulValue )
        {
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b082      	sub	sp, #8
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
 800fc7e:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACCR = ulValue;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACCR;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 800fc8e:	f7ff ff95 	bl	800fbbc <vRegisterDelay>

            heth->Instance->MACCR = ulValue;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	601a      	str	r2, [r3, #0]
        }
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <HAL_ETH_ConfigMAC>:
 * @param  macconf: MAC Configuration structure
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ConfigMAC( ETH_HandleTypeDef * heth,
                                             ETH_MACInitTypeDef * macconf )
        {
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
            uint32_t tmpreg = 0uL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	60fb      	str	r3, [r7, #12]

            /* Process Locked */
            __HAL_LOCK( heth );
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d101      	bne.n	800fcc0 <HAL_ETH_ConfigMAC+0x1c>
 800fcbc:	2302      	movs	r3, #2
 800fcbe:	e0c1      	b.n	800fe44 <HAL_ETH_ConfigMAC+0x1a0>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2202      	movs	r2, #2
 800fccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            assert_param( IS_ETH_SPEED( heth->Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( heth->Init.DuplexMode ) );

            if( macconf != NULL )
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 8099 	beq.w	800fe0a <HAL_ETH_ConfigMAC+0x166>
                assert_param( IS_ETH_VLAN_TAG_COMPARISON( macconf->VLANTagComparison ) );
                assert_param( IS_ETH_VLAN_TAG_IDENTIFIER( macconf->VLANTagIdentifier ) );

                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	60fb      	str	r3, [r7, #12]
                /* Clear WD, PCE, PS, TE and RE bits */
                tmpreg &= ETH_MACCR_CLEAR_MASK;
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	4b5a      	ldr	r3, [pc, #360]	; (800fe4c <HAL_ETH_ConfigMAC+0x1a8>)
 800fce4:	4013      	ands	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) (
                    macconf->Watchdog |
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
                    macconf->Jabber |
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
                    macconf->Watchdog |
 800fcf0:	431a      	orrs	r2, r3
                    macconf->InterFrameGap |
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	689b      	ldr	r3, [r3, #8]
                    macconf->Jabber |
 800fcf6:	431a      	orrs	r2, r3
                    macconf->CarrierSense |
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	68db      	ldr	r3, [r3, #12]
                    macconf->InterFrameGap |
 800fcfc:	431a      	orrs	r2, r3
                    heth->Init.Speed |
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	689b      	ldr	r3, [r3, #8]
                    macconf->CarrierSense |
 800fd02:	431a      	orrs	r2, r3
                    macconf->ReceiveOwn |
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	691b      	ldr	r3, [r3, #16]
                    heth->Init.Speed |
 800fd08:	431a      	orrs	r2, r3
                    macconf->LoopbackMode |
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	695b      	ldr	r3, [r3, #20]
                    macconf->ReceiveOwn |
 800fd0e:	431a      	orrs	r2, r3
                    heth->Init.DuplexMode |
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	68db      	ldr	r3, [r3, #12]
                    macconf->LoopbackMode |
 800fd14:	431a      	orrs	r2, r3
                    macconf->ChecksumOffload |
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	699b      	ldr	r3, [r3, #24]
                    heth->Init.DuplexMode |
 800fd1a:	431a      	orrs	r2, r3
                    macconf->RetryTransmission |
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	69db      	ldr	r3, [r3, #28]
                    macconf->ChecksumOffload |
 800fd20:	431a      	orrs	r2, r3
                    macconf->AutomaticPadCRCStrip |
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
                    macconf->RetryTransmission |
 800fd26:	431a      	orrs	r2, r3
                    macconf->BackOffLimit |
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    macconf->AutomaticPadCRCStrip |
 800fd2c:	431a      	orrs	r2, r3
                    macconf->DeferralCheck );
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    macconf->BackOffLimit |
 800fd32:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) (
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 800fd3a:	68f9      	ldr	r1, [r7, #12]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ff9a 	bl	800fc76 <prvWriteMACCR>

                /*----------------------- ETHERNET MACFFR Configuration --------------------*/
                /* Write to ETHERNET MACFFR */
                heth->Instance->MACFFR = ( uint32_t ) (
                    macconf->ReceiveAll |
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    macconf->SourceAddrFilter |
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    macconf->ReceiveAll |
 800fd4a:	431a      	orrs	r2, r3
                    macconf->PassControlFrames |
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    macconf->SourceAddrFilter |
 800fd50:	431a      	orrs	r2, r3
                    macconf->BroadcastFramesReception |
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    macconf->PassControlFrames |
 800fd56:	431a      	orrs	r2, r3
                    macconf->DestinationAddrFilter |
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    macconf->BroadcastFramesReception |
 800fd5c:	431a      	orrs	r2, r3
                    macconf->PromiscuousMode |
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    macconf->DestinationAddrFilter |
 800fd62:	431a      	orrs	r2, r3
                    macconf->MulticastFramesFilter |
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    macconf->PromiscuousMode |
 800fd68:	ea42 0103 	orr.w	r1, r2, r3
                    macconf->UnicastFramesFilter );
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                heth->Instance->MACFFR = ( uint32_t ) (
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
                    macconf->MulticastFramesFilter |
 800fd74:	430a      	orrs	r2, r1
                heth->Instance->MACFFR = ( uint32_t ) (
 800fd76:	605a      	str	r2, [r3, #4]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACFFR;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 800fd80:	f7ff ff1c 	bl	800fbbc <vRegisterDelay>
                heth->Instance->MACFFR = tmpreg;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	605a      	str	r2, [r3, #4]

                /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
                /* Write to ETHERNET MACHTHR */
                heth->Instance->MACHTHR = ( uint32_t ) macconf->HashTableHigh;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800fd94:	609a      	str	r2, [r3, #8]

                /* Write to ETHERNET MACHTLR */
                heth->Instance->MACHTLR = ( uint32_t ) macconf->HashTableLow;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	683a      	ldr	r2, [r7, #0]
 800fd9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800fd9e:	60da      	str	r2, [r3, #12]
                /*----------------------- ETHERNET MACFCR Configuration --------------------*/

                /* Get the ETHERNET MACFCR value */
                tmpreg = heth->Instance->MACFCR;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	60fb      	str	r3, [r7, #12]
                /* Clear xx bits */
                tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	f64f 7341 	movw	r3, #65345	; 0xff41
 800fdae:	4013      	ands	r3, r2
 800fdb0:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( (
                                             macconf->PauseTime << 16 ) |
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdb6:	041a      	lsls	r2, r3, #16
                                         macconf->ZeroQuantaPause |
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                                             macconf->PauseTime << 16 ) |
 800fdbc:	431a      	orrs	r2, r3
                                         macconf->PauseLowThreshold |
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                                         macconf->ZeroQuantaPause |
 800fdc2:	431a      	orrs	r2, r3
                                         macconf->UnicastPauseFrameDetect |
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                                         macconf->PauseLowThreshold |
 800fdc8:	431a      	orrs	r2, r3
                                         macconf->ReceiveFlowControl |
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                         macconf->UnicastPauseFrameDetect |
 800fdce:	431a      	orrs	r2, r3
                                         macconf->TransmitFlowControl );
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                         macconf->ReceiveFlowControl |
 800fdd4:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) ( (
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACFCR */
                prvWriteMACFCR( heth, tmpreg );
 800fddc:	68f9      	ldr	r1, [r7, #12]
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff ff14 	bl	800fc0c <prvWriteMACFCR>

                /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                                           macconf->VLANTagIdentifier );
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	61da      	str	r2, [r3, #28]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACVLANTR;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	69db      	ldr	r3, [r3, #28]
 800fdfa:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 800fdfc:	f7ff fede 	bl	800fbbc <vRegisterDelay>
                heth->Instance->MACVLANTR = tmpreg;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	61da      	str	r2, [r3, #28]
 800fe08:	e013      	b.n	800fe32 <HAL_ETH_ConfigMAC+0x18e>
            }
            else /* macconf == NULL : here we just configure Speed and Duplex mode */
            {
                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	60fb      	str	r3, [r7, #12]

                /* Clear FES and DM bits */
                tmpreg &= ~( ( uint32_t ) 0x00004800uL );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800fe18:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( heth->Init.Speed | heth->Init.DuplexMode );
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	689a      	ldr	r2, [r3, #8]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 800fe2a:	68f9      	ldr	r1, [r7, #12]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff ff22 	bl	800fc76 <prvWriteMACCR>
            }

            /* Set the ETH state to Ready */
            heth->State = HAL_ETH_STATE_READY;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2201      	movs	r2, #1
 800fe36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800fe42:	2300      	movs	r3, #0
        }
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	ff20810f 	.word	0xff20810f

0800fe50 <ETH_MACDMAConfig>:
 * @param  err: Ethernet Init error
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth,
                                      uint32_t err )
        {
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b0b0      	sub	sp, #192	; 0xc0
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
            ETH_MACInitTypeDef macinit;
            ETH_DMAInitTypeDef dmainit;
            uint32_t tmpreg = 0uL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            if( err != ETH_SUCCESS ) /* Auto-negotiation failed */
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d007      	beq.n	800fe76 <ETH_MACDMAConfig+0x26>
            {
                /* Set Ethernet duplex mode to Full-duplex */
                heth->Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe6c:	60da      	str	r2, [r3, #12]

                /* Set Ethernet speed to 100M */
                heth->Init.Speed = ETH_SPEED_100M;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fe74:	609a      	str	r2, [r3, #8]
            }

            /* Ethernet MAC default initialization **************************************/
            macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800fe76:	2300      	movs	r3, #0
 800fe78:	64bb      	str	r3, [r7, #72]	; 0x48
            macinit.Jabber = ETH_JABBER_ENABLE;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	64fb      	str	r3, [r7, #76]	; 0x4c
            macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	653b      	str	r3, [r7, #80]	; 0x50
            macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800fe82:	2300      	movs	r3, #0
 800fe84:	657b      	str	r3, [r7, #84]	; 0x54
            macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	65bb      	str	r3, [r7, #88]	; 0x58
            macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	65fb      	str	r3, [r7, #92]	; 0x5c

            if( heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	69db      	ldr	r3, [r3, #28]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d103      	bne.n	800fe9e <ETH_MACDMAConfig+0x4e>
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800fe96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe9a:	663b      	str	r3, [r7, #96]	; 0x60
 800fe9c:	e001      	b.n	800fea2 <ETH_MACDMAConfig+0x52>
            }
            else
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	663b      	str	r3, [r7, #96]	; 0x60
            }

            macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800fea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fea6:	667b      	str	r3, [r7, #100]	; 0x64
            macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800fea8:	2300      	movs	r3, #0
 800feaa:	66bb      	str	r3, [r7, #104]	; 0x68
            macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800feac:	2300      	movs	r3, #0
 800feae:	66fb      	str	r3, [r7, #108]	; 0x6c
            macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800feb0:	2300      	movs	r3, #0
 800feb2:	673b      	str	r3, [r7, #112]	; 0x70
            macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800feb4:	2300      	movs	r3, #0
 800feb6:	677b      	str	r3, [r7, #116]	; 0x74
            macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800feb8:	2300      	movs	r3, #0
 800feba:	67bb      	str	r3, [r7, #120]	; 0x78
            macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800febc:	2340      	movs	r3, #64	; 0x40
 800febe:	67fb      	str	r3, [r7, #124]	; 0x7c
            macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800fec0:	2300      	movs	r3, #0
 800fec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800fecc:	2300      	movs	r3, #0
 800fece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800fed2:	2300      	movs	r3, #0
 800fed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800fed8:	2300      	movs	r3, #0
 800feda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            macinit.HashTableHigh = 0x0uL;
 800fede:	2300      	movs	r3, #0
 800fee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            macinit.HashTableLow = 0x0uL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            macinit.PauseTime = 0x0uL;
 800feea:	2300      	movs	r3, #0
 800feec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800fef0:	2380      	movs	r3, #128	; 0x80
 800fef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800fef6:	2300      	movs	r3, #0
 800fef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800fefc:	2300      	movs	r3, #0
 800fefe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800ff02:	2300      	movs	r3, #0
 800ff04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            macinit.VLANTagIdentifier = 0x0uL;
 800ff14:	2300      	movs	r3, #0
 800ff16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            /*------------------------ ETHERNET MACCR Configuration --------------------*/
            /* Get the ETHERNET MACCR value */
            tmpreg = heth->Instance->MACCR;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear WD, PCE, PS, TE and RE bits */
            tmpreg &= ETH_MACCR_CLEAR_MASK;
 800ff24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ff28:	4b91      	ldr	r3, [pc, #580]	; (8010170 <ETH_MACDMAConfig+0x320>)
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the IPCO bit according to ETH ChecksumOffload value */
            /* Set the DR bit according to ETH RetryTransmission value */
            /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
            /* Set the BL bit according to ETH BackOffLimit value */
            /* Set the DC bit according to ETH DeferralCheck value */
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800ff30:	6cba      	ldr	r2, [r7, #72]	; 0x48
                                     macinit.Jabber |
 800ff32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800ff34:	431a      	orrs	r2, r3
                                     macinit.InterFrameGap |
 800ff36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                                     macinit.Jabber |
 800ff38:	431a      	orrs	r2, r3
                                     macinit.CarrierSense |
 800ff3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                                     macinit.InterFrameGap |
 800ff3c:	431a      	orrs	r2, r3
                                     heth->Init.Speed |
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	689b      	ldr	r3, [r3, #8]
                                     macinit.CarrierSense |
 800ff42:	431a      	orrs	r2, r3
                                     macinit.ReceiveOwn |
 800ff44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                                     heth->Init.Speed |
 800ff46:	431a      	orrs	r2, r3
                                     macinit.LoopbackMode |
 800ff48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                                     macinit.ReceiveOwn |
 800ff4a:	431a      	orrs	r2, r3
                                     heth->Init.DuplexMode |
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	68db      	ldr	r3, [r3, #12]
                                     macinit.LoopbackMode |
 800ff50:	431a      	orrs	r2, r3
                                     macinit.ChecksumOffload |
 800ff52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                                     heth->Init.DuplexMode |
 800ff54:	431a      	orrs	r2, r3
                                     macinit.RetryTransmission |
 800ff56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                                     macinit.ChecksumOffload |
 800ff58:	431a      	orrs	r2, r3
                                     macinit.AutomaticPadCRCStrip |
 800ff5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                                     macinit.RetryTransmission |
 800ff5c:	431a      	orrs	r2, r3
                                     macinit.BackOffLimit |
 800ff5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                                     macinit.AutomaticPadCRCStrip |
 800ff60:	431a      	orrs	r2, r3
                                     macinit.DeferralCheck );
 800ff62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                                     macinit.BackOffLimit |
 800ff64:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800ff66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACCR */
            prvWriteMACCR( heth, tmpreg );
 800ff70:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7ff fe7e 	bl	800fc76 <prvWriteMACCR>
            /* Set the DAIF bit according to ETH DestinationAddrFilter value */
            /* Set the PR bit according to ETH PromiscuousMode value */
            /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
            /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
            /* Write to ETHERNET MACFFR */
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800ff7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                                    macinit.SourceAddrFilter |
 800ff7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800ff7e:	431a      	orrs	r2, r3
                                                    macinit.PassControlFrames |
 800ff80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                                    macinit.SourceAddrFilter |
 800ff82:	431a      	orrs	r2, r3
                                                    macinit.BroadcastFramesReception |
 800ff84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                                    macinit.PassControlFrames |
 800ff88:	431a      	orrs	r2, r3
                                                    macinit.DestinationAddrFilter |
 800ff8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                                    macinit.BroadcastFramesReception |
 800ff8e:	431a      	orrs	r2, r3
                                                    macinit.PromiscuousMode |
 800ff90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                                    macinit.DestinationAddrFilter |
 800ff94:	431a      	orrs	r2, r3
                                                    macinit.MulticastFramesFilter |
 800ff96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                                    macinit.PromiscuousMode |
 800ff9a:	ea42 0103 	orr.w	r1, r2, r3
                                                    macinit.UnicastFramesFilter );
 800ff9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
                                                    macinit.MulticastFramesFilter |
 800ffa6:	430a      	orrs	r2, r1
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800ffa8:	605a      	str	r2, [r3, #4]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACFFR;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 800ffb4:	f7ff fe02 	bl	800fbbc <vRegisterDelay>
            heth->Instance->MACFFR = tmpreg;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ffc0:	605a      	str	r2, [r3, #4]

            /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
            /* Write to ETHERNET MACHTHR */
            heth->Instance->MACHTHR = ( uint32_t ) macinit.HashTableHigh;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ffca:	609a      	str	r2, [r3, #8]

            /* Write to ETHERNET MACHTLR */
            heth->Instance->MACHTLR = ( uint32_t ) macinit.HashTableLow;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ffd4:	60da      	str	r2, [r3, #12]
            /*----------------------- ETHERNET MACFCR Configuration -------------------*/

            /* Get the ETHERNET MACFCR value */
            tmpreg = heth->Instance->MACFCR;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	699b      	ldr	r3, [r3, #24]
 800ffdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800ffe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ffe4:	f64f 7341 	movw	r3, #65345	; 0xff41
 800ffe8:	4013      	ands	r3, r2
 800ffea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
            /* Set the PLT bit according to ETH PauseLowThreshold value */
            /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
            /* Set the RFE bit according to ETH ReceiveFlowControl value */
            /* Set the TFE bit according to ETH TransmitFlowControl value */
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 800ffee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fff2:	041a      	lsls	r2, r3, #16
                                     macinit.ZeroQuantaPause |
 800fff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 800fff8:	431a      	orrs	r2, r3
                                     macinit.PauseLowThreshold |
 800fffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                                     macinit.ZeroQuantaPause |
 800fffe:	431a      	orrs	r2, r3
                                     macinit.UnicastPauseFrameDetect |
 8010000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                                     macinit.PauseLowThreshold |
 8010004:	431a      	orrs	r2, r3
                                     macinit.ReceiveFlowControl |
 8010006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                                     macinit.UnicastPauseFrameDetect |
 801000a:	431a      	orrs	r2, r3
                                     macinit.TransmitFlowControl );
 801000c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                                     macinit.ReceiveFlowControl |
 8010010:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8010012:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010016:	4313      	orrs	r3, r2
 8010018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACFCR */
            prvWriteMACFCR( heth, tmpreg );
 801001c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7ff fdf3 	bl	800fc0c <prvWriteMACFCR>

            /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
            /* Set the ETV bit according to ETH VLANTagComparison value */
            /* Set the VL bit according to ETH VLANTagIdentifier value */
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 8010026:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                                       macinit.VLANTagIdentifier );
 801002a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	430a      	orrs	r2, r1
 8010034:	61da      	str	r2, [r3, #28]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACVLANTR;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	69db      	ldr	r3, [r3, #28]
 801003c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8010040:	f7ff fdbc 	bl	800fbbc <vRegisterDelay>
            heth->Instance->MACVLANTR = tmpreg;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801004c:	61da      	str	r2, [r3, #28]

            /* Ethernet DMA default initialization ************************************/
            dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 801004e:	2300      	movs	r3, #0
 8010050:	60bb      	str	r3, [r7, #8]
            dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8010052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010056:	60fb      	str	r3, [r7, #12]
            dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8010058:	2300      	movs	r3, #0
 801005a:	613b      	str	r3, [r7, #16]
            dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 801005c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010060:	617b      	str	r3, [r7, #20]
            dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8010062:	2300      	movs	r3, #0
 8010064:	61bb      	str	r3, [r7, #24]
            dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8010066:	2300      	movs	r3, #0
 8010068:	61fb      	str	r3, [r7, #28]
            dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 801006a:	2300      	movs	r3, #0
 801006c:	623b      	str	r3, [r7, #32]
            dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801006e:	2300      	movs	r3, #0
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
            dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8010072:	2304      	movs	r3, #4
 8010074:	62bb      	str	r3, [r7, #40]	; 0x28
            dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8010076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
            dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 801007c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010080:	633b      	str	r3, [r7, #48]	; 0x30
            dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8010082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010086:	637b      	str	r3, [r7, #52]	; 0x34
            dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8010088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801008c:	63bb      	str	r3, [r7, #56]	; 0x38
            dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 801008e:	2380      	movs	r3, #128	; 0x80
 8010090:	63fb      	str	r3, [r7, #60]	; 0x3c
            dmainit.DescriptorSkipLength = 0x0uL;
 8010092:	2300      	movs	r3, #0
 8010094:	643b      	str	r3, [r7, #64]	; 0x40
            dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8010096:	2300      	movs	r3, #0
 8010098:	647b      	str	r3, [r7, #68]	; 0x44

            /* Get the ETHERNET DMAOMR value */
            tmpreg = heth->Instance->DMAOMR;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	f241 0318 	movw	r3, #4120	; 0x1018
 80100a2:	4413      	add	r3, r2
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80100aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80100ae:	4b31      	ldr	r3, [pc, #196]	; (8010174 <ETH_MACDMAConfig+0x324>)
 80100b0:	4013      	ands	r3, r2
 80100b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the TTC bit according to ETH TransmitThresholdControl value */
            /* Set the FEF bit according to ETH ForwardErrorFrames value */
            /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
            /* Set the RTC bit according to ETH ReceiveThresholdControl value */
            /* Set the OSF bit according to ETH SecondFrameOperate value */
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80100b6:	68ba      	ldr	r2, [r7, #8]
                                     dmainit.ReceiveStoreForward |
 80100b8:	68fb      	ldr	r3, [r7, #12]
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80100ba:	431a      	orrs	r2, r3
                                     dmainit.FlushReceivedFrame |
 80100bc:	693b      	ldr	r3, [r7, #16]
                                     dmainit.ReceiveStoreForward |
 80100be:	431a      	orrs	r2, r3
                                     dmainit.TransmitStoreForward |
 80100c0:	697b      	ldr	r3, [r7, #20]
                                     dmainit.FlushReceivedFrame |
 80100c2:	431a      	orrs	r2, r3
                                     dmainit.TransmitThresholdControl |
 80100c4:	69bb      	ldr	r3, [r7, #24]
                                     dmainit.TransmitStoreForward |
 80100c6:	431a      	orrs	r2, r3
                                     dmainit.ForwardErrorFrames |
 80100c8:	69fb      	ldr	r3, [r7, #28]
                                     dmainit.TransmitThresholdControl |
 80100ca:	431a      	orrs	r2, r3
                                     dmainit.ForwardUndersizedGoodFrames |
 80100cc:	6a3b      	ldr	r3, [r7, #32]
                                     dmainit.ForwardErrorFrames |
 80100ce:	431a      	orrs	r2, r3
                                     dmainit.ReceiveThresholdControl |
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                                     dmainit.ForwardUndersizedGoodFrames |
 80100d2:	431a      	orrs	r2, r3
                                     dmainit.SecondFrameOperate );
 80100d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                     dmainit.ReceiveThresholdControl |
 80100d6:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80100d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80100dc:	4313      	orrs	r3, r2
 80100de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET DMAOMR */
            prvWriteDMAOMR( heth, tmpreg );
 80100e2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff fda6 	bl	800fc38 <prvWriteDMAOMR>
            /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
            /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
            /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
            /* Set the DSL bit according to ETH DesciptorSkipLength value */
            /* Set the PR and DA bits according to ETH DMAArbitration value */
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80100ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                                    dmainit.FixedBurst |
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80100f0:	431a      	orrs	r2, r3
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                    dmainit.FixedBurst |
 80100f4:	431a      	orrs	r2, r3
                                                    dmainit.TxDMABurstLength |
 80100f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80100f8:	431a      	orrs	r2, r3
                                                    dmainit.EnhancedDescriptorFormat |
 80100fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                                    dmainit.TxDMABurstLength |
 80100fc:	431a      	orrs	r2, r3
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 80100fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010100:	009b      	lsls	r3, r3, #2
                                                    dmainit.EnhancedDescriptorFormat |
 8010102:	431a      	orrs	r2, r3
                                                    dmainit.DMAArbitration |
 8010104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 8010106:	431a      	orrs	r2, r3
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010114:	601a      	str	r2, [r3, #0]
                                                    ETH_DMABMR_USP ); /* Enable use of separate PBL for Rx and Tx */

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->DMABMR;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8010124:	f7ff fd4a 	bl	800fbbc <vRegisterDelay>
            heth->Instance->DMABMR = tmpreg;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010134:	601a      	str	r2, [r3, #0]

            if( heth->Init.RxMode == ETH_RXINTERRUPT_MODE )
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	699b      	ldr	r3, [r3, #24]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d10d      	bne.n	801015a <ETH_MACDMAConfig+0x30a>
            {
                /* Enable the Ethernet Rx Interrupt */
                __HAL_ETH_DMA_ENABLE_IT( ( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R );
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	f241 031c 	movw	r3, #4124	; 0x101c
 8010146:	4413      	add	r3, r2
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	6811      	ldr	r1, [r2, #0]
 801014e:	4a0a      	ldr	r2, [pc, #40]	; (8010178 <ETH_MACDMAConfig+0x328>)
 8010150:	431a      	orrs	r2, r3
 8010152:	f241 031c 	movw	r3, #4124	; 0x101c
 8010156:	440b      	add	r3, r1
 8010158:	601a      	str	r2, [r3, #0]
            }

            /* Initialize MAC address in ethernet MAC */
            ETH_MACAddressConfig( heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr );
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	461a      	mov	r2, r3
 8010160:	2100      	movs	r1, #0
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 f80a 	bl	801017c <ETH_MACAddressConfig>
        }
 8010168:	bf00      	nop
 801016a:	37c0      	adds	r7, #192	; 0xc0
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	ff20810f 	.word	0xff20810f
 8010174:	f8de3f23 	.word	0xf8de3f23
 8010178:	00010040 	.word	0x00010040

0801017c <ETH_MACAddressConfig>:
 * @retval HAL status
 */
        static void ETH_MACAddressConfig( ETH_HandleTypeDef * heth,
                                          uint32_t MacAddr,
                                          uint8_t * Addr )
        {
 801017c:	b480      	push	{r7}
 801017e:	b087      	sub	sp, #28
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
            /* Check the parameters */
            assert_param( IS_ETH_MAC_ADDRESS0123( MacAddr ) );

            /* Calculate the selected MAC address high register */
            /* Register ETH_MACA0HR: Bit 31 MO: Always 1. */
            tmpreg = 0x80000000uL | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3305      	adds	r3, #5
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	021b      	lsls	r3, r3, #8
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	3204      	adds	r2, #4
 8010194:	7812      	ldrb	r2, [r2, #0]
 8010196:	4313      	orrs	r3, r2
 8010198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801019c:	617b      	str	r3, [r7, #20]
            /* Load the selected MAC address high register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	4b11      	ldr	r3, [pc, #68]	; (80101e8 <ETH_MACAddressConfig+0x6c>)
 80101a2:	4413      	add	r3, r2
 80101a4:	461a      	mov	r2, r3
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	6013      	str	r3, [r2, #0]
            /* Calculate the selected MAC address low register */
            tmpreg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3303      	adds	r3, #3
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	061a      	lsls	r2, r3, #24
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	3302      	adds	r3, #2
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	041b      	lsls	r3, r3, #16
 80101ba:	431a      	orrs	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	3301      	adds	r3, #1
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	4313      	orrs	r3, r2
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	7812      	ldrb	r2, [r2, #0]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	617b      	str	r3, [r7, #20]

            /* Load the selected MAC address low register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	4b06      	ldr	r3, [pc, #24]	; (80101ec <ETH_MACAddressConfig+0x70>)
 80101d2:	4413      	add	r3, r2
 80101d4:	461a      	mov	r2, r3
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	6013      	str	r3, [r2, #0]
        }
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	40028040 	.word	0x40028040
 80101ec:	40028044 	.word	0x40028044

080101f0 <ETH_MACTransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionEnable( ETH_HandleTypeDef * heth )
        {
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f043 0308 	orr.w	r3, r3, #8
 8010202:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8010204:	68f9      	ldr	r1, [r7, #12]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff fd35 	bl	800fc76 <prvWriteMACCR>
        }
 801020c:	bf00      	nop
 801020e:	3710      	adds	r7, #16
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <ETH_MACTransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionDisable( ETH_HandleTypeDef * heth )
        {
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f023 0308 	bic.w	r3, r3, #8
 8010226:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8010228:	68f9      	ldr	r1, [r7, #12]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7ff fd23 	bl	800fc76 <prvWriteMACCR>
        }
 8010230:	bf00      	nop
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <ETH_MACReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f043 0304 	orr.w	r3, r3, #4
 801024a:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4619      	mov	r1, r3
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff fd10 	bl	800fc76 <prvWriteMACCR>
        }
 8010256:	bf00      	nop
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <ETH_MACReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionDisable( ETH_HandleTypeDef * heth )
        {
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f023 0304 	bic.w	r3, r3, #4
 8010270:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	4619      	mov	r1, r3
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff fcfd 	bl	800fc76 <prvWriteMACCR>
        }
 801027c:	bf00      	nop
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <ETH_DMATransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionEnable( ETH_HandleTypeDef * heth )
        {
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
            /* Enable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	f241 0318 	movw	r3, #4120	; 0x1018
 8010294:	4413      	add	r3, r2
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801029c:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	4619      	mov	r1, r3
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff fcc8 	bl	800fc38 <prvWriteDMAOMR>
        }
 80102a8:	bf00      	nop
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <ETH_DMATransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionDisable( ETH_HandleTypeDef * heth )
        {
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
            /* Disable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80102c0:	4413      	add	r3, r2
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80102c8:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	4619      	mov	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f7ff fcb2 	bl	800fc38 <prvWriteDMAOMR>
        }
 80102d4:	bf00      	nop
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <ETH_DMAReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionEnable( ETH_HandleTypeDef * heth )
        {
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
            /* Enable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80102ec:	4413      	add	r3, r2
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f043 0302 	orr.w	r3, r3, #2
 80102f4:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	4619      	mov	r1, r3
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7ff fc9c 	bl	800fc38 <prvWriteDMAOMR>
        }
 8010300:	bf00      	nop
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <ETH_DMAReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
            /* Disable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	f241 0318 	movw	r3, #4120	; 0x1018
 8010318:	4413      	add	r3, r2
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f023 0302 	bic.w	r3, r3, #2
 8010320:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7ff fc86 	bl	800fc38 <prvWriteDMAOMR>
        }
 801032c:	bf00      	nop
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <ETH_FlushTransmitFIFO>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_FlushTransmitFIFO( ETH_HandleTypeDef * heth )
        {
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
            /* Set the Flush Transmit FIFO bit */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	f241 0318 	movw	r3, #4120	; 0x1018
 8010344:	4413      	add	r3, r2
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801034c:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff fc70 	bl	800fc38 <prvWriteDMAOMR>
        }
 8010358:	bf00      	nop
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <__errno>:
 8010360:	4b01      	ldr	r3, [pc, #4]	; (8010368 <__errno+0x8>)
 8010362:	6818      	ldr	r0, [r3, #0]
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	2000002c 	.word	0x2000002c

0801036c <__libc_init_array>:
 801036c:	b570      	push	{r4, r5, r6, lr}
 801036e:	4e0d      	ldr	r6, [pc, #52]	; (80103a4 <__libc_init_array+0x38>)
 8010370:	4c0d      	ldr	r4, [pc, #52]	; (80103a8 <__libc_init_array+0x3c>)
 8010372:	1ba4      	subs	r4, r4, r6
 8010374:	10a4      	asrs	r4, r4, #2
 8010376:	2500      	movs	r5, #0
 8010378:	42a5      	cmp	r5, r4
 801037a:	d109      	bne.n	8010390 <__libc_init_array+0x24>
 801037c:	4e0b      	ldr	r6, [pc, #44]	; (80103ac <__libc_init_array+0x40>)
 801037e:	4c0c      	ldr	r4, [pc, #48]	; (80103b0 <__libc_init_array+0x44>)
 8010380:	f000 fc4a 	bl	8010c18 <_init>
 8010384:	1ba4      	subs	r4, r4, r6
 8010386:	10a4      	asrs	r4, r4, #2
 8010388:	2500      	movs	r5, #0
 801038a:	42a5      	cmp	r5, r4
 801038c:	d105      	bne.n	801039a <__libc_init_array+0x2e>
 801038e:	bd70      	pop	{r4, r5, r6, pc}
 8010390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010394:	4798      	blx	r3
 8010396:	3501      	adds	r5, #1
 8010398:	e7ee      	b.n	8010378 <__libc_init_array+0xc>
 801039a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801039e:	4798      	blx	r3
 80103a0:	3501      	adds	r5, #1
 80103a2:	e7f2      	b.n	801038a <__libc_init_array+0x1e>
 80103a4:	08010e6c 	.word	0x08010e6c
 80103a8:	08010e6c 	.word	0x08010e6c
 80103ac:	08010e6c 	.word	0x08010e6c
 80103b0:	08010e70 	.word	0x08010e70

080103b4 <memcmp>:
 80103b4:	b530      	push	{r4, r5, lr}
 80103b6:	2400      	movs	r4, #0
 80103b8:	42a2      	cmp	r2, r4
 80103ba:	d101      	bne.n	80103c0 <memcmp+0xc>
 80103bc:	2000      	movs	r0, #0
 80103be:	e007      	b.n	80103d0 <memcmp+0x1c>
 80103c0:	5d03      	ldrb	r3, [r0, r4]
 80103c2:	3401      	adds	r4, #1
 80103c4:	190d      	adds	r5, r1, r4
 80103c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80103ca:	42ab      	cmp	r3, r5
 80103cc:	d0f4      	beq.n	80103b8 <memcmp+0x4>
 80103ce:	1b58      	subs	r0, r3, r5
 80103d0:	bd30      	pop	{r4, r5, pc}

080103d2 <memcpy>:
 80103d2:	b510      	push	{r4, lr}
 80103d4:	1e43      	subs	r3, r0, #1
 80103d6:	440a      	add	r2, r1
 80103d8:	4291      	cmp	r1, r2
 80103da:	d100      	bne.n	80103de <memcpy+0xc>
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e6:	e7f7      	b.n	80103d8 <memcpy+0x6>

080103e8 <memmove>:
 80103e8:	4288      	cmp	r0, r1
 80103ea:	b510      	push	{r4, lr}
 80103ec:	eb01 0302 	add.w	r3, r1, r2
 80103f0:	d807      	bhi.n	8010402 <memmove+0x1a>
 80103f2:	1e42      	subs	r2, r0, #1
 80103f4:	4299      	cmp	r1, r3
 80103f6:	d00a      	beq.n	801040e <memmove+0x26>
 80103f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010400:	e7f8      	b.n	80103f4 <memmove+0xc>
 8010402:	4283      	cmp	r3, r0
 8010404:	d9f5      	bls.n	80103f2 <memmove+0xa>
 8010406:	1881      	adds	r1, r0, r2
 8010408:	1ad2      	subs	r2, r2, r3
 801040a:	42d3      	cmn	r3, r2
 801040c:	d100      	bne.n	8010410 <memmove+0x28>
 801040e:	bd10      	pop	{r4, pc}
 8010410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010414:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010418:	e7f7      	b.n	801040a <memmove+0x22>

0801041a <memset>:
 801041a:	4402      	add	r2, r0
 801041c:	4603      	mov	r3, r0
 801041e:	4293      	cmp	r3, r2
 8010420:	d100      	bne.n	8010424 <memset+0xa>
 8010422:	4770      	bx	lr
 8010424:	f803 1b01 	strb.w	r1, [r3], #1
 8010428:	e7f9      	b.n	801041e <memset+0x4>
	...

0801042c <sniprintf>:
 801042c:	b40c      	push	{r2, r3}
 801042e:	b530      	push	{r4, r5, lr}
 8010430:	4b17      	ldr	r3, [pc, #92]	; (8010490 <sniprintf+0x64>)
 8010432:	1e0c      	subs	r4, r1, #0
 8010434:	b09d      	sub	sp, #116	; 0x74
 8010436:	681d      	ldr	r5, [r3, #0]
 8010438:	da08      	bge.n	801044c <sniprintf+0x20>
 801043a:	238b      	movs	r3, #139	; 0x8b
 801043c:	602b      	str	r3, [r5, #0]
 801043e:	f04f 30ff 	mov.w	r0, #4294967295
 8010442:	b01d      	add	sp, #116	; 0x74
 8010444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010448:	b002      	add	sp, #8
 801044a:	4770      	bx	lr
 801044c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010454:	bf14      	ite	ne
 8010456:	f104 33ff 	addne.w	r3, r4, #4294967295
 801045a:	4623      	moveq	r3, r4
 801045c:	9304      	str	r3, [sp, #16]
 801045e:	9307      	str	r3, [sp, #28]
 8010460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010464:	9002      	str	r0, [sp, #8]
 8010466:	9006      	str	r0, [sp, #24]
 8010468:	f8ad 3016 	strh.w	r3, [sp, #22]
 801046c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801046e:	ab21      	add	r3, sp, #132	; 0x84
 8010470:	a902      	add	r1, sp, #8
 8010472:	4628      	mov	r0, r5
 8010474:	9301      	str	r3, [sp, #4]
 8010476:	f000 f867 	bl	8010548 <_svfiprintf_r>
 801047a:	1c43      	adds	r3, r0, #1
 801047c:	bfbc      	itt	lt
 801047e:	238b      	movlt	r3, #139	; 0x8b
 8010480:	602b      	strlt	r3, [r5, #0]
 8010482:	2c00      	cmp	r4, #0
 8010484:	d0dd      	beq.n	8010442 <sniprintf+0x16>
 8010486:	9b02      	ldr	r3, [sp, #8]
 8010488:	2200      	movs	r2, #0
 801048a:	701a      	strb	r2, [r3, #0]
 801048c:	e7d9      	b.n	8010442 <sniprintf+0x16>
 801048e:	bf00      	nop
 8010490:	2000002c 	.word	0x2000002c

08010494 <__ssputs_r>:
 8010494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010498:	688e      	ldr	r6, [r1, #8]
 801049a:	429e      	cmp	r6, r3
 801049c:	4682      	mov	sl, r0
 801049e:	460c      	mov	r4, r1
 80104a0:	4690      	mov	r8, r2
 80104a2:	4699      	mov	r9, r3
 80104a4:	d837      	bhi.n	8010516 <__ssputs_r+0x82>
 80104a6:	898a      	ldrh	r2, [r1, #12]
 80104a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104ac:	d031      	beq.n	8010512 <__ssputs_r+0x7e>
 80104ae:	6825      	ldr	r5, [r4, #0]
 80104b0:	6909      	ldr	r1, [r1, #16]
 80104b2:	1a6f      	subs	r7, r5, r1
 80104b4:	6965      	ldr	r5, [r4, #20]
 80104b6:	2302      	movs	r3, #2
 80104b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80104c0:	f109 0301 	add.w	r3, r9, #1
 80104c4:	443b      	add	r3, r7
 80104c6:	429d      	cmp	r5, r3
 80104c8:	bf38      	it	cc
 80104ca:	461d      	movcc	r5, r3
 80104cc:	0553      	lsls	r3, r2, #21
 80104ce:	d530      	bpl.n	8010532 <__ssputs_r+0x9e>
 80104d0:	4629      	mov	r1, r5
 80104d2:	f000 fb07 	bl	8010ae4 <_malloc_r>
 80104d6:	4606      	mov	r6, r0
 80104d8:	b950      	cbnz	r0, 80104f0 <__ssputs_r+0x5c>
 80104da:	230c      	movs	r3, #12
 80104dc:	f8ca 3000 	str.w	r3, [sl]
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f0:	463a      	mov	r2, r7
 80104f2:	6921      	ldr	r1, [r4, #16]
 80104f4:	f7ff ff6d 	bl	80103d2 <memcpy>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80104fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	6126      	str	r6, [r4, #16]
 8010506:	6165      	str	r5, [r4, #20]
 8010508:	443e      	add	r6, r7
 801050a:	1bed      	subs	r5, r5, r7
 801050c:	6026      	str	r6, [r4, #0]
 801050e:	60a5      	str	r5, [r4, #8]
 8010510:	464e      	mov	r6, r9
 8010512:	454e      	cmp	r6, r9
 8010514:	d900      	bls.n	8010518 <__ssputs_r+0x84>
 8010516:	464e      	mov	r6, r9
 8010518:	4632      	mov	r2, r6
 801051a:	4641      	mov	r1, r8
 801051c:	6820      	ldr	r0, [r4, #0]
 801051e:	f7ff ff63 	bl	80103e8 <memmove>
 8010522:	68a3      	ldr	r3, [r4, #8]
 8010524:	1b9b      	subs	r3, r3, r6
 8010526:	60a3      	str	r3, [r4, #8]
 8010528:	6823      	ldr	r3, [r4, #0]
 801052a:	441e      	add	r6, r3
 801052c:	6026      	str	r6, [r4, #0]
 801052e:	2000      	movs	r0, #0
 8010530:	e7dc      	b.n	80104ec <__ssputs_r+0x58>
 8010532:	462a      	mov	r2, r5
 8010534:	f000 fb30 	bl	8010b98 <_realloc_r>
 8010538:	4606      	mov	r6, r0
 801053a:	2800      	cmp	r0, #0
 801053c:	d1e2      	bne.n	8010504 <__ssputs_r+0x70>
 801053e:	6921      	ldr	r1, [r4, #16]
 8010540:	4650      	mov	r0, sl
 8010542:	f000 fa81 	bl	8010a48 <_free_r>
 8010546:	e7c8      	b.n	80104da <__ssputs_r+0x46>

08010548 <_svfiprintf_r>:
 8010548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054c:	461d      	mov	r5, r3
 801054e:	898b      	ldrh	r3, [r1, #12]
 8010550:	061f      	lsls	r7, r3, #24
 8010552:	b09d      	sub	sp, #116	; 0x74
 8010554:	4680      	mov	r8, r0
 8010556:	460c      	mov	r4, r1
 8010558:	4616      	mov	r6, r2
 801055a:	d50f      	bpl.n	801057c <_svfiprintf_r+0x34>
 801055c:	690b      	ldr	r3, [r1, #16]
 801055e:	b96b      	cbnz	r3, 801057c <_svfiprintf_r+0x34>
 8010560:	2140      	movs	r1, #64	; 0x40
 8010562:	f000 fabf 	bl	8010ae4 <_malloc_r>
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	6120      	str	r0, [r4, #16]
 801056a:	b928      	cbnz	r0, 8010578 <_svfiprintf_r+0x30>
 801056c:	230c      	movs	r3, #12
 801056e:	f8c8 3000 	str.w	r3, [r8]
 8010572:	f04f 30ff 	mov.w	r0, #4294967295
 8010576:	e0c8      	b.n	801070a <_svfiprintf_r+0x1c2>
 8010578:	2340      	movs	r3, #64	; 0x40
 801057a:	6163      	str	r3, [r4, #20]
 801057c:	2300      	movs	r3, #0
 801057e:	9309      	str	r3, [sp, #36]	; 0x24
 8010580:	2320      	movs	r3, #32
 8010582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010586:	2330      	movs	r3, #48	; 0x30
 8010588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801058c:	9503      	str	r5, [sp, #12]
 801058e:	f04f 0b01 	mov.w	fp, #1
 8010592:	4637      	mov	r7, r6
 8010594:	463d      	mov	r5, r7
 8010596:	f815 3b01 	ldrb.w	r3, [r5], #1
 801059a:	b10b      	cbz	r3, 80105a0 <_svfiprintf_r+0x58>
 801059c:	2b25      	cmp	r3, #37	; 0x25
 801059e:	d13e      	bne.n	801061e <_svfiprintf_r+0xd6>
 80105a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80105a4:	d00b      	beq.n	80105be <_svfiprintf_r+0x76>
 80105a6:	4653      	mov	r3, sl
 80105a8:	4632      	mov	r2, r6
 80105aa:	4621      	mov	r1, r4
 80105ac:	4640      	mov	r0, r8
 80105ae:	f7ff ff71 	bl	8010494 <__ssputs_r>
 80105b2:	3001      	adds	r0, #1
 80105b4:	f000 80a4 	beq.w	8010700 <_svfiprintf_r+0x1b8>
 80105b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ba:	4453      	add	r3, sl
 80105bc:	9309      	str	r3, [sp, #36]	; 0x24
 80105be:	783b      	ldrb	r3, [r7, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f000 809d 	beq.w	8010700 <_svfiprintf_r+0x1b8>
 80105c6:	2300      	movs	r3, #0
 80105c8:	f04f 32ff 	mov.w	r2, #4294967295
 80105cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105d0:	9304      	str	r3, [sp, #16]
 80105d2:	9307      	str	r3, [sp, #28]
 80105d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105d8:	931a      	str	r3, [sp, #104]	; 0x68
 80105da:	462f      	mov	r7, r5
 80105dc:	2205      	movs	r2, #5
 80105de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80105e2:	4850      	ldr	r0, [pc, #320]	; (8010724 <_svfiprintf_r+0x1dc>)
 80105e4:	f7ef fe34 	bl	8000250 <memchr>
 80105e8:	9b04      	ldr	r3, [sp, #16]
 80105ea:	b9d0      	cbnz	r0, 8010622 <_svfiprintf_r+0xda>
 80105ec:	06d9      	lsls	r1, r3, #27
 80105ee:	bf44      	itt	mi
 80105f0:	2220      	movmi	r2, #32
 80105f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80105f6:	071a      	lsls	r2, r3, #28
 80105f8:	bf44      	itt	mi
 80105fa:	222b      	movmi	r2, #43	; 0x2b
 80105fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010600:	782a      	ldrb	r2, [r5, #0]
 8010602:	2a2a      	cmp	r2, #42	; 0x2a
 8010604:	d015      	beq.n	8010632 <_svfiprintf_r+0xea>
 8010606:	9a07      	ldr	r2, [sp, #28]
 8010608:	462f      	mov	r7, r5
 801060a:	2000      	movs	r0, #0
 801060c:	250a      	movs	r5, #10
 801060e:	4639      	mov	r1, r7
 8010610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010614:	3b30      	subs	r3, #48	; 0x30
 8010616:	2b09      	cmp	r3, #9
 8010618:	d94d      	bls.n	80106b6 <_svfiprintf_r+0x16e>
 801061a:	b1b8      	cbz	r0, 801064c <_svfiprintf_r+0x104>
 801061c:	e00f      	b.n	801063e <_svfiprintf_r+0xf6>
 801061e:	462f      	mov	r7, r5
 8010620:	e7b8      	b.n	8010594 <_svfiprintf_r+0x4c>
 8010622:	4a40      	ldr	r2, [pc, #256]	; (8010724 <_svfiprintf_r+0x1dc>)
 8010624:	1a80      	subs	r0, r0, r2
 8010626:	fa0b f000 	lsl.w	r0, fp, r0
 801062a:	4318      	orrs	r0, r3
 801062c:	9004      	str	r0, [sp, #16]
 801062e:	463d      	mov	r5, r7
 8010630:	e7d3      	b.n	80105da <_svfiprintf_r+0x92>
 8010632:	9a03      	ldr	r2, [sp, #12]
 8010634:	1d11      	adds	r1, r2, #4
 8010636:	6812      	ldr	r2, [r2, #0]
 8010638:	9103      	str	r1, [sp, #12]
 801063a:	2a00      	cmp	r2, #0
 801063c:	db01      	blt.n	8010642 <_svfiprintf_r+0xfa>
 801063e:	9207      	str	r2, [sp, #28]
 8010640:	e004      	b.n	801064c <_svfiprintf_r+0x104>
 8010642:	4252      	negs	r2, r2
 8010644:	f043 0302 	orr.w	r3, r3, #2
 8010648:	9207      	str	r2, [sp, #28]
 801064a:	9304      	str	r3, [sp, #16]
 801064c:	783b      	ldrb	r3, [r7, #0]
 801064e:	2b2e      	cmp	r3, #46	; 0x2e
 8010650:	d10c      	bne.n	801066c <_svfiprintf_r+0x124>
 8010652:	787b      	ldrb	r3, [r7, #1]
 8010654:	2b2a      	cmp	r3, #42	; 0x2a
 8010656:	d133      	bne.n	80106c0 <_svfiprintf_r+0x178>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	1d1a      	adds	r2, r3, #4
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	9203      	str	r2, [sp, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	bfb8      	it	lt
 8010664:	f04f 33ff 	movlt.w	r3, #4294967295
 8010668:	3702      	adds	r7, #2
 801066a:	9305      	str	r3, [sp, #20]
 801066c:	4d2e      	ldr	r5, [pc, #184]	; (8010728 <_svfiprintf_r+0x1e0>)
 801066e:	7839      	ldrb	r1, [r7, #0]
 8010670:	2203      	movs	r2, #3
 8010672:	4628      	mov	r0, r5
 8010674:	f7ef fdec 	bl	8000250 <memchr>
 8010678:	b138      	cbz	r0, 801068a <_svfiprintf_r+0x142>
 801067a:	2340      	movs	r3, #64	; 0x40
 801067c:	1b40      	subs	r0, r0, r5
 801067e:	fa03 f000 	lsl.w	r0, r3, r0
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	4303      	orrs	r3, r0
 8010686:	3701      	adds	r7, #1
 8010688:	9304      	str	r3, [sp, #16]
 801068a:	7839      	ldrb	r1, [r7, #0]
 801068c:	4827      	ldr	r0, [pc, #156]	; (801072c <_svfiprintf_r+0x1e4>)
 801068e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010692:	2206      	movs	r2, #6
 8010694:	1c7e      	adds	r6, r7, #1
 8010696:	f7ef fddb 	bl	8000250 <memchr>
 801069a:	2800      	cmp	r0, #0
 801069c:	d038      	beq.n	8010710 <_svfiprintf_r+0x1c8>
 801069e:	4b24      	ldr	r3, [pc, #144]	; (8010730 <_svfiprintf_r+0x1e8>)
 80106a0:	bb13      	cbnz	r3, 80106e8 <_svfiprintf_r+0x1a0>
 80106a2:	9b03      	ldr	r3, [sp, #12]
 80106a4:	3307      	adds	r3, #7
 80106a6:	f023 0307 	bic.w	r3, r3, #7
 80106aa:	3308      	adds	r3, #8
 80106ac:	9303      	str	r3, [sp, #12]
 80106ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b0:	444b      	add	r3, r9
 80106b2:	9309      	str	r3, [sp, #36]	; 0x24
 80106b4:	e76d      	b.n	8010592 <_svfiprintf_r+0x4a>
 80106b6:	fb05 3202 	mla	r2, r5, r2, r3
 80106ba:	2001      	movs	r0, #1
 80106bc:	460f      	mov	r7, r1
 80106be:	e7a6      	b.n	801060e <_svfiprintf_r+0xc6>
 80106c0:	2300      	movs	r3, #0
 80106c2:	3701      	adds	r7, #1
 80106c4:	9305      	str	r3, [sp, #20]
 80106c6:	4619      	mov	r1, r3
 80106c8:	250a      	movs	r5, #10
 80106ca:	4638      	mov	r0, r7
 80106cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106d0:	3a30      	subs	r2, #48	; 0x30
 80106d2:	2a09      	cmp	r2, #9
 80106d4:	d903      	bls.n	80106de <_svfiprintf_r+0x196>
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d0c8      	beq.n	801066c <_svfiprintf_r+0x124>
 80106da:	9105      	str	r1, [sp, #20]
 80106dc:	e7c6      	b.n	801066c <_svfiprintf_r+0x124>
 80106de:	fb05 2101 	mla	r1, r5, r1, r2
 80106e2:	2301      	movs	r3, #1
 80106e4:	4607      	mov	r7, r0
 80106e6:	e7f0      	b.n	80106ca <_svfiprintf_r+0x182>
 80106e8:	ab03      	add	r3, sp, #12
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	4622      	mov	r2, r4
 80106ee:	4b11      	ldr	r3, [pc, #68]	; (8010734 <_svfiprintf_r+0x1ec>)
 80106f0:	a904      	add	r1, sp, #16
 80106f2:	4640      	mov	r0, r8
 80106f4:	f3af 8000 	nop.w
 80106f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80106fc:	4681      	mov	r9, r0
 80106fe:	d1d6      	bne.n	80106ae <_svfiprintf_r+0x166>
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	065b      	lsls	r3, r3, #25
 8010704:	f53f af35 	bmi.w	8010572 <_svfiprintf_r+0x2a>
 8010708:	9809      	ldr	r0, [sp, #36]	; 0x24
 801070a:	b01d      	add	sp, #116	; 0x74
 801070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010710:	ab03      	add	r3, sp, #12
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	4622      	mov	r2, r4
 8010716:	4b07      	ldr	r3, [pc, #28]	; (8010734 <_svfiprintf_r+0x1ec>)
 8010718:	a904      	add	r1, sp, #16
 801071a:	4640      	mov	r0, r8
 801071c:	f000 f882 	bl	8010824 <_printf_i>
 8010720:	e7ea      	b.n	80106f8 <_svfiprintf_r+0x1b0>
 8010722:	bf00      	nop
 8010724:	08010e30 	.word	0x08010e30
 8010728:	08010e36 	.word	0x08010e36
 801072c:	08010e3a 	.word	0x08010e3a
 8010730:	00000000 	.word	0x00000000
 8010734:	08010495 	.word	0x08010495

08010738 <_printf_common>:
 8010738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801073c:	4691      	mov	r9, r2
 801073e:	461f      	mov	r7, r3
 8010740:	688a      	ldr	r2, [r1, #8]
 8010742:	690b      	ldr	r3, [r1, #16]
 8010744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010748:	4293      	cmp	r3, r2
 801074a:	bfb8      	it	lt
 801074c:	4613      	movlt	r3, r2
 801074e:	f8c9 3000 	str.w	r3, [r9]
 8010752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010756:	4606      	mov	r6, r0
 8010758:	460c      	mov	r4, r1
 801075a:	b112      	cbz	r2, 8010762 <_printf_common+0x2a>
 801075c:	3301      	adds	r3, #1
 801075e:	f8c9 3000 	str.w	r3, [r9]
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	0699      	lsls	r1, r3, #26
 8010766:	bf42      	ittt	mi
 8010768:	f8d9 3000 	ldrmi.w	r3, [r9]
 801076c:	3302      	addmi	r3, #2
 801076e:	f8c9 3000 	strmi.w	r3, [r9]
 8010772:	6825      	ldr	r5, [r4, #0]
 8010774:	f015 0506 	ands.w	r5, r5, #6
 8010778:	d107      	bne.n	801078a <_printf_common+0x52>
 801077a:	f104 0a19 	add.w	sl, r4, #25
 801077e:	68e3      	ldr	r3, [r4, #12]
 8010780:	f8d9 2000 	ldr.w	r2, [r9]
 8010784:	1a9b      	subs	r3, r3, r2
 8010786:	42ab      	cmp	r3, r5
 8010788:	dc28      	bgt.n	80107dc <_printf_common+0xa4>
 801078a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801078e:	6822      	ldr	r2, [r4, #0]
 8010790:	3300      	adds	r3, #0
 8010792:	bf18      	it	ne
 8010794:	2301      	movne	r3, #1
 8010796:	0692      	lsls	r2, r2, #26
 8010798:	d42d      	bmi.n	80107f6 <_printf_common+0xbe>
 801079a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801079e:	4639      	mov	r1, r7
 80107a0:	4630      	mov	r0, r6
 80107a2:	47c0      	blx	r8
 80107a4:	3001      	adds	r0, #1
 80107a6:	d020      	beq.n	80107ea <_printf_common+0xb2>
 80107a8:	6823      	ldr	r3, [r4, #0]
 80107aa:	68e5      	ldr	r5, [r4, #12]
 80107ac:	f8d9 2000 	ldr.w	r2, [r9]
 80107b0:	f003 0306 	and.w	r3, r3, #6
 80107b4:	2b04      	cmp	r3, #4
 80107b6:	bf08      	it	eq
 80107b8:	1aad      	subeq	r5, r5, r2
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	6922      	ldr	r2, [r4, #16]
 80107be:	bf0c      	ite	eq
 80107c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107c4:	2500      	movne	r5, #0
 80107c6:	4293      	cmp	r3, r2
 80107c8:	bfc4      	itt	gt
 80107ca:	1a9b      	subgt	r3, r3, r2
 80107cc:	18ed      	addgt	r5, r5, r3
 80107ce:	f04f 0900 	mov.w	r9, #0
 80107d2:	341a      	adds	r4, #26
 80107d4:	454d      	cmp	r5, r9
 80107d6:	d11a      	bne.n	801080e <_printf_common+0xd6>
 80107d8:	2000      	movs	r0, #0
 80107da:	e008      	b.n	80107ee <_printf_common+0xb6>
 80107dc:	2301      	movs	r3, #1
 80107de:	4652      	mov	r2, sl
 80107e0:	4639      	mov	r1, r7
 80107e2:	4630      	mov	r0, r6
 80107e4:	47c0      	blx	r8
 80107e6:	3001      	adds	r0, #1
 80107e8:	d103      	bne.n	80107f2 <_printf_common+0xba>
 80107ea:	f04f 30ff 	mov.w	r0, #4294967295
 80107ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f2:	3501      	adds	r5, #1
 80107f4:	e7c3      	b.n	801077e <_printf_common+0x46>
 80107f6:	18e1      	adds	r1, r4, r3
 80107f8:	1c5a      	adds	r2, r3, #1
 80107fa:	2030      	movs	r0, #48	; 0x30
 80107fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010800:	4422      	add	r2, r4
 8010802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801080a:	3302      	adds	r3, #2
 801080c:	e7c5      	b.n	801079a <_printf_common+0x62>
 801080e:	2301      	movs	r3, #1
 8010810:	4622      	mov	r2, r4
 8010812:	4639      	mov	r1, r7
 8010814:	4630      	mov	r0, r6
 8010816:	47c0      	blx	r8
 8010818:	3001      	adds	r0, #1
 801081a:	d0e6      	beq.n	80107ea <_printf_common+0xb2>
 801081c:	f109 0901 	add.w	r9, r9, #1
 8010820:	e7d8      	b.n	80107d4 <_printf_common+0x9c>
	...

08010824 <_printf_i>:
 8010824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010828:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801082c:	460c      	mov	r4, r1
 801082e:	7e09      	ldrb	r1, [r1, #24]
 8010830:	b085      	sub	sp, #20
 8010832:	296e      	cmp	r1, #110	; 0x6e
 8010834:	4617      	mov	r7, r2
 8010836:	4606      	mov	r6, r0
 8010838:	4698      	mov	r8, r3
 801083a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801083c:	f000 80b3 	beq.w	80109a6 <_printf_i+0x182>
 8010840:	d822      	bhi.n	8010888 <_printf_i+0x64>
 8010842:	2963      	cmp	r1, #99	; 0x63
 8010844:	d036      	beq.n	80108b4 <_printf_i+0x90>
 8010846:	d80a      	bhi.n	801085e <_printf_i+0x3a>
 8010848:	2900      	cmp	r1, #0
 801084a:	f000 80b9 	beq.w	80109c0 <_printf_i+0x19c>
 801084e:	2958      	cmp	r1, #88	; 0x58
 8010850:	f000 8083 	beq.w	801095a <_printf_i+0x136>
 8010854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010858:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801085c:	e032      	b.n	80108c4 <_printf_i+0xa0>
 801085e:	2964      	cmp	r1, #100	; 0x64
 8010860:	d001      	beq.n	8010866 <_printf_i+0x42>
 8010862:	2969      	cmp	r1, #105	; 0x69
 8010864:	d1f6      	bne.n	8010854 <_printf_i+0x30>
 8010866:	6820      	ldr	r0, [r4, #0]
 8010868:	6813      	ldr	r3, [r2, #0]
 801086a:	0605      	lsls	r5, r0, #24
 801086c:	f103 0104 	add.w	r1, r3, #4
 8010870:	d52a      	bpl.n	80108c8 <_printf_i+0xa4>
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	6011      	str	r1, [r2, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	da03      	bge.n	8010882 <_printf_i+0x5e>
 801087a:	222d      	movs	r2, #45	; 0x2d
 801087c:	425b      	negs	r3, r3
 801087e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010882:	486f      	ldr	r0, [pc, #444]	; (8010a40 <_printf_i+0x21c>)
 8010884:	220a      	movs	r2, #10
 8010886:	e039      	b.n	80108fc <_printf_i+0xd8>
 8010888:	2973      	cmp	r1, #115	; 0x73
 801088a:	f000 809d 	beq.w	80109c8 <_printf_i+0x1a4>
 801088e:	d808      	bhi.n	80108a2 <_printf_i+0x7e>
 8010890:	296f      	cmp	r1, #111	; 0x6f
 8010892:	d020      	beq.n	80108d6 <_printf_i+0xb2>
 8010894:	2970      	cmp	r1, #112	; 0x70
 8010896:	d1dd      	bne.n	8010854 <_printf_i+0x30>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	f043 0320 	orr.w	r3, r3, #32
 801089e:	6023      	str	r3, [r4, #0]
 80108a0:	e003      	b.n	80108aa <_printf_i+0x86>
 80108a2:	2975      	cmp	r1, #117	; 0x75
 80108a4:	d017      	beq.n	80108d6 <_printf_i+0xb2>
 80108a6:	2978      	cmp	r1, #120	; 0x78
 80108a8:	d1d4      	bne.n	8010854 <_printf_i+0x30>
 80108aa:	2378      	movs	r3, #120	; 0x78
 80108ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108b0:	4864      	ldr	r0, [pc, #400]	; (8010a44 <_printf_i+0x220>)
 80108b2:	e055      	b.n	8010960 <_printf_i+0x13c>
 80108b4:	6813      	ldr	r3, [r2, #0]
 80108b6:	1d19      	adds	r1, r3, #4
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	6011      	str	r1, [r2, #0]
 80108bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108c4:	2301      	movs	r3, #1
 80108c6:	e08c      	b.n	80109e2 <_printf_i+0x1be>
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	6011      	str	r1, [r2, #0]
 80108cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108d0:	bf18      	it	ne
 80108d2:	b21b      	sxthne	r3, r3
 80108d4:	e7cf      	b.n	8010876 <_printf_i+0x52>
 80108d6:	6813      	ldr	r3, [r2, #0]
 80108d8:	6825      	ldr	r5, [r4, #0]
 80108da:	1d18      	adds	r0, r3, #4
 80108dc:	6010      	str	r0, [r2, #0]
 80108de:	0628      	lsls	r0, r5, #24
 80108e0:	d501      	bpl.n	80108e6 <_printf_i+0xc2>
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	e002      	b.n	80108ec <_printf_i+0xc8>
 80108e6:	0668      	lsls	r0, r5, #25
 80108e8:	d5fb      	bpl.n	80108e2 <_printf_i+0xbe>
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	4854      	ldr	r0, [pc, #336]	; (8010a40 <_printf_i+0x21c>)
 80108ee:	296f      	cmp	r1, #111	; 0x6f
 80108f0:	bf14      	ite	ne
 80108f2:	220a      	movne	r2, #10
 80108f4:	2208      	moveq	r2, #8
 80108f6:	2100      	movs	r1, #0
 80108f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108fc:	6865      	ldr	r5, [r4, #4]
 80108fe:	60a5      	str	r5, [r4, #8]
 8010900:	2d00      	cmp	r5, #0
 8010902:	f2c0 8095 	blt.w	8010a30 <_printf_i+0x20c>
 8010906:	6821      	ldr	r1, [r4, #0]
 8010908:	f021 0104 	bic.w	r1, r1, #4
 801090c:	6021      	str	r1, [r4, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d13d      	bne.n	801098e <_printf_i+0x16a>
 8010912:	2d00      	cmp	r5, #0
 8010914:	f040 808e 	bne.w	8010a34 <_printf_i+0x210>
 8010918:	4665      	mov	r5, ip
 801091a:	2a08      	cmp	r2, #8
 801091c:	d10b      	bne.n	8010936 <_printf_i+0x112>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	07db      	lsls	r3, r3, #31
 8010922:	d508      	bpl.n	8010936 <_printf_i+0x112>
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	6862      	ldr	r2, [r4, #4]
 8010928:	429a      	cmp	r2, r3
 801092a:	bfde      	ittt	le
 801092c:	2330      	movle	r3, #48	; 0x30
 801092e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010932:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010936:	ebac 0305 	sub.w	r3, ip, r5
 801093a:	6123      	str	r3, [r4, #16]
 801093c:	f8cd 8000 	str.w	r8, [sp]
 8010940:	463b      	mov	r3, r7
 8010942:	aa03      	add	r2, sp, #12
 8010944:	4621      	mov	r1, r4
 8010946:	4630      	mov	r0, r6
 8010948:	f7ff fef6 	bl	8010738 <_printf_common>
 801094c:	3001      	adds	r0, #1
 801094e:	d14d      	bne.n	80109ec <_printf_i+0x1c8>
 8010950:	f04f 30ff 	mov.w	r0, #4294967295
 8010954:	b005      	add	sp, #20
 8010956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801095a:	4839      	ldr	r0, [pc, #228]	; (8010a40 <_printf_i+0x21c>)
 801095c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010960:	6813      	ldr	r3, [r2, #0]
 8010962:	6821      	ldr	r1, [r4, #0]
 8010964:	1d1d      	adds	r5, r3, #4
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6015      	str	r5, [r2, #0]
 801096a:	060a      	lsls	r2, r1, #24
 801096c:	d50b      	bpl.n	8010986 <_printf_i+0x162>
 801096e:	07ca      	lsls	r2, r1, #31
 8010970:	bf44      	itt	mi
 8010972:	f041 0120 	orrmi.w	r1, r1, #32
 8010976:	6021      	strmi	r1, [r4, #0]
 8010978:	b91b      	cbnz	r3, 8010982 <_printf_i+0x15e>
 801097a:	6822      	ldr	r2, [r4, #0]
 801097c:	f022 0220 	bic.w	r2, r2, #32
 8010980:	6022      	str	r2, [r4, #0]
 8010982:	2210      	movs	r2, #16
 8010984:	e7b7      	b.n	80108f6 <_printf_i+0xd2>
 8010986:	064d      	lsls	r5, r1, #25
 8010988:	bf48      	it	mi
 801098a:	b29b      	uxthmi	r3, r3
 801098c:	e7ef      	b.n	801096e <_printf_i+0x14a>
 801098e:	4665      	mov	r5, ip
 8010990:	fbb3 f1f2 	udiv	r1, r3, r2
 8010994:	fb02 3311 	mls	r3, r2, r1, r3
 8010998:	5cc3      	ldrb	r3, [r0, r3]
 801099a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801099e:	460b      	mov	r3, r1
 80109a0:	2900      	cmp	r1, #0
 80109a2:	d1f5      	bne.n	8010990 <_printf_i+0x16c>
 80109a4:	e7b9      	b.n	801091a <_printf_i+0xf6>
 80109a6:	6813      	ldr	r3, [r2, #0]
 80109a8:	6825      	ldr	r5, [r4, #0]
 80109aa:	6961      	ldr	r1, [r4, #20]
 80109ac:	1d18      	adds	r0, r3, #4
 80109ae:	6010      	str	r0, [r2, #0]
 80109b0:	0628      	lsls	r0, r5, #24
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	d501      	bpl.n	80109ba <_printf_i+0x196>
 80109b6:	6019      	str	r1, [r3, #0]
 80109b8:	e002      	b.n	80109c0 <_printf_i+0x19c>
 80109ba:	066a      	lsls	r2, r5, #25
 80109bc:	d5fb      	bpl.n	80109b6 <_printf_i+0x192>
 80109be:	8019      	strh	r1, [r3, #0]
 80109c0:	2300      	movs	r3, #0
 80109c2:	6123      	str	r3, [r4, #16]
 80109c4:	4665      	mov	r5, ip
 80109c6:	e7b9      	b.n	801093c <_printf_i+0x118>
 80109c8:	6813      	ldr	r3, [r2, #0]
 80109ca:	1d19      	adds	r1, r3, #4
 80109cc:	6011      	str	r1, [r2, #0]
 80109ce:	681d      	ldr	r5, [r3, #0]
 80109d0:	6862      	ldr	r2, [r4, #4]
 80109d2:	2100      	movs	r1, #0
 80109d4:	4628      	mov	r0, r5
 80109d6:	f7ef fc3b 	bl	8000250 <memchr>
 80109da:	b108      	cbz	r0, 80109e0 <_printf_i+0x1bc>
 80109dc:	1b40      	subs	r0, r0, r5
 80109de:	6060      	str	r0, [r4, #4]
 80109e0:	6863      	ldr	r3, [r4, #4]
 80109e2:	6123      	str	r3, [r4, #16]
 80109e4:	2300      	movs	r3, #0
 80109e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109ea:	e7a7      	b.n	801093c <_printf_i+0x118>
 80109ec:	6923      	ldr	r3, [r4, #16]
 80109ee:	462a      	mov	r2, r5
 80109f0:	4639      	mov	r1, r7
 80109f2:	4630      	mov	r0, r6
 80109f4:	47c0      	blx	r8
 80109f6:	3001      	adds	r0, #1
 80109f8:	d0aa      	beq.n	8010950 <_printf_i+0x12c>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	079b      	lsls	r3, r3, #30
 80109fe:	d413      	bmi.n	8010a28 <_printf_i+0x204>
 8010a00:	68e0      	ldr	r0, [r4, #12]
 8010a02:	9b03      	ldr	r3, [sp, #12]
 8010a04:	4298      	cmp	r0, r3
 8010a06:	bfb8      	it	lt
 8010a08:	4618      	movlt	r0, r3
 8010a0a:	e7a3      	b.n	8010954 <_printf_i+0x130>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	464a      	mov	r2, r9
 8010a10:	4639      	mov	r1, r7
 8010a12:	4630      	mov	r0, r6
 8010a14:	47c0      	blx	r8
 8010a16:	3001      	adds	r0, #1
 8010a18:	d09a      	beq.n	8010950 <_printf_i+0x12c>
 8010a1a:	3501      	adds	r5, #1
 8010a1c:	68e3      	ldr	r3, [r4, #12]
 8010a1e:	9a03      	ldr	r2, [sp, #12]
 8010a20:	1a9b      	subs	r3, r3, r2
 8010a22:	42ab      	cmp	r3, r5
 8010a24:	dcf2      	bgt.n	8010a0c <_printf_i+0x1e8>
 8010a26:	e7eb      	b.n	8010a00 <_printf_i+0x1dc>
 8010a28:	2500      	movs	r5, #0
 8010a2a:	f104 0919 	add.w	r9, r4, #25
 8010a2e:	e7f5      	b.n	8010a1c <_printf_i+0x1f8>
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1ac      	bne.n	801098e <_printf_i+0x16a>
 8010a34:	7803      	ldrb	r3, [r0, #0]
 8010a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a3e:	e76c      	b.n	801091a <_printf_i+0xf6>
 8010a40:	08010e41 	.word	0x08010e41
 8010a44:	08010e52 	.word	0x08010e52

08010a48 <_free_r>:
 8010a48:	b538      	push	{r3, r4, r5, lr}
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	2900      	cmp	r1, #0
 8010a4e:	d045      	beq.n	8010adc <_free_r+0x94>
 8010a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a54:	1f0c      	subs	r4, r1, #4
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	bfb8      	it	lt
 8010a5a:	18e4      	addlt	r4, r4, r3
 8010a5c:	f000 f8d2 	bl	8010c04 <__malloc_lock>
 8010a60:	4a1f      	ldr	r2, [pc, #124]	; (8010ae0 <_free_r+0x98>)
 8010a62:	6813      	ldr	r3, [r2, #0]
 8010a64:	4610      	mov	r0, r2
 8010a66:	b933      	cbnz	r3, 8010a76 <_free_r+0x2e>
 8010a68:	6063      	str	r3, [r4, #4]
 8010a6a:	6014      	str	r4, [r2, #0]
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a72:	f000 b8c8 	b.w	8010c06 <__malloc_unlock>
 8010a76:	42a3      	cmp	r3, r4
 8010a78:	d90c      	bls.n	8010a94 <_free_r+0x4c>
 8010a7a:	6821      	ldr	r1, [r4, #0]
 8010a7c:	1862      	adds	r2, r4, r1
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	bf04      	itt	eq
 8010a82:	681a      	ldreq	r2, [r3, #0]
 8010a84:	685b      	ldreq	r3, [r3, #4]
 8010a86:	6063      	str	r3, [r4, #4]
 8010a88:	bf04      	itt	eq
 8010a8a:	1852      	addeq	r2, r2, r1
 8010a8c:	6022      	streq	r2, [r4, #0]
 8010a8e:	6004      	str	r4, [r0, #0]
 8010a90:	e7ec      	b.n	8010a6c <_free_r+0x24>
 8010a92:	4613      	mov	r3, r2
 8010a94:	685a      	ldr	r2, [r3, #4]
 8010a96:	b10a      	cbz	r2, 8010a9c <_free_r+0x54>
 8010a98:	42a2      	cmp	r2, r4
 8010a9a:	d9fa      	bls.n	8010a92 <_free_r+0x4a>
 8010a9c:	6819      	ldr	r1, [r3, #0]
 8010a9e:	1858      	adds	r0, r3, r1
 8010aa0:	42a0      	cmp	r0, r4
 8010aa2:	d10b      	bne.n	8010abc <_free_r+0x74>
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	4401      	add	r1, r0
 8010aa8:	1858      	adds	r0, r3, r1
 8010aaa:	4282      	cmp	r2, r0
 8010aac:	6019      	str	r1, [r3, #0]
 8010aae:	d1dd      	bne.n	8010a6c <_free_r+0x24>
 8010ab0:	6810      	ldr	r0, [r2, #0]
 8010ab2:	6852      	ldr	r2, [r2, #4]
 8010ab4:	605a      	str	r2, [r3, #4]
 8010ab6:	4401      	add	r1, r0
 8010ab8:	6019      	str	r1, [r3, #0]
 8010aba:	e7d7      	b.n	8010a6c <_free_r+0x24>
 8010abc:	d902      	bls.n	8010ac4 <_free_r+0x7c>
 8010abe:	230c      	movs	r3, #12
 8010ac0:	602b      	str	r3, [r5, #0]
 8010ac2:	e7d3      	b.n	8010a6c <_free_r+0x24>
 8010ac4:	6820      	ldr	r0, [r4, #0]
 8010ac6:	1821      	adds	r1, r4, r0
 8010ac8:	428a      	cmp	r2, r1
 8010aca:	bf04      	itt	eq
 8010acc:	6811      	ldreq	r1, [r2, #0]
 8010ace:	6852      	ldreq	r2, [r2, #4]
 8010ad0:	6062      	str	r2, [r4, #4]
 8010ad2:	bf04      	itt	eq
 8010ad4:	1809      	addeq	r1, r1, r0
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	605c      	str	r4, [r3, #4]
 8010ada:	e7c7      	b.n	8010a6c <_free_r+0x24>
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
 8010ade:	bf00      	nop
 8010ae0:	2001b328 	.word	0x2001b328

08010ae4 <_malloc_r>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	1ccd      	adds	r5, r1, #3
 8010ae8:	f025 0503 	bic.w	r5, r5, #3
 8010aec:	3508      	adds	r5, #8
 8010aee:	2d0c      	cmp	r5, #12
 8010af0:	bf38      	it	cc
 8010af2:	250c      	movcc	r5, #12
 8010af4:	2d00      	cmp	r5, #0
 8010af6:	4606      	mov	r6, r0
 8010af8:	db01      	blt.n	8010afe <_malloc_r+0x1a>
 8010afa:	42a9      	cmp	r1, r5
 8010afc:	d903      	bls.n	8010b06 <_malloc_r+0x22>
 8010afe:	230c      	movs	r3, #12
 8010b00:	6033      	str	r3, [r6, #0]
 8010b02:	2000      	movs	r0, #0
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	f000 f87d 	bl	8010c04 <__malloc_lock>
 8010b0a:	4a21      	ldr	r2, [pc, #132]	; (8010b90 <_malloc_r+0xac>)
 8010b0c:	6814      	ldr	r4, [r2, #0]
 8010b0e:	4621      	mov	r1, r4
 8010b10:	b991      	cbnz	r1, 8010b38 <_malloc_r+0x54>
 8010b12:	4c20      	ldr	r4, [pc, #128]	; (8010b94 <_malloc_r+0xb0>)
 8010b14:	6823      	ldr	r3, [r4, #0]
 8010b16:	b91b      	cbnz	r3, 8010b20 <_malloc_r+0x3c>
 8010b18:	4630      	mov	r0, r6
 8010b1a:	f000 f863 	bl	8010be4 <_sbrk_r>
 8010b1e:	6020      	str	r0, [r4, #0]
 8010b20:	4629      	mov	r1, r5
 8010b22:	4630      	mov	r0, r6
 8010b24:	f000 f85e 	bl	8010be4 <_sbrk_r>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	d124      	bne.n	8010b76 <_malloc_r+0x92>
 8010b2c:	230c      	movs	r3, #12
 8010b2e:	6033      	str	r3, [r6, #0]
 8010b30:	4630      	mov	r0, r6
 8010b32:	f000 f868 	bl	8010c06 <__malloc_unlock>
 8010b36:	e7e4      	b.n	8010b02 <_malloc_r+0x1e>
 8010b38:	680b      	ldr	r3, [r1, #0]
 8010b3a:	1b5b      	subs	r3, r3, r5
 8010b3c:	d418      	bmi.n	8010b70 <_malloc_r+0x8c>
 8010b3e:	2b0b      	cmp	r3, #11
 8010b40:	d90f      	bls.n	8010b62 <_malloc_r+0x7e>
 8010b42:	600b      	str	r3, [r1, #0]
 8010b44:	50cd      	str	r5, [r1, r3]
 8010b46:	18cc      	adds	r4, r1, r3
 8010b48:	4630      	mov	r0, r6
 8010b4a:	f000 f85c 	bl	8010c06 <__malloc_unlock>
 8010b4e:	f104 000b 	add.w	r0, r4, #11
 8010b52:	1d23      	adds	r3, r4, #4
 8010b54:	f020 0007 	bic.w	r0, r0, #7
 8010b58:	1ac3      	subs	r3, r0, r3
 8010b5a:	d0d3      	beq.n	8010b04 <_malloc_r+0x20>
 8010b5c:	425a      	negs	r2, r3
 8010b5e:	50e2      	str	r2, [r4, r3]
 8010b60:	e7d0      	b.n	8010b04 <_malloc_r+0x20>
 8010b62:	428c      	cmp	r4, r1
 8010b64:	684b      	ldr	r3, [r1, #4]
 8010b66:	bf16      	itet	ne
 8010b68:	6063      	strne	r3, [r4, #4]
 8010b6a:	6013      	streq	r3, [r2, #0]
 8010b6c:	460c      	movne	r4, r1
 8010b6e:	e7eb      	b.n	8010b48 <_malloc_r+0x64>
 8010b70:	460c      	mov	r4, r1
 8010b72:	6849      	ldr	r1, [r1, #4]
 8010b74:	e7cc      	b.n	8010b10 <_malloc_r+0x2c>
 8010b76:	1cc4      	adds	r4, r0, #3
 8010b78:	f024 0403 	bic.w	r4, r4, #3
 8010b7c:	42a0      	cmp	r0, r4
 8010b7e:	d005      	beq.n	8010b8c <_malloc_r+0xa8>
 8010b80:	1a21      	subs	r1, r4, r0
 8010b82:	4630      	mov	r0, r6
 8010b84:	f000 f82e 	bl	8010be4 <_sbrk_r>
 8010b88:	3001      	adds	r0, #1
 8010b8a:	d0cf      	beq.n	8010b2c <_malloc_r+0x48>
 8010b8c:	6025      	str	r5, [r4, #0]
 8010b8e:	e7db      	b.n	8010b48 <_malloc_r+0x64>
 8010b90:	2001b328 	.word	0x2001b328
 8010b94:	2001b32c 	.word	0x2001b32c

08010b98 <_realloc_r>:
 8010b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9a:	4607      	mov	r7, r0
 8010b9c:	4614      	mov	r4, r2
 8010b9e:	460e      	mov	r6, r1
 8010ba0:	b921      	cbnz	r1, 8010bac <_realloc_r+0x14>
 8010ba2:	4611      	mov	r1, r2
 8010ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ba8:	f7ff bf9c 	b.w	8010ae4 <_malloc_r>
 8010bac:	b922      	cbnz	r2, 8010bb8 <_realloc_r+0x20>
 8010bae:	f7ff ff4b 	bl	8010a48 <_free_r>
 8010bb2:	4625      	mov	r5, r4
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb8:	f000 f826 	bl	8010c08 <_malloc_usable_size_r>
 8010bbc:	42a0      	cmp	r0, r4
 8010bbe:	d20f      	bcs.n	8010be0 <_realloc_r+0x48>
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	4638      	mov	r0, r7
 8010bc4:	f7ff ff8e 	bl	8010ae4 <_malloc_r>
 8010bc8:	4605      	mov	r5, r0
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d0f2      	beq.n	8010bb4 <_realloc_r+0x1c>
 8010bce:	4631      	mov	r1, r6
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	f7ff fbfe 	bl	80103d2 <memcpy>
 8010bd6:	4631      	mov	r1, r6
 8010bd8:	4638      	mov	r0, r7
 8010bda:	f7ff ff35 	bl	8010a48 <_free_r>
 8010bde:	e7e9      	b.n	8010bb4 <_realloc_r+0x1c>
 8010be0:	4635      	mov	r5, r6
 8010be2:	e7e7      	b.n	8010bb4 <_realloc_r+0x1c>

08010be4 <_sbrk_r>:
 8010be4:	b538      	push	{r3, r4, r5, lr}
 8010be6:	4c06      	ldr	r4, [pc, #24]	; (8010c00 <_sbrk_r+0x1c>)
 8010be8:	2300      	movs	r3, #0
 8010bea:	4605      	mov	r5, r0
 8010bec:	4608      	mov	r0, r1
 8010bee:	6023      	str	r3, [r4, #0]
 8010bf0:	f7f0 f932 	bl	8000e58 <_sbrk>
 8010bf4:	1c43      	adds	r3, r0, #1
 8010bf6:	d102      	bne.n	8010bfe <_sbrk_r+0x1a>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	b103      	cbz	r3, 8010bfe <_sbrk_r+0x1a>
 8010bfc:	602b      	str	r3, [r5, #0]
 8010bfe:	bd38      	pop	{r3, r4, r5, pc}
 8010c00:	2001e8ec 	.word	0x2001e8ec

08010c04 <__malloc_lock>:
 8010c04:	4770      	bx	lr

08010c06 <__malloc_unlock>:
 8010c06:	4770      	bx	lr

08010c08 <_malloc_usable_size_r>:
 8010c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c0c:	1f18      	subs	r0, r3, #4
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	bfbc      	itt	lt
 8010c12:	580b      	ldrlt	r3, [r1, r0]
 8010c14:	18c0      	addlt	r0, r0, r3
 8010c16:	4770      	bx	lr

08010c18 <_init>:
 8010c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c1a:	bf00      	nop
 8010c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c1e:	bc08      	pop	{r3}
 8010c20:	469e      	mov	lr, r3
 8010c22:	4770      	bx	lr

08010c24 <_fini>:
 8010c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c26:	bf00      	nop
 8010c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2a:	bc08      	pop	{r3}
 8010c2c:	469e      	mov	lr, r3
 8010c2e:	4770      	bx	lr
